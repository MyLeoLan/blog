<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于评论,统一回复]]></title>
    <url>%2Fposts%2F50249%2F</url>
    <content type="text"><![CDATA[关于评论系统的问题，今天无意间登陆后台才发现有如此多的垃圾评论，不知是多说出了问题还是我的设置有问题，之前是能接收到通知的，但不知什么时候开始就无法接收到通知了。 关于回复，不管是善意还是恶意，对于没能及时回复感到抱歉。多说于6月停止服务，没有更适合的评论系统，所以博客决定进行整改，应该会在7月前完成。 对于博客内容，主要是工作中遇到的内容更新的比较快，其他的瞎折腾要有时间才会去更新，但是都会尽量的写详细，对于没能及时回复感到抱歉，可以给我发邮件：842632422@qq.com（基本每天都会查收邮件）；有什么好的建议欢迎提出来，非常感谢！ 另外非常感谢今天Archonz同学的打赏（应该是来自于博客，我只有在博客留过二维码），要不是支付宝有提醒，我也不会来看多说后台（以前多说有新评论都会受到邮件通知的，现在没有了@_@~）。 本博客的主要目的是个人整理思路，方便本人。最好是能给大家一点思路，技术的价值在于分享，没有什么装逼嫌疑，希望某些用户留点口德，非常感谢！]]></content>
      <tags>
        <tag>关于评论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FTP]]></title>
    <url>%2Fposts%2F10719%2F</url>
    <content type="text"><![CDATA[Centos 不完整，待完成1yum install vsftpd -y 修改配置12345vim /etc/vsftpd/vsftpd.conf#修改以下项目 anonymous_enable=NO #关闭匿名登录chroot_local_user=YES #禁止跳出家目录 创建用户1234useradd -s /sbin/nologin -d /var/www/html(指定家目录) ftp_usernamepasswd ftp_usernamechmod o+w /var/www/html(家目录) 要关闭selinux(修改配置文件要重启生效)，现在立刻生效：setenforce 0 1234567#Centos 6service vsftpd restartchkconfig vsftpd on#Centos 7systemctl restart vsftpdsystemctl enable vsftpd 注意要开启防火墙的端口。如果是被动模式，要开1024以上的端口若干个，并且配置文件中指定 参考：http://www.centoscn.com/CentosServer/ftp/2013/0730/816.htmlhttp://www.linuxidc.com/Linux/2013-09/90562.htmhttp://www.linuxidc.com/Linux/2013-09/90560.htm Windows在Windows上安装FTP可以在服务器里添加角色，或者下载第三方FTP服务端，注意设置时如果是被动模式要开启1024以上的端口若干个，路由开放这些端口。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux备份恢复]]></title>
    <url>%2Fposts%2F32881%2F</url>
    <content type="text"><![CDATA[文件备份恢复 Linux系统的备份恢复tar命令备份整个系统注意根目录下要有充足的可用空间用于备份。123456cd /#tar.gz格式tar cvpzf system_backup.tar.gz / --exclude=/proc --exclude=/lost+found --exclude=/system_backup.tar.gz --exclude=/mnt --exclude=/sys#tar.bz2格式tar cvpjf system_backup.tar.bz2 / --exclude=/proc --exclude=/lost+found --exclude=/system_backup.tar.bz2 --exclude=/mnt --exclude=/sys 恢复系统1234567891011cd /#上传文件到根目录下tar xvpfz system_backup.tar.gz -C /或tar xvpfj system_backup.tar.bz2 -C /#创建备份时排除的目录mkdir procmkdir lost+foundmkdir mntmkdir sys /proc 权限：文件所有者：root群组：root 所有者：读取 执行 群组：读取 执行 其它：读取 执行 /lost+found 权限：文件所有者：root群组：root 所有者：读取 写入 执行 群组：读取 执行 其它：读取 执行 /mnt 权限：文件所有者：root群组：root 所有者：读取 写入 执行 群组：读取 执行 其它：读取 执行 /sys 权限：文件所有者：root群组：root 所有者：读取 写入 执行 群组：读取 执行 其它：读取 执行 恢复完成重启以后，所以的事情都会和你备份的时候一模一样。 rsync命令注意目标分区的格式最好是NTFS、FAT、EXT之类的格式，避免遇到大于4G的文件无法备份的问题。123456#最好有其他分区或外接存储设备，挂载好，df -lh看挂载点。#备份rsync -Pa / /media/usb/backup_20170410 --exclude=/media/* --exclude=/sys/* --exclude=/proc/* --exclude=/mnt/* --exclude=/tmp/*#恢复rsync -Pa /media/usb/backup_20170410 / dd命令dd命令属于扇区克隆，目标分区要比备份分区要大，即使没有使用的空间也会被原样克隆下来，会比较慢。123456#备份df -h #查看系统所在分区dd if=/dev/sda1 of=/dev/sdb3 #备份sda1到sdb3中#恢复dd if=/dev/sdb3 of=/dev/sda1 #恢复sdb3到sdb1中 CloneZilla(再生龙)此款软件需要另外下载，支持几乎所有主流系统，可通过U盘启动]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Linux备份恢复</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PostgreSQL数据库]]></title>
    <url>%2Fposts%2F53623%2F</url>
    <content type="text"><![CDATA[安装官网安装教程：https://www.postgresql.org/download/linux/redhat/ http://www.cnblogs.com/qiyebao/p/4562557.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenWRT-LEDE]]></title>
    <url>%2Fposts%2F23851%2F</url>
    <content type="text"><![CDATA[OpenWrt官网：https://openwrt.org项目地址：:https://github.com/openwrt/openwrt固件：https://downloads.openwrt.org/chaos_calmer/15.05.1/ LEDE官网：https://lede-project.org/zh/start项目地址：https://lede-project.org/docs/guide-developer/the-source-code固件：https://downloads.lede-project.org/snapshots/targets]]></content>
      <categories>
        <category>路由</category>
      </categories>
      <tags>
        <tag>OpenWRT-LEDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell技巧]]></title>
    <url>%2Fposts%2F39984%2F</url>
    <content type="text"><![CDATA[Shell快捷键 编辑命令Ctrl + a ：移到命令行首Ctrl + e ：移到命令行尾Ctrl + f ：按字符前移（右向）Ctrl + b ：按字符后移（左向）Alt + f ：按单词前移（右向）Alt + b ：按单词后移（左向）Ctrl + xx：在命令行首和光标之间移动Ctrl + u ：从光标处删除至命令行首Ctrl + k ：从光标处删除至命令行尾Ctrl + w ：从光标处删除至字首Alt + d ：从光标处删除至字尾Ctrl + d ：删除光标处的字符Ctrl + h ：删除光标前的字符Ctrl + y ：粘贴至光标后Alt + c ：从光标处更改为首字母大写的单词Alt + u ：从光标处更改为全部大写的单词Alt + l ：从光标处更改为全部小写的单词Ctrl + t ：交换光标处和之前的字符Alt + t ：交换光标处和之前的单词Alt + Backspace：与 Ctrl + w 相同类似，分隔符有些差别 [感谢 rezilla 指正] 重新执行命令Ctrl + r：逆向搜索命令历史Ctrl + g：从历史搜索模式退出Ctrl + p：历史中的上一条命令Ctrl + n：历史中的下一条命令Alt + .：使用上一条命令的最后一个参数 控制命令Ctrl + l：清屏Ctrl + o：执行当前命令，并选择上一条命令Ctrl + s：阻止屏幕输出Ctrl + q：允许屏幕输出Ctrl + c：终止命令Ctrl + z：挂起命令Bang (!) 命令 !!：执行上一条命令!blah：执行最近的以 blah 开头的命令，如 !ls!blah:p：仅打印输出，而不执行!\$：上一条命令的最后一个参数，与 Alt + . 相同!\$:p：打印输出 !$ 的内容!*：上一条命令的所有参数!*:p：打印输出 ! 的内容^blah：删除上一条命令中的 blah*^blah^foo：将上一条命令中的 blah 替换为 foo^blah^foo^：将上一条命令中所有的 blah 都替换为 foo 友情提示_： 以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 set -o emacs 设置。 ^S、^Q、^C、^Z 是由终端设备处理的，可用 stty 命令设置。 原文：https://linuxtoy.org/archives/bash-shortcuts.html 脚本调试参考：http://blog.csdn.net/mupenghaha/article/details/8835956?locationNum=2&amp;fps=1http://blog.csdn.net/Jerry_1126/article/details/52096886?locationNum=3&amp;fps=1 脚本攻略参考：http://man.linuxde.net/shell-script]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TFS代码管理]]></title>
    <url>%2Fposts%2F37588%2F</url>
    <content type="text"><![CDATA[TFS（Team Foundation Server）是一种代码管理工具，工作原理类似于SVN。 安装TFS还是比较简单的，在Windows Server服务器环境下安装是很简单的，TFS依赖SQL数据库，一般SQL2014及以上版本都需要.NET 4.5以上的版本。所以最好先安装.NET 4.5，不然一定会报错的。 安装Microsoft .NET Framework 4https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=17718 Microsoft .NET Framework 4.5https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30653 SQL 2014 下载https://www.microsoft.com/zh-CN/download/details.aspx?id=42299选择有Management的64位版本，如：SQLManagementStudio_x64_CHS.exe TFS 2015 下载https://www.microsoft.com/zh-cn/download/details.aspx?id=48260 参考：http://m.blog.csdn.net/article/details?id=41447989 安装完TFS后按提示简单配置之后就可以使用了，Web管理界面是：localhost:8080 计划备份强烈建议大家用TFS自带的备份功能进行备份，用Windows做服务器翻车只是迟早的问题，没有备份后悔都来不及。 设置计划备份时如果报错，使用的Administrator用户，依然提示：“网络路径没有权限”之类的，这个不知道什么原因，死活解决不了，用普通账户（有读写那个网络共享文件夹的权限）就能正常使用了。 异地迁移难免服务器出现问题或者需要数据迁移，在源服务器遭病毒破坏无法使用时，要在新的服务器上重新部署，在安装好TFS和SQL Server之后，直接用TFS还原在异地备份的数据（这种方法会出现一些棘手的问题，不知道还有没有更好的方法），恢复之后发现无法登陆，要修改服务器主机名和源服务器的主机名一样（貌似是要校验源主机名的）。 重启之后应该是只可以用win管理员administrator登陆的；其他用户都无法登陆，这时在全局权限里的管理员组添加用户就能登陆了；但是这样每一个人都可以看到所有的项目，他本身的项目是已经打了勾的了，这个是来自于第二层的权限认证。目前我还没有找到怎么让普通用户能登陆的办法。 接着在VS中连接TFS服务器（一般是没什么的问题的），但是，如果你在使用源TFS后，你自己的电脑的主机名改过了；之后源TFS出了问题才还原到新主机上的；发现会提示“创建工作区映射”，这是因为数据库中的主机名多对应的工作空间和你当前主机名不同，无法确保是不是同一个项目。这时就随便映射一下新的工作空间，然后在数据库中查询改主机名，可以看到有一个计算机的ID（复制下来），把新的记录删掉，把ID替换掉旧的，VS就可以映射原来的工作空间了。 这里不得不吐槽TFS是奇葩的存在，虽然我第一次用TFS，安装是很简单，但是各种设置简直奇葩再奇葩，遇到问题，基本找不到资料；官方的问题完全就是敷衍式骗好评的网页；根本解决不了问题；需要有极大的耐心来解决。貌似所有项目是共用一个版本库的，自己没有自己的代码历史版本，只有全局的版本，差git十万八千里（为什么这么说呢，等服务器宕机一次你就明白有多难整了），原理有点像SVN，一旦宕机其他人就完全没法工作了。一大帮开发人员围着你问什么时候弄好@_@~,那简直想死的心都有了。 留一些网址，有空的时候研究一下：https://support.microsoft.com/zh-cn/help/909264/naming-conventions-in-active-directory-for-computers-domains-sites-and-oushttps://msdn.microsoft.com/zh-cn/library/ms252458(d=printer).aspxhttps://msdn.microsoft.com/zh-cn/library/ms404869.aspxhttps://msdn.microsoft.com/zh-cn/library/ms404883.aspx?f=255&amp;MSPPError=-2147217396https://msdn.microsoft.com/zh-cn/library/vs/alm/jj620932http://developer.51cto.com/art/201010/229066.htmhttp://blog.csdn.net/hrabeyond/article/details/7324611]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>TFS代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邮件服务器、第三方邮件服务]]></title>
    <url>%2Fposts%2F26298%2F</url>
    <content type="text"><![CDATA[域名解析第三方接管域名这种情况适合域名由第三方接管的情况下。目前的设置是这样的，就是MX记录指向mail.域名，最后通过A记录指向IP。这种情况下访问mail.域名也会跳转到IP:80的网站上。@ ---》MX ---》mail.域名mail ---》A ---》IP 域名未被第三方接管这种情况(域名在原营运商的DNS下[没有被第三方DNS接管的情况下])：第三方DNS接管之后，即使没有开启mail.域名的解析也会被解析到DNS的主服务器上，导致发送到该邮件地址时导向到了DNS的服务器IP上，找不到邮件服务器的IP，于是变成了退信，无法接收。这种情况下有@ —》A记录指向了IP则不需要mail —》A记录指向了IP如果域名已经备案过了，可以设置隐性跳转（看图红字）；这访问mail.域名时就能打开网页版的邮箱。 域名后面的点是自动加的，不同的DNS解析方式不同，有的会自动加点，有的不会，没有影响。 TXT记录一般用来做反垃圾邮件，格式有很多种： “v=spf1 include:spf.mail.域名 ~all” “v=spf1 ip4:邮件服务器的IP ~all” DNS反向解析（PTR）解析测试：https://mxtoolbox.com/SuperTool.aspx输入邮件服务器的域名检测如果是没有设置DNS反向解析，有些邮件服务器是不接受没有PTR的邮件的，会拒收，导致无法发送给对方，也会导致部分邮件丢件。 这时需要联系ISP（提供公网固定IP的服务商），叫他们添加DNS反向解析，把邮件服务器IP，指向到你的邮件域名。如果ISP无法帮你设置，在群晖Synology中可以把网线直连NAS，不要经过路由，在NAS中获取IP，然后搭建DNS服务器。在Win_Server中也可以添加DNS服务器后添加反向解析，具体方法请自行搜索。 域名解析测试验证win中用nslookup测试：http://jingyan.baidu.com/article/ce09321b2bae742bfe858f59.html只要符合@ ---》MX ---》mail.域名 ---》A ---》IP这样的话应该是正确的，能够正常收发邮件。 http://www.cnblogs.com/moonvan/archive/2010/08/24/1807003.htmlhttp://www.docin.com/p-580267583.html 邮件服务器的搭建一定要注意路由的端口转发有没有开启邮件服务的端口：SMTP(发):25 SSL:465 TLS:587IMAP(收):143 SSL:993POP3(收):110 SSL:995 群晖DSM搭建邮件服务器群晖里自带了邮件服务器的套件，安装之后简单设置就可以使用了。主机名（FQDN）:填域名就行，最后的邮件地址就是：user_name@域名；如果填的是mail.域名，则最后得到的邮件地址是：user_name@mail.域名 IMAP/POP3 功能全部开启。 控制面板中安全性中最好开启自动封锁（邮件服务器很容易遭受攻击） 控制面板安全性中默认没有开启防火墙的，如果需要路由的端口转发的话即使不开防火墙也是比较安全的（云服务器默认是开启全部端口，这时就需要防火墙来保护了）。 设置完成后，记得设置端口转发，在win下用telnet “IP” “port”测试是否能通。 邮件客户端： 网页版的做好把80端口映射到群晖的80端口，这个访问web版的mail就可以直接使用：http(s)://IP/mail 就能访问，登录账号密码就是系统中设置的用户的账户密码（不是用邮件地址登录） 第三方邮件客户端登录时看清是邮件地址还是账户，邮件地址是：user_name@域名 用户：user_name 密码：user_passwd地址是：smtp.域名、imap.域名、pop3.域名 对应的的端口看你是不是用SSL。 Windsws_Server搭建邮件服务器不建议使用什么破解版的邮件服务器软件（免费版的还是可以的免费版不是破解版），非常不安全。预算充足的话可以考虑收费的服务。 看参考，但不要一步一步设置，全部看完再设置。参考：http://liujb.blog.51cto.com/269257/1784870http://www.2cto.com/os/201604/498893.htmlhttp://www.mamicode.com/info-detail-1370549.htmlhttp://www.360doc.com/content/09/0924/12/32573_6370328.shtmlhttps://msdn.microsoft.com/zh-cn/library/dn292550.aspx 测试SMTP(包括中继模式） 创建一个txt文档，如名为email.txt，内容如下： 123456FROM:mail.travelwebsite@travelwebsite.com #发件箱必须为你在邮件服务器上设置的那个账户，否则没有权限发送TO:842632422@qq.comSUBJECT: Test email from SMTPThis is a test email sent from my SMTP server[上面要空一行，不然邮件的内容会变成标题]这里是body，邮件内容 将email.txt复制到如下路径c:\inetpub\mailroot\pickup(SMTP的默认目录) 关于报错：IIS 拾取目录 windows测试工具：http://ofyfogrgx.bkt.clouddn.com/image/20170413/170002671.exehttp://ofyfogrgx.bkt.clouddn.com/image/20170413/170020980.exe Windows下通过程序实现SMTP发送邮件（本人未测试）：http://www.jianshu.com/p/5005a8642103 Win中免费的邮件系统https://www.hmailserver.org/https://macallan-mail-solution.en.softonic.com/http://download.cnet.com/ArGoSoft-Mail-Server-Freeware/3000-2369_4-10038331.htmlhttp://www.exchangecn.com/exchange2016 Linux搭建邮件服务器待整理(还未完成)：http://www.cnblogs.com/llius/p/5076235.html?utm_source=tuicool&amp;utm_medium=referralhttps://www.freehao123.com/iredmail/http://rfyiamcool.blog.51cto.com/1030776/948744/http://www.ilanni.com/?cat=936 centos7邮件：https://www.fancycoding.com/centos7-mail-server-with-dovecot-postfix-ssl/ 第三方邮件服务（企业）Office365购买了账号后可以填写到自己的邮件服务器中，用作STMP，IMAP，POP3等中继，这样不用设置域名，证书等等，原理就是把自己的服务器转变为客户端一样去链接微软的服务器。 POP设置（接收）服务器名称: outlook.office365.com端口: 995加密方法: TLS IMAP设置（接收）服务器名称: outlook.office365.com端口: 993加密方法: TLS SMTP设置（发送）服务器名称: smtp.office365.com端口: 587加密方法: STARTTLS （也是可以用TLS加密的）]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>邮件服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[珠海迈科笔记]]></title>
    <url>%2Fposts%2F57404%2F</url>
    <content type="text"><![CDATA[强迫症犯了，陈列在笔记中，于是弄成笔记保存。 MK服务器搭建，常用命令 centos6.X及以下版本网卡配置vi /etc/sysconfig/network-scripts/ifcfg-eth0 编辑配置文件,添加修改以下内容双网不要配内网网关联通公网：12345678DEVICE=eth0BOOTPROTO=staticONBOOT=yesIPADDR=221.X.XXX.114NETMASK=255.255.255.224 GATEWAY=221.X.XXX.97DNS1=221.X.XX.88DNS2=8.8.8.8 内网：123456789vi /etc/sysconfig/network-scripts/ifcfg-eth1DEVICE=eth1BOOTPROTO=staticONBOOT=yesIPADDR=192.168.0.114NETMASK=255.255.252.0 GATEWAY=192.168.0.1#DNS1=221.X.XX.88#DNS2=8.8.8.8 （公网配了DNS和网关了） 修改DNS也可以1234vim /etc/resolv.confnameserver 221.X.XX.88nameserver 8.8.8.8IPV6INIT=no #禁止IPV6 :wq! #保存退出 123456service ip6tables stop #停止IPV6服务chkconfig ip6tables off #禁止IPV6开机启动service yum-updatesd stop #关闭系统自动更新chkconfig yum-updatesd off #禁止开启启动service network restart #重启网络连接ifconfig #查看IP地址 设置主机名123vi /etc/sysconfig/network (CentOS)vi /etc/hostshostname newname #(newname就是你要改的主机名) 12345service network restart 或 /etc/network restartyum install wget lrzsz -yservice sshd startchkconfig sshd onshutdown -r now #重启系统 Ubuntu14.04及以上版本新安装的Ubuntu如果没有root用户密码，用sudo passwd root设置root密码。12apt-get install wget lrzsz openssh-server vim -y/etc/init.d/ssh start 配置文件etc/ssh/sshd_config将 /etc/ssh/sshd_confg中PermitRootLogin no 改为yes，重新启动ssh服务service sshd restart最重要的一点是Ubuntu超级用户root用户被禁用掉了，这就是为什么我们登陆时只能以普通用户登陆，而且switch user时没有root选项。必须使用命令启动root。即输入：sudo passwd。然后输入密码即可启动root。 网卡地址配置Ubuntu的网络配置文件是：/etc/network/interfaces 1、为网卡配置静态IP地址sudo vi /etc/network/interfaces双网不要配内网网关1234567891011121314151617auto loiface lo inet loopback#ifconfig看到eth0用作公网auto eth0 （有的可能是eno0或eno1）iface eth0 inet staticaddress 221.X.XXX.114gateway 221.X.XXX.97netmask 255.255.255.224dns-nameservers 221.X.XX.88dns-nameservers 8.8.8.8auto eth1iface eth1 inet staticaddress 192.168.0.254netmask 255.255.252.0#gateway 192.168.0.1:wq 保存退出/etc/init.d/networking restart 2、以DHCP 方式配置网卡12auto eth0iface eth0 inet dhcp 用/etc/init.d/networking restart命令使网络设置生效 修改DNS服务器法一12vi /etc/network/interfacesdns-nameservers 8.8.8.8 法二123vi /etc/resolvconf/resolv.conf.d/head #重启后生效，重启不失效resolvconf -uiptables -A INPUT -p tcp -i eth0 --dport 22 -j ACCEPT 修改主机名123vi /etc/hostname(Ubuntu)vi /etc/hostshostname newname #newname就是你要改的主机名 /etc/init.d/networking restart shutdown -r now 重启系统 Ubuntu 系统版本升级（如从16.04升到16.10）Canonical 已经提供了一个直接升级的方法，非常快捷容易。适用于：Kubuntu、 Xubuntu、 Lubuntu、 Ubuntu GNOME、 Ubuntu Mate。首先更新一下系统：12sudo apt-get updatesudo apt-get dist-upgrade 接下来，需要安装更新管理器的核心：12sudo apt-get install update-manager-core sudo do-release-upgrade -d 或 sudo update-manager -d 注：d-release-upgrade 命令是帮助我们寻找最新的稳定版本，而 -d 参数意思是包括非稳定版本。 浙江服务器（20160910）现在可能已经变了，仅仅只是当时的情况。 例：192.168.0.99 采集服务器 192.168.0.233 安装有hls和lts 192.168.0.234 安装有lts 192.168.0.236 安装有lts 192.168.0.234或192.168.0.236的转码来源可以来自装有hls的192.168.0.233，也可以直接来自其他服务器， 在3台服务器lts源直接填写其他服务器，转码（来源转H265）任务平均分配到192.168.0.234和192.168.0.236上，每台转7个节目，输出udp://127.0.0.1:xxxx/TVxxx 但是，192.168.0.234和192.168.0.236上的输出不能填写udp://127.0.0.1:xxxx/TVxxx 而应该是udp://192.168.0.233:xxxx/TVxxx(必须输出到装有hls模块的机子上，然后在192.168.0.233上才能获取的到)此时在192.168.0.233上才能把3台服务器转出来的作为节目推送出去，同时也能作为源输入进行转H264 zibibx监控（自定义的文件配置）转码节目的监控1cd /opt/starview/cdn/lts/cfg/channels/ 会根据这个目录下的文件来查找进程，如果有没有这个进程就报警（这些文件是由lts模块下发时生成的） 采集卡监控具体监控那些卡在/media/caiji 文件里写明 采集服务器搭建MuMuDVB安装MuMuDVB安装: 安装libdvbcsa库：svn co svn://svn.videolan.org/libdvbcsa/trunk libdvbcsa或者： 1234567wget http://download.videolan.org/pub/videolan/libdvbcsa/1.1.0/libdvbcsa-1.1.0.tar.gztar -xvf libdvbcsa-1.1.0.tar.gzcd libdvbcsa-1.1.0./bootstrap./configure --prefix=/usrmakemake install mumudvb安装： 1234567git clone git://github.com/braice/MuMuDVB.gitcd MuMuDVBapt-get install autoconfautoreconf -i -f./configure --prefix=/usr --enable-cam-support --enable-scam-supportmakemake install 采集卡安装驱动1.安装驱动及mumudvb所需的包：1apt-get install git subversion make gcc libtool gettext dvb-apps unzip -y 2.驱动安装：首先去tbsdtv官网下载相应的linux版本驱动，网址：http://tbsdtv.com/download现在用到的两款分别为：TBS6985 DVB-S2 Quad Tuner PCIe Card [不用管卡是什么型号]TBS6285 DVB-C Quad Tuner PCIe Card 下载相应驱动,然后执行以下命令(以下载到的驱动文件名为tbs-linux-drivers_v140210.zip为例)：12345678910111213unzip tbs-linux-drivers_v160126.zip -d ./tbs-linux-drivers_v160126cd tbs-linux-drivers_v160126tar xjvf linux-tbs-drivers.tar.bz2cd linux-tbs-driversfind . -type d -exec chmod u+wx '&#123;&#125;' \;find . -name "*.sh" -o -name "*.pl" -exec chmod u+x '&#123;&#125;' \;./v4l/tbs-x86_64.sh#[注：如果是TBS6285 DVBC的卡， 则需要另外执行命令： ./v4l/tbs-dvbc-x86_64.sh]makesudo make install 重启电脑(必须重启驱动才能识别)：shutdown -r now 然后执行：dmesg | grep frontend 如果出现如下打印，则证明安装成功：如果是TBS6985 DVB-S2 Quad Tuner PCIe Card卡:[ 7.561200] DVB: registering adapter 0 frontend 0 (TurboSight TBS 6985 DVBS/S2 frontend)…[ 8.121858] DVB: registering adapter 1 frontend 0 (TurboSight TBS 6985 DVBS/S2 frontend)…如果是TBS6285 DVB-C Quad Tuner PCIe Card卡:[ 10.852763] DVB: registering adapter 0 frontend 0 (TurboSight TBS 62x1 DVBC frontend)…[ 13.178521] DVB: registering adapter 1 frontend 0 (TurboSight TBS 62x1 DVBC frontend)…[注:如果不能看到如上打印, 则可执行以下命令： 123cd /lib/modules/(内核版本)/kernel/drivers/mv media media.bak 本机的内核版本号，可执行命令:uname -r获取，如为: 3.13.0-48-generic, 则执行的语句为：12345cd /lib/modules/3.13.0-48-generic/kernel/drivers/mv media media.bak]]make installshutdown -r now 重新启动之后，再用上面的dmesg | grep frontend命令确认是否有正确的打印信息。 PowerVu安装地址：PowerVu安装.zip 密码：1087。。。 转码服务器搭建显卡GPU驱动简版（自己整理）12345678910111213141516cd /etc/modprobe.d/vim disable-nouveau.confblacklist nouveauoptions nouveau modeset=0dracut --forcecd /rootchmod 0777 ./cuda_7.5.18_linux.runchmod 0777 ./NVIDIA-Linux-x86_64-352.63.runvim /etc/inittab #改5为3reboot./cuda_7.5.18_linux.run #（依赖库包）【当前目录为/root】./NVIDIA-Linux-x86_64-352.63.run #（最后有一个询问是否要安装X界面的，不用的可以不安装） 详细版下载最新的nvidia官网驱动禁用开源nouveau驱动:在/etc/modprobe.d 下创建名为disable-nouveau.conf的文件， 内容为：12blacklist nouveauoptions nouveau modeset=0 ubuntu执行: sudo update-initramfs -u 使其生效。 centos执行: sudo dracut --force 使其生效。 ubuntu配置kernel以text模式启动：修改/etc/default/grub文件：将GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”行改为：GRUB_CMDLINE_LINUX_DEFAULT=”text”将GRUB_CMDLINE_LINUX=””行改为：GRUB_CMDLINE_LINUX=”rdblacklist=nouveau nouveau.modeset=0”执行: sudo update-grub 使其生效 centos配置kernel以text模式启动：修改/etc/inittab 将最后一行“id:5:initdefault:”修改成“id:3:initdefault:”（不包含引号） 重启电脑，在text模式下， 终端中执行安装文件centos:sudo yum install gcc kernel-devel-$(uname -r) kernel-headers-$(uname -r)（在XShell中直接通过chmod 777 将以下两个文件设为最高权限。通过./命令将两个脚本分别执行） 123yum install kernel-devel.x86_64 -ysudo ./cuda_7.5.18_linux.runsudo ./NVIDIA-Linux-x86_64-352.21.run 安装过程中交互的地方一直选择继续(Y)或者默认参数即可. lspci |grep VGA 查看显卡数量 (ubuntu) 安装完成之后还原/etc/default/grub文件中的GRUB_CMDLINE_LINUX_DEFAULT行， 再执行update-grub，使重启后用图形模式进入系统 。 (centos) 安装完成之后修改/etc/inittab 将最后一行“id:3:initdefault:”修改成“id:5:initdefault:”（不包含引号），重启进入图形模式。 检验：nvidia-smi 内核升级和安装OTTLinux内核升级先安装显卡驱动再安装OTT（重要）貌似Linux内核版本要高于3.0才能安装显卡驱动 内核升级：【内核版本 https://www.kernel.org/】参考http://blog.csdn.net/taiyang1987912/article/details/42744019123456789yum install ncurses-devel -yyum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel -ywget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.28.tar.xz tar -xf linux-3.10.28.tar.xzmv linux-3.10.28 /usr/src/cd /usr/src/linux-3.10.28/cp /boot/config-2.6.32-573.el6.x86_64 .configsh -c 'yes "" | make oldconfig'make oldconfig cpu核数 cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l 下面-j后面的48是cpu核数（指定编译核数）1234make -j48 bzImagemake -j48 modulesmake -j48 modules_installmake install vi /etc/grub.conf 【看新安装的内核在第几段，一般是在第一段，从0开始数看title CentOS (3.10.28) 在第一段为default=0，第二段为default=1】例如:1234567891011121314151617#boot=/dev/sdbdefault=0timeout=5splashimage=(hd0,0)/grub/splash.xpm.gzhiddenmenutitle CentOS (3.10.28) root (hd0,0) kernel /vmlinuz-3.10.28 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-3.10.28.imgtitle CentOS (2.6.32-642.3.1.el6.x86_64) root (hd0,0) kernel /vmlinuz-2.6.32-642.3.1.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-2.6.32-642.3.1.el6.x86_64.imgtitle CentOS 6 (2.6.32-573.el6.x86_64) root (hd0,0) kernel /vmlinuz-2.6.32-573.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-2.6.32-573.el6.x86_64.img 改好后1uname -r #查看内核版本 安装OTT123456789101112131415161718cd /opt/rm -rf emailhtml/ nginx/ rh/ starview/cd /opt/upgrade/tar -Pzxvf common_tools.tar.gzcd /opt/starview/tools/install/./install.shcd /opt/starview/cdn/./get_host_infocd /opt/starview/boss/cms/bin/./shutdown.sh./startup.shcd /opt/starview/cdn/hls/bin/./shutdown.sh./startup.shcd /opt/starview/cdn/lts/bin/./shutdown.sh./startup.sh]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>珠海迈科笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rsync]]></title>
    <url>%2Fposts%2F55326%2F</url>
    <content type="text"><![CDATA[搭建同步环境Windows下载链接：服务端：http://ofyfogrgx.bkt.clouddn.com/image/20170318/234212383.exe客户端：http://ofyfogrgx.bkt.clouddn.com/image/20170318/234502534.exe Windows上安装比较简单，直接安装服务端，设置账户密码时不要更改（更改后会认证失败），安装服务端后修改安装目录下的rsyncd.conf文件，增加：12uid = 0gid = 0 安装客户端后要用绝对路径运行，增加了环境变量才能直接运行。 配置参考(配置文件不建议用上面的，在win中会导致各种问题，用默认的即可，排除文件可以参考)：在Windows中配置Rsync同步文件的方法使用cwRsync实现windows下文件定时同步文件同步工具CwRsync的使用方法及常用命令详解 同步代码参数说明12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061-v, --verbose 详细模式输出-q, --quiet 精简输出模式-c, --checksum 打开校验开关，强制对文件传输进行校验-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD-r, --recursive 对子目录以递归模式处理-R, --relative 使用相对路径信息-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。--backup-dir 将备份文件(如~filename)存放在在目录下。-suffix=SUFFIX 定义备份文件前缀-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)-l, --links 保留软链结-L, --copy-links 想对待常规文件一样处理软链结--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结--safe-links 忽略指向SRC路径目录树以外的链结-H, --hard-links 保留硬链结-p, --perms 保持文件权限-o, --owner 保持文件属主信息-g, --group 保持文件属组信息-D, --devices 保持设备文件信息-t, --times 保持文件时间信息-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间-n, --dry-run现实哪些文件将被传输-W, --whole-file 拷贝文件，不进行增量检测-x, --one-file-system 不要跨越文件系统边界-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件--delete 删除那些DST中SRC没有的文件,与服务端保持一致--delete-excluded 同样删除接收端那些被该选项指定排除的文件--delete-after 传输结束以后再删除--ignore-errors 及时出现IO错误也进行删除--max-delete=NUM 最多删除NUM个文件--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输--force 强制删除目录，即使不为空--numeric-ids 不将数字的用户和组ID匹配为用户名和组名--timeout=TIME IP超时时间，单位为秒-I, --ignore-times 不跳过那些有同样的时间和长度的文件--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0-T --temp-dir=DIR 在DIR中创建临时文件--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份-P 等同于 --partial--progress 显示备份过程-z, --compress 对备份的文件在传输时进行压缩处理--exclude=PATTERN 指定排除不需要传输的文件模式--include=PATTERN 指定不排除而需要传输的文件模式--exclude-from=FILE 排除FILE中指定模式的文件--include-from=FILE 不排除FILE指定模式匹配的文件--version 打印版本信息--address 绑定到特定的地址--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件--port=PORT 指定其他的rsync服务端口--blocking-io 对远程shell使用阻塞IO-stats 给出某些文件的传输状态--progress 在传输时现实传输过程--log-format=formAT 指定日志文件格式--password-file=FILE 从FILE中得到密码--bwlimit=KBPS 限制I/O带宽，KBytes per second-h, --help 显示帮助信息 12rsync -auvz --delete SvcCWRSYNC@172.16.16.80::api /cygdrive/c/Projectrsync -auvz --delete SvcCWRSYNC@172.16.16.80::api2 /cygdrive/c/Project/APIS_Mobile]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmd_bat脚本]]></title>
    <url>%2Fposts%2F58627%2F</url>
    <content type="text"><![CDATA[bat_cmd常用命令:: 注释md 创建目录xcopy xcopy要用绝对路径才能在脚本里运行，遇到目录会提示，要指定参数，具体参数看帮助xcopy /?rd /s /q 删除目录如果要删除一个目录下的所有文件，用del命令是无法删除目录的，可以先rd后md。同样移动文件夹时move只能移动文件，而不能移动文件夹；可以先xcopy然后rd。 puase 结尾加上这个，不用goto exit则会等待用户按任意键后才会退出脚本。 关于时间的获取(格式：20170318)：win7中：%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%win_server：%date:~10,4%%date:~4,2%%date:~7,2% 电源管理(具体参数看：shutdown /?)：在5：30分自动关机：at 05:30 shutdown -s -f在XXX分钟后重启：shutdown -r -t 60 forfiles命令（针对文件的操作命令）：/p 指定的路径/s 包括子目录/m 查找的文件名掩码/d 指定日期,有绝对日期和相对日期, 此处-7指当前日期 的7天前/c 运行的命令行 表示为每个文件执行的命令。命令字符串应该用双引号括起来。默认命令是 “cmd /c echo @file”。下列变量可以用在命令字符串中: @file - 返回文件名。 @fname - 返回不带扩展名的文件名。 @ext - 只返回文件的扩展。 @path - 返回文件的完整路径。 @relpath - 返回文件的相对路径。 @isdir - 如果文件类型是目录，返回 “TRUE”；如果是文件，返回 “FALSE”。 @fsize - 以字节为单位返回文件大小。 @fdate - 返回文件上一次修改的日期。 @ftime - 返回文件上一次修改的时间。 示例要列出驱动器 C: 上的所有批处理文件，请键入：1forfiles /p c:/ /s /m*.bat /c"cmd /c echo @file is a batch file" 要列出驱动器 C: 上的所有目录，请键入：1forfiles /p c:/ /s /m*.* /c"cmd /c if @isdir==true echo @file is a directory" 要列出驱动器 C: 上存在时间多于 100 天的所有文件，请键入：1forfiles /p c:/ /s /m*.* /dt-100 /c"cmd /c echo @file :date &gt;= 100 days" 要列出驱动器 C: 上 1993 年 1 月 1 日以前创建的所有文件，而且对于日期早于 1993 年 1 月 1 日的文件显示“file is quite old!”，请键入：1forfiles /p c:/ /s /m*.* /dt-01011993 /c"cmd /c echo @file is quite old!" 要按列格式列出驱动器 C: 上所有文件的扩展名，请键入：1forfiles /p c:/ /s /m*.* /c "cmd /c echo extension of @file is 0x09@ext0x09" With: 要列出驱动器 C: 上的所有批处理文件，请键入：1forfiles /p c:/ /s /m *.bat /c "cmd /c echo @file is a batch file" 要列出驱动器 C: 上的所有目录，请键入：1forfiles /p c:/ /s /m *.* /c "cmd /c if @isdir==true echo @file is a directory" 要列出驱动器 C: 上存在时间多于 100 天的所有文件，请键入：1forfiles /p c:/ /s /m *.* /d t-100 /c "cmd /c echo @file :date &gt;= 100 days" 要列出驱动器 C: 上 1993 年 1 月 1 日以前创建的所有文件，而且对于日期早于 1993 年 1 月 1 日的文件显示“file is quite old!”，请键入：1forfiles /p c:/ /s /m *.* /d t-01011993 /c "cmd /c echo @file is quite old!" 要按列格式列出驱动器 C: 上所有文件的扩展名，请键入：1forfiles /p c:/ /s /m*.* /c "cmd /c echo extension of @file is 0x09@ext0x09" for循环for /?FOR 变量参照的替换已被增强。您现在可以使用下列选项语法: ~I - 删除任何引号(&quot;)，扩充 %I %~fI - 将 %I 扩充到一个完全合格的路径名 %~dI - 仅将 %I 扩充到一个驱动器号 %~pI - 仅将 %I 扩充到一个路径 %~nI - 仅将 %I 扩充到一个文件名 %~xI - 仅将 %I 扩充到一个文件扩展名 %~sI - 扩充的路径只含有短名 %~aI - 将 %I 扩充到文件的文件属性 %~tI - 将 %I 扩充到文件的日期/时间 %~zI - 将 %I 扩充到文件的大小 %~$PATH:I - 查找列在路径环境变量的目录，并将 %I 扩充 到找到的第一个完全合格的名称。如果环境变量名 未被定义，或者没有找到文件，此组合键会扩充到 空字符串 可以组合修饰符来得到多重结果: %~dpI - 仅将 %I 扩充到一个驱动器号和路径 %~nxI - 仅将 %I 扩充到一个文件名和扩展名 %~fsI - 仅将 %I 扩充到一个带有短名的完整路径名 %~dp$PATH:i - 查找列在路径环境变量的目录，并将 %I 扩充 到找到的第一个驱动器号和路径。 %~ftzaI - 将 %I 扩充到类似输出线路的 DIR 删除D:\Logs下的空目录1for /f "delims=" %%a in ('dir D:\Logs /b /ad /s ^|sort /r' ) do rd /q "%%a" 2&gt;nul 示例脚本1这个脚本是复制备份文件到指定目录（目录以20170318这种格式创建），并递归查找7天以上的旧内容并删除。123456789101112131415161718192021@echo offecho ----------------------------------------------------------- &gt;&gt;SQL_bat.logecho SQL Databases backup start %Date% - %time% &gt;&gt;SQL_bat.log::set yymmdd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%set yymmdd=%date:~10,4%%date:~4,2%%date:~7,2%md F:\DB_Buckup\%yymmdd%C:\Windows\System32\xcopy.exe C:\DBBackUp_Plan\* F:\DB_Buckup\%yymmdd% /s /eC:\Windows\System32\xcopy.exe /e /i C:\DBBackUp_Plan\* F:\DB_Buckup\%yymmdd%rd /s /q C:\DBBackUp_Plan::下面这段是搜索7天以上旧内容并删除set file_dir="F:\DB_Buckup"set bak_dat=7forfiles /p %file_dir% /S /M *.* /D -%bak_dat% /C "cmd /c echo del@relpath file… &amp; echo. &amp; del /s /q @file" &gt;&gt;SQL_bat.logecho SQL Databases backup stop %Date% - %time% &gt;&gt;SQL_bat.logecho ----------------------------------------------------------- &gt;&gt;SQL_bat.loggoto exit:exit 功能实现远程执行程序、脚本下载PsExec：https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx下载页面有相关的使用说明解压文件后把psexec放到你需要的位置，如果没有添加环境变量就要用绝对路径去执行。目标主机的防火墙要开135,139这两个端口。 常见用法语法：psexec 远程主机名/IP -u 用户名 -p 密码 [参数] [被执行的程序]只在局域网内应用成功，外网没有测试过，用IP可能会连接不了远程主机，可能是防火墙的问题，可以改用主机名，在cmd里输入hostname查看主机名。 12psexec \\hostname -u Administrator -p mypassword -i "D:\123.bat"psexec \\hostname -u Administrator -p mypassword -c "D:\123.bat" 参数：-i 是执行远程相应位置的脚本。-c 是复制本地脚本到远程执行。 参考：http://blog.csdn.net/miss_easy/article/details/47780797http://blog.sina.com.cn/s/blog_4e46983d0101ovkw.html 备份数据库备份SqlServer数据库：SqlServer备份数据库的4种方式介绍]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>bat脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ]]></title>
    <url>%2Fposts%2F33708%2F</url>
    <content type="text"><![CDATA[安装Centos安装RabbitMQ还比较繁琐，目前先这样，之后有时间再做改动。如果报缺少某些库，看最底下，初始环境不同。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#安装依赖包和环境yum -y install unixODBC unixODBC-devel java libxslt xmlto#安装Make（版本4以上）http://ftp.gnu.org/gnu/make/make-4.2.tar.gz 4以上tar -zxvf make-4.2.tar.gzcd make-4.2./configuremakemake installmv /usr/bin/make /usr/bin/make.bakvim /etc/profileexport PATH=$PATH:/usr/local/bin/makesource /etc/profile############################################################################################安装simplejsonyum install ptyhon -ywget https://pypi.python.org/packages/40/ad/52c1f3a562df3b210e8f165e1aa243a178c454ead65476a39fa3ce1847b6/simplejson-3.10.0.tar.gz#md5=426a9631d22851a7a970b1a677368b15tar zxvf simplejson-3.10.0.tar.gzcd simplejson-3.10.0python setup.py buildpython setup.py install############################################################################################安装erlangwget http://www.erlang.org/download/otp_src_19.2.tar.gztar -zxvf otp_src_19.2.tar.gzcd otp_src_19.2./configure --without-javacmakemake install############################################################################################安装rabbitmqwget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6.tar.xztar -vxf rabbitmq-server-3.6.6.tar.xzcd rabbitmq-server-3.6.6/usr/local/bin/make TARGET_DIR=/usr/local/rabbitmq SBIN_DIR=/usr/local/rabbitmq/sbin MAN_DIR=/usr/local/rabbitmq/man DOC_INSTALL_DIR=/usr/local/rabbitmq/doc install#配置mkdir /etc/rabbitmqcp ./deps/rabbit/docs/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config#启动插件/usr/local/lib/erlang/lib/rabbitmq_server-0.0.0/sbin/rabbitmq-plugins enable rabbitmq_management/usr/local/lib/erlang/lib/rabbitmq_server-0.0.0/sbin/rabbitmq-plugins enable rabbitmq_mqtt#启动/usr/local/lib/erlang/lib/rabbitmq_server-0.0.0/sbin/rabbitmq-server &amp;#放行端口vim /etc/sysconfig/iptables-A INPUT -m state --state NEW -m tcp -p tcp --dport 15672 -j ACCEPT#浏览器打开http://localhost:15672 guest guest########################################################################################### 安装elixir环境的简单方法https://segmentfault.com/a/1190000000741218https://github.com/elixir-lang/elixir/archive/v1.4.2.tar.gz 配置参考：http://blog.csdn.net/historyasamirror/article/details/6827870http://blog.csdn.net/feng4656/article/details/17371005]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2Fposts%2F27273%2F</url>
    <content type="text"><![CDATA[安装Centos要有基本编译环境。12345678yum install tcl gcc -ywget http://download.redis.io/releases/redis-2.8.9.tar.gztar xzf redis-2.8.9.tar.gzcd redis-2.8.9makemake testmake install 测试通过后安装，安装后会自动把redis-server,redis-cli,redis-benchmark,redis-check-aof,redis-check-dump复制到/usr/local/bin目录下。 编辑redis.conf文件,vim redis.conf修改daemonize no改成yes。 复制redis.conf到/etc目录下cp redis.conf /etc 编辑服务管理文件vim /etc/init.d/redis 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051############################chkconfig: 2345 10 90#description: Start and Stop redisPATH=/usr/local/bin:/sbin:/usr/bin:/bin REDISPORT=6379EXEC=/usr/local/bin/redis-serverREDIS_CLI=/usr/local/bin/redis-cli PIDFILE=/var/run/redis.pidCONF="/etc/redis.conf" case "$1" in start) if [ -f $PIDFILE ] then echo "$PIDFILE exists, process is already running or crashed" else echo "Starting Redis server..." $EXEC $CONF fi if [ "$?"="0" ] then echo "Redis is running..." fi ;; stop) if [ ! -f $PIDFILE ] then echo "$PIDFILE does not exist, process is not running" else PID=$(cat $PIDFILE) echo "Stopping ..." $REDIS_CLI -p $REDISPORT SHUTDOWN while [ -x $&#123;PIDFILE&#125; ] do echo "Waiting for Redis to shutdown ..." sleep 1 done echo "Redis stopped" fi ;; restart|force-reload) $&#123;0&#125; stop $&#123;0&#125; start ;; *) echo "Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;" &gt;&amp;2 exit 1esac############################## 1234567891011121314#修改权限chmod +x /etc/init.d/redis#设置开机自动启动服务chkconfig redis on #启动服务：service redis start#停止服务：service redis stop#检查Redis是否正在工作redis-cli 配置防火墙打开对应的端口：vi /etc/sysconfig/iptables-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT 重启防火墙service iptables restart Ubuntu12345apt-get update apt-get install redis-server#检查Redis是否正在工作redis-cli Redis常用命令参考：http://www.centoscn.com/image-text/config/2015/0728/5928.htmlhttp://doc.redisfans.com/ Redis快速入门http://www.yiibai.com/redis/redis_quick_guide.html]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx]]></title>
    <url>%2Fposts%2F9355%2F</url>
    <content type="text"><![CDATA[Nginx安装参考：https://wizardforcel.gitbooks.io/nginx-doc/content/Text/1.3_install.htmlhttps://wizardforcel.gitbooks.io/nginx-doc/content/Text/6.html Nginx负载均衡Nginx负载均衡适用于小规模的集群，负载均衡的本质是所有客户端都从服务器A入口，最后被分流到B,C,D,E…服务器，出口也是经过服务器A，这样在同一个机房内只需要一个公网IP即可实现分流，但服务器A的压力及带宽是关键部分。（对于大集群可以用DNS分流） Nginx反向代理Nginx反向代理是所有客户端都从服务器A入口，最后被分流到B,C,D,E…服务器，之后的连接是和各自的B,C,D,E…服务器的连接，这样每台服务器都要有公网IP可跨机房，也减少了服务器A的压力。 参数upstream模块常用参数1、轮询（默认）每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。2、weight指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。3、ip_hash每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。4、fair（第三方）按后端服务器的响应时间来分配请求，响应时间短的优先分配。5、url_hash（第三方）按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 server 192.168.0.100:80 负载均衡后端RealServer的IP或者域名，端口不写的话默认为80。高并发场景用域名，再通过DNS进行负载均衡 weight=5 权重，默认为1，权重越大接收的请求越多 max_fails=2 失败超过指定次数会暂停或请求转往其它服务器（最大尝试的失败次数），默认为1,0表示禁止失败尝试 fail_timeout=10s 失败超过指定次数后暂停时间，失败超时时间，默认是10秒，通常3s左右比较合适 backup 热备配置，前段RealServer出现问题后会自动上线backup服务器，其它服务器超时或down时才会请求backup服务器 down 标志服务器不可用（负载过重或者不参与负载），这个参数通常配合IP_HASH使用 例：123456789101112131415161718192021222324252627282930313233343536373839http &#123; upstream www.test1.com &#123; ip_hash; server 172.16.125.76:8066 weight=10; server 172.16.125.76:8077 down; server 172.16.0.18:8066 max_fails=3 fail_timeout=30s; server 172.16.0.18:8077 backup; &#125; upstream www.test2.com &#123; server 172.16.0.21:8066; server 192.168.76.98:8066; &#125; server &#123; listen 80; server_name www.test1.com; location /&#123; proxy_pass http://www.test1.com; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; &#125; server &#123; listen 80; server_name www.test2.com; location /&#123; proxy_pass http://www.test2.com; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; 配置部分一般Nginx的配置文件会分成两部分，这样方便管理。全局配置：/etc/nginx/nginx.confServer配置：/etc/nginx/conf.d/default.conf 简单的Nginx负载均衡和反向代理： 12345678910111213141516171819upstream linuxleolan&#123;#server后用ip,不要用localhost和127.0.0.1，这两个地址测试不了。 server 123.207.92.209; server 123.207.92.245;&#125;server &#123; listen 80; server_name localhost; #localhost或www.xxx.com(域名指向此服务器) location / &#123; proxy_pass http://linuxidcleolan; #调用upstream里设定的变量 proxy_buffering off; #缓存开关 #以下三行是获得前端IP，反向代理设置。 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#125; 参考资料：http://www.ilanni.com/?p=7631http://www.cnblogs.com/jacktang/p/3669115.htmlhttp://www.linuxidc.com/Linux/2016-04/130350.htmhttp://www.cnblogs.com/mecity/archive/2011/06/20/2085529.htmlhttps://wizardforcel.gitbooks.io/nginx-doc/content/Text/7.4_loadbalance.html]]></content>
      <categories>
        <category>web服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel表格合并]]></title>
    <url>%2Fposts%2F48831%2F</url>
    <content type="text"><![CDATA[（先看我）宏处理步骤把多个要合并的excel表都放在同一个文件夹里面，并在这个文件夹里面新建一个excel。 打开新建的excel表，并右键单击sheet1，找到“查看代码”，单击进去。进去之后就看到了宏计算界面。 然后我们把下面这些宏计算的代码复制进去，然后找到工具栏上面的“运行”下的“运行子过程/用户窗体”就可以执行代码了。 合并多个表格（表格内的Sheet会自动拆分新建sheet）到1个表格的多个Sheet中Excel会复制工作表的名称并自动根据检测结果附加(2)、(3)等数字编号。工作簿中与其他工作表相关的任何公式也会自动更新的新的名称。 宏合并代码：123456789101112131415161718192021222324252627Sub CombineWorkbooks() Dim FilesToOpen Dim x As Integer On Error GoTo ErrHandler Application.ScreenUpdating = False FilesToOpen = Application.GetOpenFilename(FileFilter: = "MicroSoft Excel文件(*.xls),*.xls",MultiSelect: = True,Title: = "要合并的文件") If TypeName(FilesToOpen) = "Boolean" then MsgBox "没有选中文件" Goto ExitHandler end if x = 1 While x &lt;= UBound(filestoopen) Workbooks.Open fileName: = filestoopen(x) Sheets().Move After: = ThisWorkbook.Sheets (ThisWorkbook.Sheets.Count) x = x + 1 WendExitHandler: Application.ScreenUpdating = True Exit SubErrHandler: MsgBox Err.Description Resume ExitHandlerEnd Sub 运行后弹出选择表格的窗口，选个要合并的表格就能合并了，再删除第一个空的Sheet表，保存选择“是”（不启用宏，不保存宏信息） 合并多个表格（表格内的多个Sheet也会合并在同一个Sheet中）到1个表格的1个Sheet中宏合并代码：123456789101112131415161718192021222324252627282930Sub 合并当前目录下所有工作簿的全部工作表()Dim MyPath, MyName, AWbNameDim Wb As Workbook, WbN As StringDim G As LongDim Num As LongDim BOX As StringApplication.ScreenUpdating = FalseMyPath = ActiveWorkbook.PathMyName = Dir(MyPath &amp; "\" &amp; "*.xls")AWbName = ActiveWorkbook.NameNum = 0Do While MyName &lt;&gt; ""If MyName &lt;&gt; AWbName ThenSet Wb = Workbooks.Open(MyPath &amp; "\" &amp; MyName)Num = Num + 1With Workbooks(1).ActiveSheet.Cells(.Range("B65536").End(xlUp).Row + 2, 1) = Left(MyName, Len(MyName) - 4)For G = 1 To Sheets.CountWb.Sheets(G).UsedRange.Copy .Cells(.Range("B65536").End(xlUp).Row + 1, 1)NextWbN = WbN &amp; Chr(13) &amp; Wb.NameWb.Close FalseEnd WithEnd IfMyName = DirLoopRange("B1").SelectApplication.ScreenUpdating = TrueMsgBox "共合并了" &amp; Num &amp; "个工作薄下的全部工作表。如下：" &amp; Chr(13) &amp; WbN, vbInformation, "提示"End Sub 合并单个表格内的多个Sheet到本表格的1个新Sheet中宏合并代码：123456789101112Sub 合并当前工作簿下的所有工作表()Application.ScreenUpdating = FalseFor j = 1 To Sheets.Count If Sheets(j).Name &lt;&gt; ActiveSheet.Name Then X = Range("A65536").End(xlUp).Row + 1 Sheets(j).UsedRange.Copy Cells(X, 1) End IfNextRange("B1").SelectApplication.ScreenUpdating = TrueMsgBox "当前工作簿下的全部工作表已经合并完毕！", vbInformation, "提示"End Sub]]></content>
      <categories>
        <category>办公软件</category>
      </categories>
      <tags>
        <tag>Excel表格合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fail2ban 防爆力破解]]></title>
    <url>%2Fposts%2F32284%2F</url>
    <content type="text"><![CDATA[fail2ban 是 Linux 上的一个著名的入侵保护的开源框架，它会监控多个系统的日志文件（例如：/var/log/auth.log 或者 /var/log/secure）并根据检测到的任何可疑的行为自动触发不同的防御动作。事实上，fail2ban 在防御对SSH服务器的暴力密码破解上非常有用。同时也能用于ftp防暴力破解。 官网：http://www.fail2ban.org 安装Fail2banCentOS 或 RHEL上安装fail2ban,首先设置EPEL仓库，然后运行以下命令。sudo yum install fail2ban -y 在ubuntu，Debian 或 Linux Mint上安装fail2ban：sudo apt-get install fail2ban -y 配置Fail2ban需要编辑其配置文件 /etc/fail2ban/jail.conf。 在配置文件的“[DEFAULT]”区，你可以在此定义所有受监控的服务的默认参数，另外在特定服务的配置部分，你可以为每个服务（例如SSH，Apache等）设置特定的配置来覆盖默认的参数配置。 在针对服务的监狱区（在[DEFAULT]区后面的地方），你需要定义一个[ssh-iptables]区，这里用来定义SSH相关的监狱配置。真正的禁止IP地址的操作是通过iptables完成的。 下面是一个包含“ssh-iptables”监狱配置的/etc/fail2ban/jail.conf的文件样例。当然根据你的需要，你也可以指定其他的应用监狱。1vi /etc/fail2ban/jail.conf 12345678910111213141516171819202122[DEFAULT]bantime = 86400 # 客户端主机被禁止的时长（秒）maxretry = 5 # 客户端主机被禁止前允许失败的次数 findtime = 600 # 查找失败次数的时长（秒）ignoreip = 127.0.0.1 172.31.0.0/24 10.10.0.0/24 192.168.0.0/24# 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名# 用于指定哪些地址可以忽略 fail2ban 防御mta = sendmail # 邮件通知[ssh-iptables]enabled = truefilter = sshdaction = iptables[name=SSH, port=ssh, protocol=tcp]sendmail-whois[name=SSH, dest=your@email.com, sender=fail2ban@email.com]logpath = /var/log/auth.log # Debian 系的发行版 logpath = /var/log/secure # Red Hat 系的发行版maxretry = 3 # ssh 服务的最大尝试次数 根据上述配置，fail2ban会自动禁止在最近10分钟内有超过3次访问尝试失败的任意IP地址。一旦被禁，这个IP地址将会在24小时内一直被禁止访问 SSH 服务。这个事件也会通过sendemail发送邮件通知。 一旦配置文件准备就绪，按照以下方式重启fail2ban服务。 在 Debian, Ubuntu 或 CentOS/RHEL 6:1service fail2ban restart 在 Fedora 或 CentOS/RHEL 7:1systemctl restart fail2ban 验证fail2ban成功运行，使用参数’ping’来运行fail2ban-client 命令。 如果fail2ban服务正常运行，你可以看到“pong（嘭）”作为响应。123fail2ban-client ping提示Server replied: pong 测试 fail2ban测试fail2ban是否能正常工作，尝试通过使用错误的密码来用SSH连接到服务器模拟一个暴力破解攻击。与此同时，监控 /var/log/fail2ban.log，该文件记录在fail2ban中发生的任何敏感事件。12sudo tail -f /var/log/fail2ban.log#具体日志的位置要看配置文件定义 检查状态、解禁IP地址由于fail2ban的“ssh-iptables”监狱使用iptables来阻塞问题IP地址，你可以通过以下方式来检测当前iptables来验证禁止规则。1iptables --list -n 1234567891011121314Chain INPUT (policy ACCEPT)target prot opt source destinationfail2ban-SSH tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22 Chain FORWARD (policy ACCEPT)target prot opt source destination Chain OUTPUT (policy ACCEPT)target prot opt source destination Chain fail2ban-SSH (1 references)target prot opt source destinationDROP all -- 192.168.1.8 0.0.0.0/0RETURN all -- 0.0.0.0/0 0.0.0.0/0 想要从fail2ban中解锁某个IP地址，你可以使用iptables命令：1iptables -D fail2ban-SSH -s 192.168.1.8 -j DROP 可以使用上述的iptables命令手动地检验和管理fail2ban的IP阻塞列表，但实际上有一个适当的方法就是使用fail2ban-client命令行工具。这个命令不仅允许你对”ssh-iptables”监狱进行管理，同时也是一个标准的命令行接口，可以管理其他类型的fail2ban监狱。 为了检验fail2ban状态（会显示出当前活动的监狱列表）：1fail2ban-client status 为了检验一个特定监狱的状态（例如ssh-iptables):1fail2ban-client status ssh-iptables 解锁特定的IP地址：1fail2ban-client set ssh-iptables unbanip 192.168.xxx.xxx 注意:如果你停止了Fail2ban 服务，那么所有的IP地址都会被解锁。当你重启 Fail2ban，它会从/etc/log/secure(或 /var/log/auth.log)中找到异常的IP地址列表，如果这些异常地址的发生时间仍然在禁止时间内，那么Fail2ban会重新将这些IP地址禁止。 Fail2ban 自动启动成功地测试了fail2ban之后，最后一个步骤就是在你的服务器上让其在开机时自动启动。在基于Debian的发行版中，fail2ban已经默认让自动启动生效。在基于Red-Hat的发行版中，按照下面的方式让自动启动生效。 在 CentOS/RHEL 6中:chkconfig fail2ban on在 Fedora 或 CentOS/RHEL 7:systemctl enable fail2ban 原文：https://linux.cn/article-5067-1.html]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>fail2ban 防爆力破解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RAID]]></title>
    <url>%2Fposts%2F3959%2F</url>
    <content type="text"><![CDATA[RAID简介RAID 的意思是廉价磁盘冗余阵列（Redundant Array of Inexpensive Disks），但现在它被称为独立磁盘冗余阵列（Redundant Array of Independent Drives）。早先一个容量很小的磁盘都是非常昂贵的，但是现在我们可以很便宜的买到一个更大的磁盘。Raid 是一系列放在一起，成为一个逻辑卷的磁盘集合。 RAID 包含一组或者一个集合甚至一个阵列。使用一组磁盘结合驱动器组成 RAID 阵列或 RAID 集。将至少两个磁盘连接到一个 RAID 控制器，而成为一个逻辑卷，也可以将多个驱动器放在一个组中。一组磁盘只能使用一个 RAID 级别。使用 RAID 可以提高服务器的性能。不同 RAID 的级别，性能会有所不同。它通过容错和高可用性来保存我们的数据。 软件 RAID 和硬件 RAID 软件 RAID 的性能较低，因为其使用主机的资源。 需要加载 RAID 软件以从软件 RAID 卷中读取数据。在加载 RAID 软件前，操作系统需要引导起来才能加载 RAID 软件。在软件 RAID 中无需物理硬件。零成本投资。 硬件 RAID 的性能较高。他们采用 PCI Express 卡物理地提供有专用的 RAID 控制器。它不会使用主机资源。他们有 NVRAM 用于缓存的读取和写入。缓存用于 RAID 重建时，即使出现电源故障，它会使用后备的电池电源保持缓存。对于大规模使用是非常昂贵的投资。 硬件 RAID 卡如下所示： RAID级别重要的 RAID 概念 校验方式：用在 RAID 重建中从校验所保存的信息中重新生成丢失的内容。 RAID 5，RAID 6 基于校验。 条带化：是将切片数据随机存储到多个磁盘。它不会在单个磁盘中保存完整的数据。如果我们使用2个磁盘，则每个磁盘存储我们的一半数据。 镜像：被用于 RAID 1 和 RAID 10。镜像会自动备份数据。在 RAID 1 中，它会保存相同的内容到其他盘上。 热备份：只是我们的服务器上的一个备用驱动器，它可以自动更换发生故障的驱动器。在我们的阵列中，如果任何一个驱动器损坏，热备份驱动器会自动用于重建 RAID。 块：是 RAID 控制器每次读写数据时的最小单位，最小 4KB。通过定义块大小，我们可以增加 I/O 性能。 RAID有不同的级别。在这里列出在真实环境下的使用最多的 RAID 级别。其他级别的阵列参考：磁盘阵列 RAID0 = 条带化 提高读写性能RAID1 = 镜像 提高读写性能、冗余性RAID5 = 单磁盘分布式奇偶校验 提高读写性能、冗余性(允许1块硬盘发生故障)RAID6 = 双磁盘分布式奇偶校验 提高读写性能、冗余性(运行2块硬盘发生故障)RAID10 = 镜像 + 条带。（嵌套RAID）RAID 在大多数 Linux 发行版上使用名为 mdadm 的软件包进行管理。 RAID 0 条带化 高性能。 RAID 0 中容量零损失。 零容错。 写和读有很高的性能。 最少两块硬盘 条带化有很好的性能。在 RAID 0（条带化）中数据将使用切片的方式被写入到磁盘。一半的内容放在一个磁盘上，另一半内容将被写入到另一个磁盘。 假设我们有2个磁盘驱动器，每次写入数据都是分两半写入两个磁盘的注：实际上不可能按字节切片，是按数据块切片的。 在这种情况下，如果驱动器中的任何一个发生故障，就会丢失数据，因为一个盘中只有一半的数据，不能用于重建 RAID。不过，当比较写入速度和性能时，RAID 0 是非常好的。创建 RAID 0（条带化）至少需要2个磁盘。如果你的数据是非常宝贵的，那么不要使用此 RAID 级别。 RAID 1 镜像化 良好的性能。 总容量丢失一半可用空间。 完全容错。 重建会更快。 写性能变慢。 读性能变好。 能用于操作系统和小规模的数据库。 最少两块硬盘 镜像也有不错的性能。镜像可以对我们的数据做一份相同的副本。假设我们有两个2TB的硬盘驱动器，我们总共有4TB，但在镜像中，但是放在 RAID 控制器后面的驱动器形成了一个逻辑驱动器，我们只能看到这个逻辑驱动器有2TB。 当我们保存数据时，它将同时写入这两个2TB驱动器中。创建 RAID 1（镜像化）最少需要两个驱动器。如果发生磁盘故障，我们可以通过更换一个新的磁盘恢复 RAID 。如果在 RAID 1 中任何一个磁盘发生故障，我们可以从另一个磁盘中获取相同的数据，因为另外的磁盘中也有相同的数据。所以是零数据丢失。 RAID 5 分布式奇偶校验 性能卓越 读速度将非常好。 写速度处于平均水准，如果我们不使用硬件 RAID 控制器，写速度缓慢。 从所有驱动器的奇偶校验信息中重建。 完全容错。 1个磁盘空间将用于奇偶校验。 可以被用在文件服务器，Web服务器，非常重要的备份中。 最少三块硬盘 RAID 5 多用于企业级。 RAID 5 的以分布式奇偶校验的方式工作。奇偶校验信息将被用于重建数据。它从剩下的正常驱动器上的信息来重建。在驱动器发生故障时，这可以保护我们的数据。 假设我们有4个驱动器，如果一个驱动器发生故障而后我们更换发生故障的驱动器后，我们可以从奇偶校验中重建数据到更换的驱动器上。奇偶校验信息存储在所有的4个驱动器上，如果我们有4个 1TB 的驱动器。奇偶校验信息将被存储在每个驱动器的256G中，而其它768GB是用户自己使用的。单个驱动器故障后，RAID 5 依旧正常工作，如果驱动器损坏个数超过1个会导致数据的丢失。 RAID 6 双分布式奇偶校验磁盘 性能不佳。 读的性能很好。 如果我们不使用硬件 RAID 控制器写的性能会很差。 从两个奇偶校验驱动器上重建。 完全容错。 2个磁盘空间将用于奇偶校验。 可用于大型阵列。 用于备份和视频流中，用于大规模。 最少四块硬盘 RAID 6 和 RAID 5 相似但它有两个分布式奇偶校验。大多用在大数量的阵列中。我们最少需要4个驱动器，即使有2个驱动器发生故障，我们依然可以更换新的驱动器后重建数据。 它比 RAID 5 慢，因为它将数据同时写到4个驱动器上。当我们使用硬件 RAID 控制器时速度就处于平均水准。如果我们有6个的1TB驱动器，4个驱动器将用于数据保存，2个驱动器将用于校验。 RAID 10 镜像+条带 良好的读写性能。 总容量一半用于容错。 从副本数据中快速重建。 由于其高性能和高可用性，常被用于数据库的存储中。 最少四块硬盘 RAID 10 可以被称为1 + 0或0 +1。它将做镜像+条带两个工作。在 RAID 10 中首先做镜像然后做条带。在 RAID 01 上首先做条带，然后做镜像。RAID 10 比 01 好。 假设，我们有4个驱动器。当我逻辑卷上写数据时，它会使用镜像和条带的方式将数据保存到4个驱动器上。 如果我在 RAID 10 上写入数据“TECMINT”，数据将使用如下方式保存。首先将“T”同时写入两个磁盘，“E”也将同时写入另外两个磁盘，所有数据都写入两块磁盘。这样可以将每个数据复制到另外的磁盘。 同时它将使用 RAID 0 方式写入数据，遵循将“T”写入第一组盘，“E”写入第二组盘。再次将“C”写入第一组盘，“M”到第二组盘。 RAID 容量计算器这里引用了群晖官方的RAID计算器。 RAID 容量计算器 管理RAID mdadm安装mdadmLinux系统基本都带有 mdadm 软件包。没有的话先安装12yum install mdadm -yapt-get install mdadm 下面盗几张图，自己没有截图啦。 新建分区创建RAID0 需要两块硬盘，拿/dev/sdb 和/dev/sdc 来实验。1fdisk /dev/sdb #对sdb 进行分区 输入”m”, 获取帮助，输入”p”, 查看分区前磁盘状态。输入”n” 新建分区，将整个磁盘都划分成一个分区，然后输入”p” 查看分区情况。 修改分区类型默认新建分区的类型是Linux，代号83，需要将其修改为raid 类型。输入”t” ，然后输入”L” 列出所有的文件格式，这里我们选择”fd Linux raid auto”, 输入”fd”，然后再输入”p” 查看分区情况，分区格式已经变成了Linux raid autodetect。输入”w” 保存分区。使用同样方法对/dev/sdc 进行分区操作。 同步分区情况使用partprobe 命令同步分区情况。 查看现在的状态fdisk -l /dev/sdb /dev/sdc 用sdb和sdc创建RAID 0：123mdadm -C /dev/md0 -a yes -l 0 -n 2 /dev/sdb /dev sdc或mdadm -C /dev/md0 -ayes -l0 -n2 /dev/sd[b,c]1 选项 说明 -C，--create 创建阵列 -a，--auto 同意创建设备，如不加此参数时必须先使用mknod 命令来创建一个RAID设备，不过推荐使用-a yes参数一次性创建 -l，--level 阵列模式，支持的阵列模式有 linear, raid0, raid1, raid4, raid5, raid6, raid10, multipath, faulty, container -n，--raid-devices 阵列中活动磁盘的数目，该数目加上备用磁盘的数目应该等于阵列中总的磁盘数目 /dev/md0 阵列的设备名称 /dev/sd{b,c}1 参与创建阵列的磁盘名称 创建RAID 配置文件/etc/mdadm.confRAID 的配置文件为/etc/mdadm.conf，默认是不存在的，需要手工创建。 该配置文件的主要作用是系统启动的时候能够自动加载软RAID，同时也方便日后管理。但不是必须的，推荐对该文件进行配置。 我们这里需要创建这个文件，测试中发现，如果没有这个文件，则reboot 后，已经创建好的md0 会自动变成md127。 /etc/mdadm.conf 文件内容包括：由DEVICE 选项指定用于软RAID的所有设备。ARRAY 选项所指定阵列的设备名、RAID级别、阵列中活动设备的数目以及设备的UUID号。 创建/etc/mdadm.conf12echo DEVICE /dev/sd&#123;b,c&#125;1 &gt;&gt; /etc/mdadm.confmdadm –Ds &gt;&gt; /etc/mdadm.conf 修改配置文件当前生成的/etc/mdadm.conf 文件内容并不符合所规定的格式，所以也是不生效的，这时需要手工修改该文件内容为如下格式：12345# cat /etc/mdadm.confDEVICE /dev/sdb1 /dev/sdc1ARRAY /dev/md0 level=raid0 num-devices=2 UUID=5160ea40:cb2b44f1:c650d2ef:0db09fd0 格式化磁盘阵列1mkfs.ext4 /dev/md0 建立挂载点并挂载12mkdir /raid0mount /dev/md0 /raid0/ 写入/etc/fstab为了下次开机还能正常使用我们的RAID设备，需要将挂载的信息写入/etc/fstab 文件中。然后reboot 测试开机是否自动挂载，raid0 创建完毕。 参考资料：http://www.centoscn.com/image-text/config/2015/0213/4713.htmlhttp://www.cnblogs.com/mchina/p/linux-centos-disk-array-software_raid.html]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>RAID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Btrfs文件系统]]></title>
    <url>%2Fposts%2F9108%2F</url>
    <content type="text"><![CDATA[Btrfs简介Btrfs 是一个 Linux 中的新的写时复制(copy-on-write (COW))的文件系统，目的是实现高级功能的同时着重与容错功能，修复功能以及易于管理。 Btrfs核心特性：多物理卷支持：btrfs可由多个底层物理卷组成；支持RAID，以联机“添加”、“移除”、“修改”； 写时复制更新机制(CoW)：复制、更新及替换指针，而非“就地”更新；在文件进行修改的时候，首先将文件复制一份出来，在复制出来的文件上进行修改，修改完成之后，将指向原有文件的指针修改指向到修改完成的文件上，若修改完成的文件出现了错误，则我们可以通过原文件进行修复 数据及元数据校验码：checksum ,当存储某个文件时，checksum会将数据的源数据和数据的校验码，分别通过文件的属性扩展进行保存，当我们再次读取数据时可以方便的检测数据是否受损，如果文件受损系统可以完成自动修复； 子卷：sub_volume，在一个卷上创建多个子卷，在每一个子卷上创建文件系统，并挂载使用； 快照：支持快照的快照；因此可以实现类似增量快照的机制 透明压缩 ：如果我们在存储文件时，进行压缩存储，那么在文件发往btrfs时，会自动的占用时钟周期，完成数据的压缩存放，而用户并不知道，在用户读取文件时，会自动的进行文件的解压缩，可以实现节约磁盘空间。但是压缩和解压缩会占用时钟周期； Btrfs确实比ext4多了很多功能，快照功能更是很有使用价值，管理也比ext格式要方便一些。 创建Btrfs文件系统mkfs.btrfs -L ‘LABEL’：指定文件系统的卷标； -d [type]: raid0, raid1, raid5, raid6, raid10, single 指明数据的存放方式，支持RAID机制； -m [profile]：raid0, raid1, raid5, raid6, raid10, single, dup 指明元数据的存放方式，是否可跨越多个物理卷，支持RAID机制； -O [feature]：在格式化文件系统的时候，是否直接开启文件系统的某些特性； -O list-all：列出支持的所有特性； 1fdisk -l 拿这个20G的盘开刀。12345mkfs.btrfs -L my20G_date /dev/sdae #创建btrfs 文件系统#也可以多块硬盘mkfs.btrfs -L my20G_date /dev/sdae /dev/sdc 这样就把两块硬盘合并起来管理。blkid /dev/sdae #查看设备sdae的属性,可以看到TYPE="btrfs"btrfs filesystem show #查看系统上的所有btrfs文件系统 123456mkdir /my20G #创建挂载目录mount /dev/sdae /my20G/ #挂载 mount | grep /my20G #已挂载成功df -h#man btrfs filesystem 可用来查看命令帮助文档 调整btrfs文件系统大小(逻辑边界)btrfs调整大小只要一条命令就行，几乎是瞬间完成的。命令格式：btrfs filesystem resize &lt;size(单位G,K,M)&gt;或者max &lt;path&gt;1234567btrfs filesystem resize -10G /my20G #将分区缩小10G，单位可以是M，K。df -h #可以看到已经缩小了10G了btrfs filesystem resize +5000M /my20G #将分区扩大5000M，单位可以是M，K。df -h #可以看到已经增加了近5G空间btrfs filesystem resize max /my20G #max，将文件系统大小调整至其物理边界，可用最大的存储空间。 调整btrfs物理边界大小物理边界就属于硬件范畴了，增加或去掉硬盘。命令格式：btrfs device &lt;add/delete/scan&gt; &lt;dev&gt; &lt;mount_point&gt;12btrfs device add /dev/sdd /my20G #为btrfs文件系统，增加一块硬盘sdddf -lh #完成后，容量已经扩充了 透明压缩只需在挂载时候，使用-o 并指定压缩方式即可，对用户是透明的，可以选择lzo或zlib两种压缩方式命令格式：mount -o compress={lzo|zlib} DEVICE MOUNT_POINT12mount -o compress=lzo /dev/sdae /my20Gmount -o compress=zlib /dev/sdae /my20G btrfs文件均衡命令格式：btrfs balance start [OPTIONS] &lt;FILTERS&gt; MOUNT_POINT常用选项有： -d: 指定数据的组织机制 -s：指定元数据的组织机制 -m：指定文件系统的组织机制 12345btrfs device add /dev/sdd /my20G #为btrfs文件系统，增加一块硬盘sddbtrfs filesystem show #查看btrf文件系统信息btrfs balance start /my20G #均衡文件btrfs balance start -mconvert=raid5 /my20G #均衡文件，并使用raid5(最少3块硬盘)组织文件系统，RAID模式还要注意每块硬盘的容量大小。 删除btrfs的物理卷如果只有一个硬盘的话是无法删除的。123btrfs device delete /dev/sdd /my20G #将sdd设备移除df -lh /my20G #容量减少了btrfs filesystem show /my20G #sdd被删掉了 ext文件系统和btrfs文件系统互转命令格式：btrfs-convert [-r] Device-r：从btrfs回滚到之前的文件系统,不使用-r 代表从普通文件系统，转化成btrfs文件系统先说说硬盘拆分，架设现在用了3块硬盘组的RAID5，先降级为RAID1才可以拆掉其中一块 拆分硬盘123btrfs balance start -mconvert=raid1 /my20Gbtrfs balance start -dconvert=raid1 /my20Gbtrfs device delete /dev/sdd /my20G #此时移除设备sdd 从ext4转为Btrfs1234567891011121314151617#创建ext4分区fdisk /dev/sdd #将sdd重新创建分区sdd1mkfs.ext4 /dev/sdd1 #格式化为ext4文件系统mount /dev/sdd1 /mnt #挂载sdd1ls /mnt cp /etc/fstab /mnt #复制文件fstab到 /mntls /mnt umount /mnt #卸载文件系统，不要在线做文件系统转换fsck -f /dev/sdd1 #做强制检测#将ext4装换为Btrfsbtrfs-convert /dev/sdd1 btrfs filesystem show #sdd1已经转化成了btrfs文件系统mount /dev/sdd1 /mntls /mntcat /mnt/fstab #之前的文件fstab仍旧可以正常访问 从Btrfs转为ext4123456umount /mntbtrfs-convert -r /dev/sdd1mount /dev/sdd1 /mntls /mntblkid /dev/sdd1 #参考sdd1信息，可见TYPE="ext4"cat /mnt/fstab #且原文件仍旧可以正常访问 btrfs子卷管理创建子卷：命令格式： btrfs subvolume create /PATH 此路径必须是在btrfs文件系统的挂载目录下1234567btrfs subvolume create /my20G/subvol #创建子卷，子卷名为subvolbtrfs subvolume create /my20G/subvol1 #再创建子卷，子卷名为subvol1btrfs subvolume list /my20G #查看btrfs 文件系统下的所有子卷信息ID 262 gen 73 top level 5 path subvol #ID 262 是子卷subvol的ID，可以用该ID来挂载该卷ID 263 gen 74 top level 5 path subvol1 挂载子卷命令格式： mount -o subvol=SUBVOLUME DEVICE /MOUNT_POIN12mount -o subvol=subvol /dev/sdae /mnt #将子卷单独挂载到/mnt目录下ls /mnt #此时是没有任何内容的 查看子卷相关信息挂载父卷，子卷自动被挂载命令格式：btrfs subvolume show MOUNT_POINT1234567btrfs subvolume show /mnt #查看子卷信息cp /var/log/messages /mnt #复制messages文件到子卷subvolls /mntumount /mnt #卸载子卷subvolmount /dev/sdae /my20G #将这个btrfs文件系统挂载到/my20G目录ls /my20Gls /my20G/subvol #可见子卷subvol的内容是可见的，所以说一旦父卷挂载，子卷就被自动挂载了 挂载子卷，父卷不会自动被挂载123umount /my20G #卸载父卷，mount -o subvol=subvol /dev/sdae /my20G #单独挂载子卷ls /my20G/ #此时/my20G下只有子卷的内容，并不会有父卷的内容：如subvol,subvol1目录 注：由于是子卷，如果父卷已经挂载，则子卷就自动被挂载了反之，如果只挂载子卷，父卷内容是不会自动挂载的，其内容，不可见 分别挂载子卷和父卷（不要先挂载父卷）子卷，父卷也可以分别挂载：（可是没必要单独挂载子卷，父卷挂载完成后，子卷也就被自动挂载了)12345umount /my20G #卸载子卷mount -o subvol=subvol /dev/sdae /mnt #挂载子卷到/mnt目录mount /dev/sdae /my20G #挂载父卷到/my20G目录ls /my20G/ #此时父卷挂载成功ls /mnt #子卷内容也可单独显示 删除子卷命令格式：btrfs subvolume delete /MOUNT_POINT12btrfs subvolume delete /my20G/subvol #删除子卷subvolbtrfs subvolume list /my20G #已经没有了子卷subvol信息了 子卷快照命令格式：btrfs subvolume snapshot /PATH/TO/SUBVOLUME /PATH/TO/SNAPSHOT1234567cp /etc/passwd /my20G/subvol1/ #复制passwd文档到子卷subvol1内btrfs subvolume snapshot /my20G/subvol1/ /my20G/subvol1_snapshot #创建快照subvol1_snapshotbtrfs subvolume list /my20G #快照子卷subvol1_snapshot创建完成echo "TEST FOR SNAPSHOT" &gt;&gt; /my20G/subvol1/passwd #在passwd文档后追加一行 "TEST FOR SNAPSHOT" tail -1 /my20G/subvol1/passwd #此时子卷中数据更新了tail -1 /my20G/subvol1_snapshot/passwd #此时快照中的passwd并没有更新，末尾没有"TEST FOR SNAPSHOT" 这行。 注：在子卷创建快照后，对原子卷做的修改操作并不会反映到快照中。 原文：http://siyuan710.blog.51cto.com/10648912/1699070]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Btrfs文件系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑苹果]]></title>
    <url>%2Fposts%2F3958%2F</url>
    <content type="text"><![CDATA[最近整理资料，早就想写一篇黑苹果了，自从入手了百苹果后就没再折腾黑苹果了，说真的，黑苹果适合那些作死折腾的人，不想折腾的还是某宝找远程安装吧。 最可怕的是那年寒假，在家除了吃饭睡觉就是想办法驱动那个奇葩的ATI HD 4300 显卡，当时没找到什么文章，都是台式机显卡能驱动的，但这款移动版貌似全球无解，我就这样改了又改重启了几百次，真的是几百次哦，简直不忍直视。 以前比较出名是远景论坛(不过竟然被查了，网站关了)，威锋网到了2017，好像黑苹果乐园是更新比较快的。猫叔博客：https://www.maoshu.cc黑苹果需要有丰富的系统知识做支撑，不然遇到困难真的没法解决。 虚拟机安装在虚拟机中安装Mac操作系统也是可以的，但是显卡会有限制，最大128M显存，自然也就特别特别卡了。安装时一般需要ISO版（见工具包中的：dam2iso）的系统，安装完成后可以用原生引导，也可以更换为ISO版的其他引导。VirtualBox自带有Mac选择，安装时选择就行了；VMware需要下载一个解锁补丁，不同的VM版本补丁不同，搜索就有。安装补丁之后安装系统就能看到Mac选择了。 安装系统都是一样的，制作引导需要一点技巧。引导有BootThink、Chameleon(变色龙)、Clover(四叶草)等好几种。 黑苹果想要完美一些就尽量选择中高端机型，硬件和白苹果类似的最好，当然，太过新颖的机型也可能不支持的。 工具打包下载：http://ofyfogrgx.bkt.clouddn.com/黑苹果安装工具打包.zip Boot+MBR适合不支持UEFI的老机子或不打算升级的情况。安装镜像如果是下载原版的要破解剥离引导层(见工具包中的：官方DMG格式提取安装文件)后才能使用，费时费力，建议下载破解好的懒人版之类的。 这种模式选用3种引导中的哪一种都行，不建议选BootThink，貌似不维护了，所以不支持新的系统了。如果是变色龙的话就方便很多。 Windows下的准备工作先安装JAVA环境，Microsoft .NET Framework 2.0硬盘模式要打开AHCI（在BIOS中开启） 1.用Win7的磁盘管理工具分出一个10G的分区和一个30G的分区（这两个是主分区或逻辑分区都可以），在新建两个简单卷过程中注意选择“不要格式化”。 30G分区用来安装Mac系统，10G分区用来写入安装文件，安装完成后10G分区可删除。【硬盘用MRB或GPT分区表都没问题】 2.安装“BootThink或Win版色龙安装器GUI安装 3.安装MacDrive或（win下读写HFS分区），也可以汉化破解，不破解也没关系。 4.运行“硬盘安装助手”，选择下载来的ISO，取消下面的三个选项，选择写入10G的分区中。 如果遇到提示无法写入，请将10G分区进行如下操作：快速格式化为NTFS--&gt;磁盘管理工具内删除分区--&gt;新建简单卷（不要格式化）。 写入过程中会显示程序未响应，这是正常现象，不用管它，过一会会提示写入完成。然后打开分区助手【好用】.exe看看分区标记是不是AF不是的话改为AF,之后重启开始安装。 安装Mac系统1.重启后进入BootThink或变色龙，选择“OS X Install DVD“字样的回车。稍后进入安装界面， 安装遇到，白屏 且 鼠标 在屏幕左上角 无限彩色风火轮？可以安装或替换\System\Library\Extensions\FakeSMC.kext或者\Extra\Extensions\FakeSMC.kext为FakeSMC.kext.2.5.zip【解压出来】版的 即可。删掉/System/Library/Caches/com.apple.kext.caches/Startup/全部文件 安装过程遇到五国语言卡死？这个问题比较复杂，我差不多忘记了怎么处理了。 2.选择菜单栏中的“实用工具”里的“磁盘工具”，在左侧选择30G的分区，点击“抹掉”。格式选择“Mac OS 扩展（日志式）”，名称可任意。然后点下面的“抹掉”抹盘完成后关闭磁盘工具，回到安装程序。 3.选择同意许可，安装位置选择刚才抹掉的分区（注意，不要误点下一步） 4.安装过程中可能出现光标消失，滚动条停止，剩余时间不变的状况，这时点一下触摸板上的鼠标左键即可解决，不影响安装。 5.安装完成后提示重启，点击“重新启动”，由于此时没有安装kext，系统会一直停留在菊花旋转界面，需要手动按电源键关机后重启。 6.重启后选择进入另一个系统【就是安装前用的win系统】，删除安装的苹果分区内的X:/System/Library/CoreServices/SetupAssistant.app/Contents/Resources/DeviceSection.bundle否则进入系统时会提示找不到键盘而无法进入。 建议此时把Kext Wizard.app等软件放到Mac的分区中或\System\Library\Extensions到时点开就可以安装。 7.重启后用BootThink或变色龙进入Mac系统，选择语言，创建账户密码，注册AppleID可直接跳过，正常情况下设置完成后可进入Mac系统。 如果设置完成后又重新回到首页选择语言、创建账户，并且无限循环，恭喜你，这次安装失败了，再手动重启选择安装文件写入的分区重新安装一遍，并删除那个不能识别键盘的文件。 在Mac下安装硬件kext此时能进入系统了，如果显卡没有驱动是超级卡的，接着来一步一步驱动各个硬件。进入Mac系统后，双击解压“Kext Wizard.zip”，得到kext安装工具“Kext Wizard”。 1.运行Kext Wizard，如过请求检查更新选不检查，选择“Installation”，选择刚才全部的kext，然后选择安装到System/Library/Extensions并确认右下角选择的是Mac安装的分区。点击Install，稍后会提示安装完成。如果右下角的没有识别出安装分区，可能是这个版本的Kext Wizard不行，换一个版本，不过似乎也不影响，这种只能试试，没个准的。 安装完或手动把Kext复制进了System/Library/Extensions的可以运行磁盘工具修复权限 修改设备ID驱动某些硬件型号是一样的，但是设备识别码（ID）不同，或者是不同型号共用一个设备ID，这时需要修改设备ID才能驱动了。 以下以Marvell Yukon 88E8042网卡驱动为例1.找到System/Library/Extensions下的IONetworkingFamily.kext，右键点击它选择“显示包内容”，把里面的Contents/PlugIns/AppleYukon2.kext拷贝到桌面。 2.右键桌面上的AppleYukon2.kext，选择显示包内容，找到Contents/Info.plist，双击编辑Info.plist，展开Information Property List下的 IOKitPersonalities 3.找到Yukon开头的第一行，左侧修改为Yukon-88E8042；展开Yukon-88E8042 ，找到IOPCIPrimaryMatch把它右边的内容改成0x435711ab（0x435711ab是在Win下用设备管理器-硬件详细信-硬件ID查得，你的网卡ID可能不是这个，请提前确认）找到Model把它右面的内容改成Marvell Yukon 88E8042 PCI-E Singleport Copper SA（改为要显示的网卡名字，最好不要有中文）。 4.保存文件，用桌面上的“AppleYukon2.kext”替换System/Library/Extensions/IONetworkingFamily.kext/Contents/PlugIns/AppleYukon2.kext。然后使用磁盘工具修复此分区的权限，重新启动后网卡即可使用。 其他驱动也是类似这样修复的。这里提供一个思路，黑苹果绝对不仅仅是这么简单。 UEFI+GPT直接用原版镜像安装适合支持UEFI或在线升级的情况。建议用四叶草引导。 制作引导参考：http://bbs.feng.com/read-htm-tid-7534160.htmlhttps://www.maoshu.cc/993.htmlhttp://jingyan.baidu.com/article/d5a880eb8bd51113f047cc76.html 安装盘按Boot+MBR的方法制作好，制作好引导后直接，启动安装即可，因为是原版镜像，一般安装成功的几率是很高的，基本不会有什么错误。安装好后的各个驱动问题也是按修改设备ID驱动的方法解决，也可以自己下载kext文件放进去然后修复。]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不仅仅是一个路由器]]></title>
    <url>%2Fposts%2F106%2F</url>
    <content type="text"><![CDATA[说起路由器，回想起以前折腾路由的日子，不对，现在依然在折腾。不过，我折腾过的路由并不多，华为hg255d,newifi,斐讯302B，斐讯K1，斐讯K2，极路由1S，乐携路由，TP-Link某低端机子，AirPort Time Capsule，网件R8000；目前就这些，除了剁手花了近700软妹币买的螃蟹R8000主板，和Time Capsule ，其他都是些低端路由，虽然很折腾人，但也学到了很多东西；写这篇是因为我快不记得刷机步骤了，毕竟忙着忙着就好久没有去折腾了。 太低端的就不说了，只是刷个固件没什么好玩的，能改装的路由才是好路由。折腾路由的原因大多是不想让路由仅仅只是个路由！！！这点很重要，于是有了去广告，搭梯子，VPN，破解校园网，游戏加速，宽带多拨，各种BT、PT、远程、离线下载，文件共享、远程监控、网络打印机、各种小型服务器搭建等等。 MTK7620系列7620系列的路由因为CPU的通用性，成本低等因素，快速的成为厂家首选，16年这一两年内还是中端路由的首选，时长占用量大了就有大神去开发固件。相互移植也变得简单，比较有代表性的固件是：华硕Padavan，小云newifi如意云，openwrt，Tomato，极路由，潘多拉，DD-WRT，小米miwifi等等，这些固件都有7620系列的版本。 华硕Padavan固件（支持超多机型）：http://www.right.com.cn/forum/thread-161324-1-1.htmlhttp://rt.cn2k.net极玩固件（自带SS，不能装插件）：http://www.geewan.com/download.php?id=4 推荐论坛：恩山论坛 newifi mini官方论坛：http://bbs.newifi.com/forumall.phphttp://www.newbandeng.com/forum.php能找到你想要的。 newifi是个很好刷的路由，我记得官方的就是不死uboot（就是那种不管刷什么固件都不影响uboot，不会变砖的路由），直到极路由固件被移植到newifi上后这个神话就被打破了，极路由的固件会覆盖原有的boot导致无法再刷其他路由固件，这种问题貌似只能用TTL或编程器修复，所以刷极路由固件需谨慎。 刷机：一般是网线LAN连电脑，电脑设置静态IP，192.168.1.10捅菊花插电源，不要放手，5秒左右两个或3个灯在不停的闪，这时浏览器打开192.168.1.1就可以看到固件选择界面了。 救砖我的话是买了2个ROM，还有编程器，用TTL或编程器恢复需要有电烙铁和一定的手工能力，TTL和其他路由方法是一样的，结合tftp一起用。编程器的话选择支持24,25系列的编程器，某宝搜路由编程器一大堆。店家会送驱动软件，没有就自己下载一个。相信能到这个地步的也是敢于作死的。 『零基础玩newifi』【四】TTL 救砖大法详解不拆机备份编程器固件不拆机刷编程器固件 极路由1s极路由刷和newifi是差不多的，唯一要注意的就是备份key,不然刷回极路由后没有key是连接不了插件商城的。备份keyhttp://www.hiwifimi.com/archives/114http://www.right.com.cn/forum/thread-137774-1-1.html不死uboot的breed平台也可以备份key 刷入不死uboothttp://bbs.hiwifi.com/forum.php?mod=viewthread&amp;tid=74992&amp;highlight=uboot不死uboot下载：http://www.right.com.cn/forum/thread-161906-1-1.htmlhttp://www.right.com.cn/forum/thread-171116-1-1.html 网件以前不知道网件是好东西，早就向往梅林固件了，大概知道网件有几款能刷梅林固件，在大天朝的长宽网络下，实在无法再忍受这种号称100M光纤，但实际使用只有512k猫一样的感觉，还是恶心的三层NAT，什么DDNS，到了这里还是死在了外面。不过koolshare论坛有大神开发了DDNS穿透，通过一台中继服务器，好像什么DNS都能穿，有空要试试。 网件也可以刷DD，OpenWRT等等，但就界面来说，还是梅林比较漂亮。DD的亮点我还没找到，没怎么用过，Open的话多拨是个自成一派的东西。但是貌似Open的信号是稍微弱一点点的。 配置对比图，不过这里没有R8000，R8000是2USB，3频WiFi，双核1.0GHz 备份routerinfo参考：http://koolshare.cn/forum.php?mod=viewthread&amp;tid=73278&amp;highlight=routerinfohttp://koolshare.cn/thread-44948-1-1.html R6700R6700刷梅林http://www.acwifi.net/715.htmlhttp://www.good.cc/1242802.html R8000一般的刷固件之前都要先备份一下routerinfo,传统的备份方法是打开路由器ip/debug.htm就可以看到各种信息，或telnet连接路由，输入routerinfo就能出来各种信息。可能是R8000比较新，目前还没有办法备份出来。但是可以通过nvm把固件完整备份出来，不过方法是参照R6400的方法，不知道是不是一样适用（CPU架构不同） 备份方法：123456789101112leolan@R8000-0000:/dev# cat /proc/mtd #查看cfe设备dev: size erasesize namemtd0: 00080000 00020000 "boot"mtd1: 00180000 00020000 "nvram"mtd2: 04000000 00020000 "linux"mtd3: 03c4c930 00020000 "rootfs"mtd4: 00040000 00020000 "board_data"mtd5: 04000000 00020000 "brcmnand"#备份相应的区块dd if=/dev/mtd0 of=/tmp/cfe.bin dd if=/dev/mtd1 of=/tmp/nvram.bin 恢复：打开命令窗口，重新Telnet到路由，输入用户名，然后是密码登录路由器，把文件上传到/tmp目录下，接着输入以下命令：12345cd /tmpmtd write cfe.bin cfemtd write nvram.bin nvramnvram commitreboot 路由器会自动重启，完成CFE刷写，重新复位次就可看到效果了。 开刷不过R8000目前刷没什么困难的。 [固件发布] 【R8000】【20161209】380.63-2-X7.2.1 大爆炸http://koolshare.cn/forum.php?mod=viewthread&amp;tid=73436&amp;highlight=R8000我刷的时候梅林版本是第二次发布。 官方刷梅林chk固件直刷 ,刷完英文直接拔电源重启，变中文再恢复出厂设置固件：http://firmware.koolshare.cn/merlin_8wan_firmware/R8000/Netgear%20R-series%20initial%20files/ 第三方刷梅林trx固件直刷，刷完英文直接拔电源重启，变中文再恢复出厂设置 梅林刷官方OFW直刷，再捅菊花恢复出厂设置固件：http://firmware.koolshare.cn/merlin_8wan_firmware/R8000/Merlin%20to%20OFW/ 因为R8000是3频WiFi，也就是有两个5G芯片，频段是不同的，当然也可以3个WiFi合并为一个，自动分配频段，这样就不会拥挤了。 信号合并SmartConnect优化http://koolshare.cn/thread-73365-1-1.html 网件路由救砖官方救砖教程：http://club.netgear.cn/Knowledgebase/Document_detail.aspx?Did=873也可以使用华硕的固件修复程序：Firmware_Restoration 官方救砖教程无效的话就要把螃蟹拆开来，上TTL线。用SecureCRT或者其他的终端连上去（有时某些终端是不支持一些功能的，比如xshell和putty的功能就互不相同，那就换一个终端）。 开机不断Ctrl+C暂停设备启动，停止后，会停留在CFE命令行模式，您在模式下输入小写的help就可以看到各个命令的使用方法 在shell中输入tftpd（R8000的tftpd并不会自动启动，所以那些不用串口线卡时间刷netgear的教程根本没用），然后就直接在本机配ip，网关192.168.1.1，命令行输tftp，binary模式，put一个新固件上去。 其他救砖教程：http://koolshare.cn/thread-42961-1-1.htmlhttp://koolshare.cn/thread-44948-1-1.htmlhttp://www.expreview.com/33689-2.html 梅林系统梅林系统有官方固件和民间固件，官方固件是专门为华硕路由定制的，但是华硕的好多机型和网件的机型配置基本是一致的，可以方便的移植过来。民间固件目前机型比较完善的是koolshare论坛，恩山论坛，无线论坛KS论坛支持的机型是最多的，恩山论坛中低端路由支持贴比较多。 Koolshare固件指南 &amp; FAQ，新人浏览观看 梅林固件是这样子的 插件的使用比较简单，而且也有链接说明，是比较人性化的定制，之后有什么比较好玩的再更新博客！]]></content>
      <categories>
        <category>路由</category>
      </categories>
      <tags>
        <tag>不仅仅是一个路由器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell编程入门]]></title>
    <url>%2Fposts%2F40666%2F</url>
    <content type="text"><![CDATA[在实验楼（当然还在其他网站看了很多教程）学习整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ|･∀･|ﾉ*~● 基础命令grepgrep命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。grep支持三种正则表达式引擎，分别用三个参数指定： 参数 说明 -E POSIX扩展正则表达式，ERE -G POSIX基本正则表达式，BRE -P Perl正则表达式，PCRE 普通参数： 参数 说明 -b 将二进制文件作为文本来进行匹配 -c 统计以模式匹配的数目 -i 忽略大小写 -n 显示匹配文本所在行的行号 -v 反选，输出不匹配行的内容 -r 递归匹配查找 -A n n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行 -B n n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行 --color=auto 将输出中的匹配项设置为自动颜色显示 注：在大多数发行版中是默认设置了grep的颜色的，你可以通过参数指定或修改GREP_COLOR环境变量。 使用基本正则表达式，BRE位置：12345grep 'mail' /etc/group #过滤出所有含mail字符串的行grep '^mail' /etc/group #过滤出以mail开头的行echo 'geek|good' | grep '[^o]' # 排除字符#注意:当^放到[中括号内]为排除字符，否则表示行首。 数量：123456789# \n是换行符# 将匹配以'z'开头以'o'结尾的所有字符串echo 'zero\nzo\nzoo' | grep 'z.*o'# 将匹配以'z'开头以'o'结尾，中间包含一个任意字符的字符串echo 'zero\nzo\nzoo' | grep 'z.o'# 将匹配以'z'开头,以任意多个'o'结尾的字符串echo 'zero\nzo\nzoo' | grep 'zo*' 选择：1234567891011121314151617181920# grep默认是区分大小写的，这里将匹配所有的小写字母echo '1234\nabcd' | grep '[a-z]'# 将匹配所有的数字echo '1234\nabcd' | grep '[0-9]'# 将匹配所有的数字echo '1234\nabcd' | grep '[[:digit:]]'# 将匹配所有的小写字母echo '1234\nabcd' | grep '[[:lower:]]'# 将匹配所有的大写字母echo '1234\nabcd' | grep '[[:upper:]]'# 将匹配所有的字母和数字，包括0-9,a-z,A-Zecho '1234\nabcd' | grep '[[:alnum:]]'# 将匹配所有的字母echo '1234\nabcd' | grep '[[:alpha:]]' 特殊符号 说明 [:alnum:] 代表英文大小写字节及数字，亦即 0-9, A-Z, a-z [:alpha:] 代表任何英文大小写字节，亦即 A-Z, a-z [:blank:] 代表空白键与 [Tab] 按键两者 [:cntrl:] 代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等 [:digit:] 代表数字而已，亦即 0-9 [:graph:] 除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键 [:lower:] 代表小写字节，亦即 a-z [:print:] 代表任何可以被列印出来的字节 [:punct:] 代表标点符号 (punctuation symbol)，亦即：” ‘ ? ! ; : # $… [:upper:] 代表大写字节，亦即 A-Z [:space:] 任何会产生空白的字节，包括空白键, [Tab], CR 等等 [:xdigit:] 代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节 注意：之所以要使用特殊符号，是因为上面的[a-z]不是在所有情况下都管用，这还与主机当前的语系有关，即设置在LANG环境变量的值，zh_CN.UTF-8的话[a-z]，即为所有小写字母，其它语系可能是大小写交替的如，”a A b B…z Z”，[a-z]中就可能包含大写字母。所以在使用[a-z]时请确保当前语系的影响，使用[:lower:]则不会有这个问题。 使用扩展正则表达式，ERE要通过grep使用扩展正则表达式需要加上-E参数，或使用egrep。 数量:1234# 只匹配"zo"echo 'zero\nzo\nzoo' | grep -E 'zo&#123;1&#125;'# 匹配以"zo"开头的所有单词echo 'zero\nzo\nzoo' | grep -E 'zo&#123;1,&#125;' 注意：推荐掌握{n,m}即可，+,?,*，这几个不太直观，且容易弄混淆。 选择:1234# 匹配"www.baidu.com"和"www.google.com"echo 'www.leolan.top\nwww.baidu.com\nwww.google.com' | grep -E 'www\.(baidu|google)\.com'# 或者匹配不包含"baidu"的内容echo 'www.leolan.top\nwww.baidu.com\nwww.google.com' | grep -Ev 'www\.baidu\.com' 注意：因为.号有特殊含义，所以需要转义。 正则表达式和grep命令的内容就介绍这么多，下面两个更强大的工具sed和awk，因为这两个工具的强大，无法包含全部内容，只做基本介绍。 sedsed 流编辑器;在 man 手册里面的全名为”sed - stream editor for filtering and transforming text “，意即，用于过滤和转换文本的流编辑器。 在 Linux/UNIX 的世界里敢称为编辑器的工具，大都非等闲之辈，比如前面的”vi/vim(编辑器之神)”,”emacs(神的编辑器)”,”gedit”这些个编辑器。sed与上述的最大不同之处在于它是一个非交互式的编辑器。 sed 命令基本格式123sed [参数]... [执行命令] [输入文件]...# 形如：sed -i '1s/sad/happy/' test # 表示将test文件中第一行的"sad"替换为"happy" 参数 说明 -n 安静模式，只打印受影响的行，默认打印输入数据的全部内容 -e 用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数 -f filename 指定执行filename文件中的命令 -r 使用扩展正则表达式，默认为标准正则表达式 -i 将直接修改输入文件内容，而不是打印到标准输出设备 sed执行命令格式12345[n1][,n2]command[n1][~step]command# 其中一些命令可以在后面加上作用范围，形如：sed -i 's/sad/happy/g' test # g表示全局范围sed -i 's/sad/happy/4' test # 4表示指定行中的第四个匹配字符串 其中n1,n2表示输入内容的行号，它们之间为,逗号则表示从n1到n2行，如果为～波浪号则表示从n1开始以step为步进的所有行；command为执行动作，下面为一些常用动作指令： 命令 说明 s 行内替换 c 整行替换 a 插入到指定行的后面 i 插入到指定行的前面 p 打印指定行，通常与-n参数配合使用 d 删除指定行 sed操作举例123456cp /etc/passwd ~# 打印2-5行nl passwd | sed -n '2,5p'# 打印奇数行nl passwd | sed -n '1~2p' 行内替换12# 将输入文本中"shiyanlou" 全局替换为"hehe",并只打印替换的那一行，注意这里不能省略最后的"p"命令sed -n 's/shiyanlou/hehe/gp' passwd 注意： 行内替换可以结合正则表达式使用。 行间替换123nl passwd | grep "leolan"# 删除第21行sed -n '21c\www.leolan.top' passwd 参考链接： sed简明教程 sed单行脚本快速参考 sed完全手册(英文) awk AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一.其名称得自于它的创始人Alfred Aho（阿尔佛雷德·艾侯）、Peter Jay Weinberger（彼得·温伯格）和Brian Wilson Kernighan（布莱恩·柯林汉)姓氏的首个字母.AWK程序设计语言，三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。最简单地说，AWK是一种用于处理文本的编程语言工具。 基本格式awk所有的操作都是基于pattern(模式)—action(动作)对来完成的，如下面的形式：1pattern &#123;action&#125; 你可以看到就如同很多编程语言一样，它将所有的动作操作用一对{}花括号包围起来。其中pattern通常是是表示用于匹配输入的文本的“关系式”或“正则表达式”，action则是表示匹配后将执行的动作。在一个完整awk操作中，这两者可以只有其中一个，如果没有pattern则默认匹配输入的全部文本，如果没有action则默认为打印匹配内容到屏幕。 awk处理文本的方式，是将文本分割成一些“字段”，然后再对这些字段进行处理，默认情况下，awk以空格作为一个字段的分割符，不过这不是固定了，你可以任意指定分隔符，下面将告诉你如何做到这一点。1awk [-F fs] [-v var=value] [-f prog-file | 'program text'] [file...] 其中-F参数用于预先指定前面提到的字段分隔符（还有其他指定字段的方式） ，-v用于预先为awk程序指定变量，-f参数用于指定awk命令要执行的程序文件，或者在不加-f参数的情况下直接将程序语句放在这里，最后为awk需要处理的文本输入，且可以同时输入多个文本文件。 awk操作将文本内容打印到终端12345678touch test.txt &amp;&amp; echo "I like linux" &gt;&gt; test.txt &amp;&amp; echo "www.leolan.top" &gt;&gt; test.txt# "quote&gt;" 不用输入awk '&#123;&gt; print&gt; &#125;' test.txt# 或者写成一行awk '&#123;print&#125;' test.txt 说明:在这个操作中省略了patter，所以awk会默认匹配输入文本的全部内容，然后在”{}”花括号中执行动作，即print打印所有匹配项，这里是全部文本内容 将test.txt的第一行的每个字段单独显示为一行123456789101112131415awk '&#123;&gt; if(NR==1)&#123;&gt; print $1 "\n" $2 "\n" $3&gt; &#125; else &#123;&gt; print&#125;&gt; &#125;' test.txt# 或者awk '&#123;&gt; if(NR==1)&#123;&gt; OFS="\n"&gt; print $1, $2, $3&gt; &#125; else &#123;&gt; print&#125;&gt; &#125;' test.txt 说明:这里使用了awk语言的分支选择语句if,它的使用和很多高级语言如C/C++语言基本一致，如果你有这些语言的基础，这里将很好理解。另一个你需要注意的是NR与OFS，这两个是awk内建的变量，NR表示当前读入的记录数，你可以简单的理解为当前处理的行数，OFS表示输出时的字段分隔符，默认为“ “空格，用OFS将字段分隔符设置为\n换行符，所以第一行原本以空格为字段分隔的内容就分别输出到单独一行了。然后是$N其中N为相应的字段号，这也是awk的内建变量，它表示引用相应的字段，因为第一行只有三个字段，所以只引用到了$3。除此之外另一个这里没有出现的$0，它表示引用当前记录（当前行）的全部内容。 将test的第二行的以点为分段的字段换成以空格为分隔1234567891011121314awk -F'.' '&#123;&gt; if(NR==2)&#123;&gt; print $1 "\t" $2 "\t" $3&gt; &#125;&#125;' test.txt# 或者awk '&gt; BEGIN&#123;&gt; FS="."&gt; OFS="\t" # 如果写为一行，两个动作语句之间应该以";"号分开 &gt; &#125;&#123;&gt; if(NR==2)&#123;&gt; print $1, $2, $3&gt; &#125;&#125;' test.txt 说明：这里的-F参数，它是用来预先指定待处理记录的字段分隔符。除了指定OFS还可以在print 语句中直接打印特殊符号如这里的\t，print打印的非变量内容都需要用””一对引号包围起来。第二种方法中实现预先指定变量分隔符的另一种方式，即使用BEGIN，就这个表达式指示了，其后的动作将在所有动作之前执行，这里是FS赋值了新的”.”点号代替默认的” “空格 awk常用的内置变量 变量名 说明 FILENAME 当前输入文件名，若有多个文件，则只表示第一个。如果输入是来自标准输入，则为空字符串 $0 当前记录的内容 $N N表示字段号，最大值为NF变量的值 FS 字段分隔符，由正则表达式表示，默认为” “空格 RS 输入记录分隔符，默认为”\n”，即一行为一个记录 NF 当前记录字段数 NR 已经读入的记录数 FNR 当前输入文件的记录数，请注意它与NR的区别 OFS 输出字段分隔符，默认为” “空格 ORS 输出记录分隔符，默认为”\n” 参考资料： awk程序设计语言 awk简明教程 awk用户指南(英文) 正则表达式 正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。 基本语法一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列符合某个句法规则的字符串。 选择|竖直分隔符表示选择，例如”boy|girl”可以匹配”boy”或者”girl” 数量限定数量限定除了我们举例用的*,还有+加号,?问号,如果在一个模式中不加数量限定符则表示出现一次且仅出现一次： +表示：前面的字符必须出现至少一次(1次或多次)，例如，”goo+gle”,可以匹配”gooogle”,”goooogle”等； ?表示：前面的字符最多出现一次(0次或1次)，例如，”colou?r”,可以匹配”color”或者”colour”; *星号：代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，“0*42”可以匹配42、042、0042、00042等。 范围和优先级()圆括号：可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。例如，”gr(a|e)y”等价于”gray|grey”，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），”(grand)?father”匹配father和grandfather（这里体验了范围，?将圆括号内容作为一个整体匹配）。 语法(少部分)正则表达式有多种不同的风格，下面列举一些常用的作为 PCRE 子集的适用于perl和python编程语言及grep或egrep的正则表达式匹配规则 PCRE（Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式）是一个用 C 语言编写的正则表达式函数库，由菲利普.海泽(Philip Hazel)编写。PCRE是一个轻量级的函数库，比Boost 之类的正则表达式库小得多。PCRE 十分易用，同时功能也很强大，性能超过了 POSIX 正则表达式库和一些经典的正则表达式库。 字符 描述 \ 将下一个字符标记为一个特殊字符、或一个原义字符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\”匹配“\”而“(”则匹配“(”。 ^ 匹配输入字符串的开始位置。 $ 匹配输入字符串的结束位置。 {n} n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。 {n,} n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。 {n,m} m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。 * 匹配前面的子表达式零次或多次。例如，zo能匹配“z”、“zo”以及“zoo”。等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。 ? 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。 ? 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。 . 匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“(.｜\n)”的模式。 (pattern) 匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“(”或“)”。 x｜y 匹配x或y。例如，“z｜food”能匹配“z”或“food”。“(z｜f)ood”则匹配“zood”或“food”。 [xyz] 字符集合（character class）。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。其中特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。 [^xyz] 排除型（negate）字符集合。匹配未列出的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。 [^a-z] 排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。 参考WiKi：正则表达式 优先级优先级为从上到下从左到右，依次降低： 运算符 说明 \ 转义符 (), (?:), (?=), [] 括号和中括号 *、+、?、{n}、{n,}、{n,m} 限定符 ^、$、\任何元字符 定位点和序列 ｜ 选择]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell编程入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python入门]]></title>
    <url>%2Fposts%2F21062%2F</url>
    <content type="text"><![CDATA[学习廖雪峰老师的博客整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ|･∀･|ﾉ*~● 安装Python官网：www.python.org Mac系统是OS X 10.8~10.10，那么系统自带的Python版本是2.7。要安装最新的Python 3.5，有两个方法：方法一：从Python官网下载Python 3.5的安装程序，双击运行并安装；方法二：如果安装了Homebrew，直接通过命令brew install python3安装即可。 Windows从Python的官方网站下载Python 3.5对应的64位安装程序或32位安装程序 特别要注意勾上Add Python 3.5 to PATH，然后点“Install Now”即可完成安装。不打勾则需要自己设置环境变量。 Linux安装2.X版本yum install python -y Ubuntu自带有 安装3.X版本yum install python3 -y (部分源可以这样安装)源码编译通用：版本选择：https://www.python.org/ftp/python/12345yum install gcc cmake -y apt-get install gcc cmake #一般Ubuntu自带了wget http://www.python.org/ftp/python/3.3.0/Python-3.3.0.tgztar -zxvf Python-3.3.0.tgzcd Python-3.3.0 在编译前先在/usr/local建一个文件夹python3（作为python的安装路径，以免覆盖老的版本）1234mkdir /usr/local/python3./configure --prefix=/usr/local/python3 (指定安装路径，不指定则覆盖老版本)make &amp;&amp; make install#Ubuntu不用进行以下设置，自动添加变量路径了。 覆盖老版本(有需要可以这样做，也可以不覆盖，共存)12mv /usr/bin/python /usr/bin/python_oldln -s /usr/local/python3/bin/python3 /usr/bin/python #（建立软连接） 此时运行python的是新版本，老版本要使用命令/usr/bin/python_old才能运行。双版本自由切换（增加Python3的用户变量）：vim ~/.bash_profile12PATH=$PATH:/usr/local/python3/bin/source .bash_profile #(立刻生效) 如果是export PATH=&quot;$var_PATH&quot; 则只在当前shell有效，一旦关闭就失效了。此时可以自由运行Python或Python3rm -rf ~/Python*OK安装完成。 Python解释器：http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000 python基础输入输出Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里。当你输入name = input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。输入完成后，不会有任何提示，Python交互式命令行又回到&gt;&gt;&gt;状态了。输入name可以直接查看变量内容：例：name = input(&#39;please input your name:&#39;) (此时输入姓名后是把姓名输入到变量name中，如果再让n＝name的话，在&gt;&gt;&gt;状态下输入n，显示的是就是姓名，当然print(‘hello , ‘,name)也行。)python会把逗号显示为空格。 print()函数也可以接受多个字符串（单双引号引起来的都是字符串），用逗号“,”隔开，就可以连成一串输出： 1&gt;&gt;&gt; print('The quick brown fox', 'jumps over', 'the lazy dog') The quick brown fox jumps over the lazy dog print()会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的： 语法以#开头的语句是注释，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。 缩进有利有弊。好处是强迫你写出格式化且缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用4个空格的缩进。缩进的另一个好处是强迫你写出缩进较少的代码，缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像格式化Java代码那样格式化Python代码。最后，请务必注意，Python程序是大小写敏感的，如果写错了大小写，程序会报错。Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。最少也要加tab键或空格，不然报错。 科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。 字符串是以单引号’或双引号”括起来的任意文本。‘’或“”本身只是一种表示方式，不是字符串的一部分，因此，字符串‘abc’只有a，b，c这3个字符。如果‘本身也是一个字符，那就可以用“”括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：‘I\’m \”OK\”!’ 表示的字符串内容是：I’m “OK”! 转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符（tab键），字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：12345678&gt;&gt;&gt; print('I\'m ok.')I'm ok.&gt;&gt;&gt; print('I\'m learning\nPython.')I'm learningPython.&gt;&gt;&gt; print('\\\n\\')\\ 如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：1234&gt;&gt;&gt; print('\\\t\\')\ \&gt;&gt;&gt; print(r'\\\t\\')\\\t\\ 如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：123456&gt;&gt;&gt; print('''line1... line2... line3''')line1line2line3 上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入。如果写成程序，就是：123print('''line1line2line3''') 多行字符串’’’…’’’还可以在前面加上r使用，请自行测试。 布尔值布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写）布尔值可以用and、or和not运算。and运算是与运算，只有所有都为True，and运算结果才是True：or运算是或运算，只要其中有一个为True，or运算结果就是True：not运算是非运算，它是一个单目运算符，把True变成False，False变成True：布尔值经常用在条件判断中，比如：1234if age &gt;= 18: print('adult')else: print('teenager') 空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。 在Python中，等号=是赋值语句，可以把任意数据类型（整型，浮点，字符串，布尔值，变量等等）赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：12int a = 123; // a是整数类型变量a = "ABC"; // 错误：不能把字符串赋给整型变量 和静态语言相比，动态语言更灵活，就是这个原因。 把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：a = ‘ABC’b = aa = ‘XYZ’print(b)最后一行打印出变量b的内容到底是’ABC’呢还是’XYZ’？如果从数学意义上理解，就会错误地得出b和a相同，也应该是’XYZ’，但实际上b的值是’ABC’，让我们一行一行地执行代码，就可以看到到底发生了什么事：执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，并把a指向’ABC’：执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：(b是找到a所指向的地址，再把自己的指向那个地址，然后b就和a没关系了。）执行a = ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：所以，最后打印变量b的结果自然是’ABC’了。 常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。 最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：12&gt;&gt;&gt; 10 / 33.3333333333333335 /除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：12&gt;&gt;&gt; 9 / 33.0 还有一种除法是//，称为地板除，两个整数的除法仍然是整数：12&gt;&gt;&gt; 10 // 33 你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：12&gt;&gt;&gt; 10 % 31 无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。 字符串和编码最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：12&gt;&gt;&gt; print('包含中文的str')包含中文的str 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：12345678&gt;&gt;&gt; ord('A')65&gt;&gt;&gt; ord('中')20013&gt;&gt;&gt; chr(66)'B'&gt;&gt;&gt; chr(25991)'文' 如果知道字符的整数编码，还可以用十六进制这么写str：12&gt;&gt;&gt; '\u4e2d\u6587''中文' 两种写法完全是等价的。由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。Python对bytes类型的数据用带b前缀的单引号或双引号表示：x = b&#39;ABC&#39; 要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：12345678&gt;&gt;&gt; 'ABC'.encode('ascii')b'ABC'&gt;&gt;&gt; '中文'.encode('utf-8')b'\xe4\xb8\xad\xe6\x96\x87'&gt;&gt;&gt; '中文'.encode('ascii')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) 纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。在bytes中，无法显示为ASCII字符的字节，用\x##显示。反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：1234&gt;&gt;&gt; b'ABC'.decode('ascii')'ABC'&gt;&gt;&gt; b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')'中文' 要计算str包含多少个字符，可以用len()函数：1234&gt;&gt;&gt; len('ABC')3&gt;&gt;&gt; len('中文')2 len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：123456&gt;&gt;&gt; len(b'ABC')3&gt;&gt;&gt; len(b'\xe4\xb8\xad\xe6\x96\x87')6&gt;&gt;&gt; len('中文'.encode('utf-8'))6 可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：12#!/usr/bin/env python3# -*- coding: utf-8 -*- 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：如果.py文件本身使用UTF-8编码，并且也申明了# -*- coding: utf-8 -*-，打开命令提示符测试就可以正常显示中文： 格式化最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似‘亲爱的xxx你好！你xx月的话费是xx，余额是xx’之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。 在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：1234&gt;&gt;&gt; 'Hello, %s' % 'world''Hello, world'&gt;&gt;&gt; 'Hi, %s, you have $%d.' % ('Michael', 1000000)'Hi, Michael, you have $1000000.' %运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。 常见的占位符有： |–|–||%d|整数||%f|浮点数||%s|字符串||%x|十六进制整数| 其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：1234&gt;&gt;&gt; '%2d-%02d' % (3, 1)' 3-01'&gt;&gt;&gt; '%.2f' % 3.1415926 （.2f表示小数点后保留两位）'3.14' 如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：12&gt;&gt;&gt; 'Age: %s. Gender: %s' % (25, True)'Age: 25. Gender: True' 有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：12&gt;&gt;&gt; 'growth rate: %d %%' % 7'growth rate: 7 %' 练习小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出’xx.x%’，只保留小数点后1位：123456# -*- coding: utf-8 -*-s1 = 72s2 = 85r = 100*(s2/s1-1)print('提升了: %.2f' %r) 123456789 x = float(input('请输入上次得分：')) y = float(input('请输入这次得分：')) z = (y-x)/x*100 if z&gt;=0: print('这次进步了：%.1f' %z+'%') else: print('这次退步了：%.1f' %-z+'%')except Exception: print('请输入正确的分数！') 使用list和tuplelist是一种有序的集合，可以随时添加和删除其中的元素。比如，列出班里所有同学的名字，就可以用一个list表示：123&gt;&gt;&gt; classmates = ['Michael', 'Bob', 'Tracy']&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy'] 变量classmates就是一个list。用len()函数可以获得list元素的个数：12&gt;&gt;&gt; len(classmates)3 用索引来访问list中每一个位置的元素，记得索引是从0开始的：12345678910&gt;&gt;&gt; classmates[0]'Michael'&gt;&gt;&gt; classmates[1]'Bob'&gt;&gt;&gt; classmates[2]'Tracy'&gt;&gt;&gt; classmates[3]Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;IndexError: list index out of range 当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - 1。如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：12&gt;&gt;&gt; classmates[-1]'Tracy' 以此类推，可以获取倒数第2个、倒数第3个：1234&gt;&gt;&gt; classmates[-2]'Bob'&gt;&gt;&gt; classmates[-3]'Michael' list是一个可变的有序表，所以，可以往list中追加元素到末尾：123&gt;&gt;&gt; classmates.append('Adam')&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy', 'Adam'] 也可以把元素插入到指定的位置，比如索引号为1的位置：123&gt;&gt;&gt; classmates.insert(1, 'Jack')&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy', 'Adam'] 要删除list末尾的元素，用pop()方法：1234&gt;&gt;&gt; classmates.pop()'Adam'&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy'] 要删除指定位置的元素，用pop(i)方法，其中i是索引位置：1234&gt;&gt;&gt; classmates.pop(1)'Jack'&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy'] 要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：123&gt;&gt;&gt; classmates[1] = 'Sarah'&gt;&gt;&gt; classmates['Michael', 'Sarah', 'Tracy'] list里面的元素的数据类型也可以不同，比如：1&gt;&gt;&gt; L = ['Apple', 123, True] list元素也可以是另一个list，比如：123&gt;&gt;&gt; s = ['python', 'java', ['asp', 'php'], 'scheme']&gt;&gt;&gt; len(s)4 要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：12&gt;&gt;&gt; p = ['asp', 'php']&gt;&gt;&gt; s = ['python', 'java', p, 'scheme'] 要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。如果一个list中一个元素也没有，就是一个空的list，它的长度为0：123&gt;&gt;&gt; L = []&gt;&gt;&gt; len(L)0 tuple另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：1&gt;&gt;&gt; classmates = ('Michael', 'Bob', 'Tracy') 现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：123&gt;&gt;&gt; t = (1, 2)&gt;&gt;&gt; t(1, 2) 如果要定义一个空的tuple，可以写成()：123&gt;&gt;&gt; t = ()&gt;&gt;&gt; t() 但是，要定义一个只有1个元素的tuple，如果你这么定义：123&gt;&gt;&gt; t = (1)&gt;&gt;&gt; t1 定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：123&gt;&gt;&gt; t = (1,)&gt;&gt;&gt; t(1,) Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。最后来看一个“可变的”tuple：12345&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])&gt;&gt;&gt; t[2][0] = 'X'&gt;&gt;&gt; t[2][1] = 'Y'&gt;&gt;&gt; t('a', 'b', ['X', 'Y']) 这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？别急，我们先看看定义的时候tuple包含的3个元素：当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为： 表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向‘a’，就不能改成指向‘b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。 练习：1234567891011121314# -*- coding: utf-8 -*-L = [ ['Apple', 'Google', 'Microsoft'], ['Java', 'Python', 'Ruby', 'PHP'], ['Adam', 'Bart', 'Lisa']]# 打印Apple:print(L[0][0])# 打印Python:print(L[1][1]) 或 print(L[-2][-3])# 打印Lisa:print(L[2][2]) 或 print(L[-1][-1]) 条件判断计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用if语句实现：1234age = 20if age &gt;= 18: print('your age is', age) print('adult') 根据Python的缩进规则，如果if语句判断是True，就把缩进的两行print语句执行了，否则，什么也不做。也可以给if添加一个else语句，意思是，如果if判断是False，不要执行if的内容，去把else执行了：1234567age = 3if age &gt;= 18: print('your age is', age) print('adult')else: print('your age is', age) print('teenager') 注意不要少写了冒号:。当然上面的判断是很粗略的，完全可以用elif做更细致的判断：1234567age = 3if age &gt;= 18: print('adult')elif age &gt;= 6: print('teenager')else: print('kid') elif是else if的缩写，完全可以有多个elif，所以if语句的完整形式就是：12345678if &lt;条件判断1&gt;: &lt;执行1&gt;elif &lt;条件判断2&gt;: &lt;执行2&gt;elif &lt;条件判断3&gt;: &lt;执行3&gt;else: &lt;执行4&gt; if语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：1234567age = 20if age &gt;= 6: print('teenager')elif age &gt;= 18: print('adult')else: print('kid') if判断条件还可以简写，比如写：12if x: print('True') 只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。再议 input最后看一个有问题的条件判断。很多同学会用input()读取用户的输入，这样可以自己输入，程序运行得更有意思：12345678910birth = input('birth: ')if birth &lt; 2000: print('00前')else: print('00后')# 输入1982，结果报错Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: unorderable types: str() &gt; int() 这是因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：123456s = input('birth: ')birth = int(s)if birth &lt; 2000: print('00前')else: print('00后') 再次运行，就可以得到正确地结果。但是，如果输入abc呢？又会得到一个错误信息：Traceback (most recent call last): File ““, line 1, in ValueError: invalid literal for int() with base 10: ‘abc’ 原来int()函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。 练习小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数： ● 低于18.5：过轻 ● 18.5-25：正常 ● 25-28：过重 ● 28-32：肥胖 ● 高于32：严重肥胖用if-elif判断并打印结果：1234# -*- coding: utf-8 -*-height = 1.75weight = 80.5 循环要计算1+2+3，我们可以直接写表达式：12&gt;&gt;&gt; 1 + 2 + 36 要计算1+2+3+…+10，勉强也能写出来。但是，要计算1+2+3+…+10000，直接写表达式就不可能了。为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：123names = ['Michael', 'Bob', 'Tracy']for name in names: print(name) 执行这段代码，会依次打印names的每一个元素：MichaelBobTracy 所以for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。再比如我们想计算1-10的整数之和，可以用一个sum变量做累加：1234sum = 0for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: sum = sum + xprint(sum) 如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从0开始小于5的整数：12&gt;&gt;&gt; list(range(5))[0, 1, 2, 3, 4] range(101)就可以生成0-100的整数序列，计算如下：1234sum = 0for x in range(101): sum = sum + xprint(sum) 请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：123456sum = 0n = 99while n &gt; 0: sum = sum + n n = n - 2print(sum) 在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。练习请利用循环依次对list中的每个名字打印出Hello, xxx!：1234# -*- coding: utf-8 -*-L = ['Bart', 'Lisa', 'Adam']for L in L: print("hello,%s!" %L) 使用dict和setdictPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。查成绩如果用list实现，需要两个list：12names = ['Michael', 'Bob', 'Tracy']scores = [95, 75, 85] 给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：123&gt;&gt;&gt; d = &#123;'Michael': 95, 'Bob': 75, 'Tracy': 85&#125;&gt;&gt;&gt; d['Michael']95 假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。 dict就是第二种实现方式，给定一个名字，比如’Michael’，dict在内部就可以直接计算出Michael对应的存放成绩的“页码”，也就是95这个数字存放的内存地址，直接取出来，所以速度非常快。你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。 把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：123&gt;&gt;&gt; d['Adam'] = 67&gt;&gt;&gt; d['Adam']67 由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：123456&gt;&gt;&gt; d['Jack'] = 90 dict_name['key'] = value&gt;&gt;&gt; d['Jack']90&gt;&gt;&gt; d['Jack'] = 88&gt;&gt;&gt; d['Jack']88 如果key不存在，dict就会报错：1234&gt;&gt;&gt; d['Thomas']Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;KeyError: 'Thomas' 要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：12&gt;&gt;&gt; 'Thomas' in dFalse 二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：123&gt;&gt;&gt; d.get('Thomas')&gt;&gt;&gt; d.get('Thomas', -1)-1 注意：返回None的时候Python的交互式命令行不显示结果。要删除一个key，用pop(key)方法，对应的value也会从dict中删除：1234&gt;&gt;&gt; d.pop('Bob')75&gt;&gt;&gt; d&#123;'Michael': 95, 'Tracy': 85&#125; 请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。和list比较，dict有以下几个特点： 查找和插入的速度极快，不会随着key的增加而变慢； 需要占用大量的内存，内存浪费多。 而list相反： 查找和插入的时间随着元素的增加而增加； 占用空间小，浪费内存很少。 所以，dict是用空间来换取时间的一种方法。dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：12345&gt;&gt;&gt; key = [1, 2, 3]&gt;&gt;&gt; d[key] = 'a list'Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: unhashable type: 'list' setset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合：123&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125; 注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。重复元素在set中自动被过滤：123&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125; 通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：123456&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s&#123;1, 2, 3, 4&#125;&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s&#123;1, 2, 3, 4&#125; 通过remove(key)方法可以删除元素：123&gt;&gt;&gt; s.remove(4)&gt;&gt;&gt; s&#123;1, 2, 3&#125; set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：123456&gt;&gt;&gt; s1 = set([1, 2, 3])&gt;&gt;&gt; s2 = set([2, 3, 4])&gt;&gt;&gt; s1 &amp; s2&#123;2, 3&#125;&gt;&gt;&gt; s1 | s2&#123;1, 2, 3, 4&#125; set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。把list放入set，则会报错。 再议不可变对象上面我们讲了，str是不变对象，而list是可变对象。对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：1234&gt;&gt;&gt; a = ['c', 'b', 'a']&gt;&gt;&gt; a.sort()&gt;&gt;&gt; a['a', 'b', 'c'] 而对于不可变对象，比如str，对str进行操作呢：12345&gt;&gt;&gt; a = 'abc'&gt;&gt;&gt; a.replace('a', 'A')'Abc'&gt;&gt;&gt; a'abc' 虽然字符串有个replace()方法，也确实变出了’Abc’，但变量a最后仍是’abc’，应该怎么理解呢？我们先把代码改成下面这样：123456&gt;&gt;&gt; a = 'abc'&gt;&gt;&gt; b = a.replace('a', 'A')&gt;&gt;&gt; b'Abc'&gt;&gt;&gt; a'abc' 要始终牢记的是，a是变量，而‘abc’才是字符串对象！有些时候，我们经常说，对象a的内容是’abc’，但其实是指，a本身是一个变量，它指向的对象的内容才是’abc’： 当我们调用a.replace(‘a’, ‘A’)时，实际上调用方法replace是作用在字符串对象’abc’上的，而这个方法虽然名字叫replace，但却没有改变字符串’abc’的内容。相反，replace方法创建了一个新字符串’Abc’并返回，如果我们用变量b指向该新字符串，就容易理解了，变量a仍指向原有的字符串’abc’，但变量b却指向新字符串’Abc’了： 所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。 小结使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。tuple虽然是不变对象，但试试把(1, 2, 3)和(1, [2, 3])放入dict或set中，并解释结果。 函数我们知道圆的面积计算公式为：S = πr2当代码出现有规律的重复的时候，你就需要当心了，每次写3.14 x x不仅很麻烦，而且，如果要把3.14改成3.14159265359的时候，得全部替换。有了函数，我们就不再每次写s = 3.14 x x，而是写成更有意义的函数调用s = area_of_circle(x)，而函数area_of_circle本身只需要写一次，就可以多次调用。 抽象抽象是数学中非常常见的概念。举个例子：计算数列的和，比如：1 + 2 + 3 + … + 100，写起来十分不方便，于是数学家发明了求和符号∑，可以把1 + 2 + 3 + … + 100记作： $$\sum\limits_{n = 1}^{100} n $$ 这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。而且，这种抽象记法是可扩展的，比如： $$\sum\limits_{n = 1}^{100} n^2+1 $$ 还原成加法运算就变成了：(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + … + (100 x 100 + 1)可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。 调用函数官方文档：http://docs.python.org/3/library/functions.html#abs也可以在交互式命令行通过help(abs)查看abs函数的帮助信息。 调用函数的时候，如果传入的参数数量不对，会报TypeError的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个：1234&gt;&gt;&gt; abs(1, 2)Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: abs() takes exactly one argument (2 given) 如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError的错误，并且给出错误信息：str是错误的参数类型：1234&gt;&gt;&gt; abs('a')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: bad operand type for abs(): 'str' 而max函数max()可以接收任意多个参数，并返回最大的那个：1234&gt;&gt;&gt; max(1, 2)2&gt;&gt;&gt; max(2, 3, 1, -5)3 数据类型转换Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数：1234567891011121314&gt;&gt;&gt; int('123')123&gt;&gt;&gt; int(12.34)12&gt;&gt;&gt; float('12.34')12.34&gt;&gt;&gt; str(1.23)'1.23'&gt;&gt;&gt; str(100)'100'&gt;&gt;&gt; bool(1)True&gt;&gt;&gt; bool('')False 函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：123&gt;&gt;&gt; a = abs # 变量a指向abs函数&gt;&gt;&gt; a(-1) # 所以也可以通过a调用abs函数1 定义函数定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。我们以自定义一个求绝对值的my_abs函数为例：12345def my_abs(x): if x &gt;= 0: return x else: return -x 请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。 如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。 在Python交互环境中定义函数时，注意Python会出现…的提示。函数定义结束后需要按两次回车重新回到&gt;&gt;&gt;提示符下： 如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名） 空函数如果想定义一个什么事也不做的空函数，可以用pass语句：12def nop(): pass pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。pass还可以用在其他语句里，比如：12if age &gt;= 18: pass 缺少了pass，代码运行就会有语法错误。 参数检查调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError： 但是如果参数类型不对，Python解释器就无法帮我们检查。试试my_abs和内置函数abs的差别：123456789&gt;&gt;&gt; my_abs('A')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 2, in my_absTypeError: unorderable types: str() &gt;= int()&gt;&gt;&gt; abs('A')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: bad operand type for abs(): 'str' 当传入了不恰当的参数时，内置函数abs会检查出参数错误，而我们定义的my_abs没有参数检查，会导致if语句出错，出错信息和abs不一样。所以，这个函数定义不够完善。让我们修改一下my_abs的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数isinstance()实现：1234567def my_abs(x): if not isinstance(x, (int, float)): raise TypeError('bad operand type') if x &gt;= 0: return x else: return -x 添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：12345&gt;&gt;&gt; my_abs('A')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 3, in my_absTypeError: bad operand type 错误和异常处理将在后续讲到。 返回多个值比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：123456import math [导入math包]def move(x, y, step, angle=0): nx = x + step * math.cos(angle) ny = y - step * math.sin(angle) return nx, ny import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。然后，我们就可以同时获得返回值：12345678&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)&gt;&gt;&gt; print(x, y)151.96152422706632 70.0但其实这只是一种假象，Python函数返回的仍然是单一值：&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)&gt;&gt;&gt; print(r)(151.96152422706632, 70.0) 原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。 小结定义函数时，需要确定函数名和参数个数；如果有必要，可以先对参数的数据类型做检查；函数体内部可以用return随时返回函数结果；函数执行完毕也没有return语句时，自动return None。函数可以同时返回多个值，但其实就是一个tuple。 练习请定义一个函数quadratic(a, b, c)，接收3个参数，返回一元二次方程：ax2 + bx + c = 0的两个解。提示：计算平方根可以调用math.sqrt()函数：123&gt;&gt;&gt; import math&gt;&gt;&gt; math.sqrt(2)1.4142135623730951 例：12345678910111213141516if not ( isinstance(a,(int,float)) and isinstance(b,(int,float)) and isinstance(c,(int,float)) ): raise TypeError('Bad opearand type') if a==0: print("没有输入正确的参数,此方程为一元一次方程.") return dalta = b**2-4*a*c if dalta &lt; 0: print("没有实数解.") if dalta ==0: print("此方程只有一个解.") return ( -b/(2*a) ) if dalta &gt;0: ans1 = ( -b +dalta**0.5 )/( 2*a ) ans2 = ( -b -dalta**0.5 )/( 2*a ) return(ans1,ans2) 函数的参数http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000 递归函数在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。举个例子，我们来计算阶乘n! = 1 x 2 x 3 x … x n，用函数fact(n)表示，可以看出：fact(n) = n! = 1 x 2 x 3 x ... x (n-1) x n = (n-1)! x n = fact(n-1) x n所以，fact(n)可以表示为n x fact(n-1)，只有n=1时需要特殊处理。于是，fact(n)用递归的方式写出来就是：1234def fact(n): if n==1: return 1 return n * fact(n - 1) 如果我们计算fact(5)，可以根据函数定义看到计算过程如下：===&gt; fact(5)===&gt; 5 fact(4)===&gt; 5 (4 fact(3))===&gt; 5 (4 (3 fact(2)))===&gt; 5 (4 (3 (2 fact(1))))===&gt; 5 (4 (3 (2 1)))===&gt; 5 (4 (3 2))===&gt; 5 (4 6)===&gt; 5 24===&gt; 120 上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：1234567def fact(n): return fact_iter(n, 1)def fact_iter(num, product): if num == 1: return product return fact_iter(num - 1, num * product) 可以看到 return fact_iter(num - 1, num * product)仅返回递归函数本身，num - 1和num * product 在函数调用前就会被计算，不影响函数调用。fact(5)对应的fact_iter(5, 1)的调用如下：===&gt; fact_iter(5, 1)===&gt; fact_iter(4, 5)===&gt; fact_iter(3, 20)===&gt; fact_iter(2, 60)===&gt; fact_iter(1, 120)===&gt; 120 练习汉诺塔的移动可以用递归函数非常简单地实现。请编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如： 要理解递归首先你得理解递归。递归题就是找感觉，要有要把大象装冰箱总共分几步？这样的思维方式，一但去抠细节你就中计了。汉诺塔问题有三根柱子，我给它们分别命名为起始柱src，临时柱tmp，目的柱dst盘子一共分两种情况：1.只有1个盘子这种情况下，直接从起始柱src 移动到 目的柱dst ,完成任务。2.有1个以上的盘子假如有n个盘子在起始柱， 首先把第n个盘子上方的n-1个盘子搬到临时柱。 然后把第n个盘子从起始柱移动到目的柱 最后把n-1个盘子从临时柱搬到目的柱 任务完成知道这些就够了，千万别XJB去想细节！！！知道这些就够了，千万别XJB去想细节！！！知道这些就够了，千万别XJB去想细节！！！123456789101112def move(from,to): #将盘子从from移动到to，动画效果需要脑补 print(from,'-&gt;',to)def hanoi(n,src,tmp,dst):#将n个盘子从src搬到dst if n == 1: #只有一个盘子的情况 move(src,dst) else: #有一个以上盘子的情况 hanoi(n-1,src,dst,tmp) #将上方的n-1个盘子从src搬到tmp move(src,dst) #将第n个盘子从src轻松愉快地移动到dst hanoi(n-1,tmp,src,dst) #擦屁股，将tmp上的n-1个盘子搬到dst上hanoi(3,'A','B','C') 高级特性切片http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756919644a792ee4ead724ef7afab3f7f771b04f5000]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 硬件篇]]></title>
    <url>%2Fposts%2F37486%2F</url>
    <content type="text"><![CDATA[网卡学习鸟哥Linux，积累的一点点知识 内核捕捉到得网卡信息：确认内核捕捉到了网卡 ：dmesg |grep -in eth其他设备方法差不多。 查询设备芯片： lspci查看内核是否顺利加载：lsmod | grep &quot;对应模块号，比如e1000&quot;模块的相关信息可以用：modinfo &quot;对应模块号，比如e1000&quot;查看。 由于用的是阿里云服务器，虚拟的网卡，查不到具体模块号，图就不上了 如果网卡没有被捕捉到，但系统是支持的，在/etc/modprobe.d/下建立ether.conf文件：123456vim /etc/modprobe.d/ether.conf修改文件：alias(网卡名) eth0 e1000(模块号)alias(网卡名) eth1 e1000(模块号)sync; reboot 重启后ifconfig查看相关信息。 网络参数与配置文件对应关系 网络参数 主要配置文件 重要参数 IP NetmaskDHCPGateway等 /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=网卡名BOOTPROTO=是否dhcpHWADDR=IP地址NETMASK=子网掩码ONBOOT=是否默认启动此接口GATEWAY=网关NM_CONTROLLED=额外网管软件(不建议使用) 主机名 /etc/sysconfig/network NETWORKING=是否使用网络NETWORKING_IPV6=是否支持ipv6HOSTNAME=主机名 DNS IP /etc/resolv.conf Name Server DNS的IP地址 私有(公网)IP对应的主机名 /etc/hosts 私有主机名 别名 /etc/services/etc/services此文件记录了构建在TCP/IP上面的各种协议，包括HTTP、FTP、Telnet等，以及服务器所定义的端口，定义新端口也要修改此文件。 重启整个网络：1234/etc/init.d/network restart (或service network restart)(centos7以下) systemctl restart network(centos7以上) 开启关闭某个网络接口： ifup eth0 （ifdown eth0）(centos7以下) IP及子网划分把这部分归为硬件篇是因为比较少去使用，也没有单独开一篇网络。]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Linux 硬件篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创业手册]]></title>
    <url>%2Fposts%2F6179%2F</url>
    <content type="text"><![CDATA[我们花了很多时间在为创业团队提供建议。尽管一对一的建议会一直很重要，但是我们认为对广泛建议进行提炼，并提供给 YC 和 YC 旗下公司会有助于 YC 的成长。所以我们觉得我们需要把这些都公开给大家。 本剧本适合且只适合刚来到创业世界的人阅读。本剧本大部分内容对于已阅读过我们的合伙人所写的东西的人来说已不新鲜 — 本剧本的目的就是将内容做成合集。关于如何规模化一家创业公司的说明或许会有第二部分 — 但本剧本已基本覆盖了创业起步的部分。 作为一家创业公司，你的目标就是做一些用户喜欢的东西。如果你要做的话，接下来你还需要考虑如何得到更多用户。但是这第一部分是非常关键的 — 思考下今天非常成功的公司吧。他们都开始于一个非常受用户欢迎且用户自愿为其宣传的产品。如果你在这个部分失败了，你就永远失败了。如果你欺骗你自己，认为你的用户喜欢你的产品但实际上他们不喜欢，你仍然会失败。 创业公司坟墓里充斥着这类自认为他们可以跳过此步的人。 打造一个受一小群用户热爱的产品会比打造一个受很多用户喜欢（请注意”喜欢”与”热爱”的区别）的产品更好。尽管”一小群热爱”和”一大群喜欢”看起来的积极感觉一样多，但比起后者需要将用户从”喜欢”转化为”热爱”，前者获取更多用户会很简单。 如果要用一个词汇来警告一个准备创业的人：（你的产品）弱爆了！我们从 YC 创业者中收集到的最一致的一条反馈是，创业是他们无法想象的难，因为他们没有一个针对此工作和启动强度的框架。加入一家正在火箭飞船轨道上高速发展的创业公司是更为明智的选择。 在另一方面，实际上创建一个创业公司并不会对你的职业生涯产生很多威胁 — 如果你非常善于技术的话，失败了还会找到工作。大部分人非常不善于评估风险。我个人认为更为危险的是你有一个自己非常热衷的想法和产品，但你仍然待在一个安全，舒适，不过瘾的工作岗位上。 为了创业成功，你需要有：一个好想法（包括一个好市场），一个好团队，一个好产品，和强大的执行。 第一部分想法在 YC ，我们首先会问创业团队他们正在打造的产品以及其理由。对于这个问题我们期待清晰且简洁的答案。这将作为对创始人及其想法的评估。作为一个创始人，能够清晰地思考并交流是很重要的 — 对于招聘，融资，销售，等其他。想法在广义上需要可以清楚地表达并传播，复杂的想法常常是其混乱思维和虚构问题的表现。如果一个想法没能让第一次听到的人感到兴奋，这并不好。 我们问的另外一个问题是：谁迫切需要他们的产品。 最理想的情况是，你自己也是目标用户。其次的理想情况是，你对目标用户非常了解。 如果一个公司已经有用户了，我们会问其用户数量及其增长速度。我们会分析该产品为什么没有增长得更快，我们会着重搞清楚其用户是否真正热爱其产品。很多情况下是他们告诉他们的朋友去用这个产品，而不是公司推动其增长。我们还会问其公司是否已开始盈利，如果不，为什么？ 如果该公司还没有用户，我们会考虑搭建最小化的产品以便测试该想法—比如，如果我们从最佳用户体验的反方向入手，我们会先去做内核部分。 对想法进行测试的办法无非是先启动它并去看结果是什么，或者去贩卖它（比如：在你开始写代码前去获得一份用户意向书。）前者对了解用户想法更好（用户或许会告诉你他们将使用你的产品，但实际上并没有），后者对面向企业的想法更佳（如果一个公司告诉你他们会使用你的产品，那就去做吧。）特别的，如果你是一家面向企业的公司，我们会问你首要的问题就是，你有没有一个用户会买你正在打造的产品的意向或信息。对于大多数生物科技和硬件科技公司，他们检测想法的办法是先和潜在用户聊聊并试图找出可以做出第一代产品的最小集合。 让你的想法和你从用户得到的反馈一起成长是很重要的。你需要非常了解你的用户—这对于你评估一个想法，打造一个产品，和创办一个好公司至关重要。 正如前面提到的，创业是非常难的。它需要很长时间，及持续的异常的努力。创始人及其员工需要有共同的使命感去维系它。所以我们会问创始人为什么他要创办这个特别的公司。. 我们还会问该公司什么时候会形成垄断。关于这个问题有很多描述，但我们使用了 Peter Thiel 的词汇。显然，我们不希望你的公司通过不道德的手段攻击竞争对手。相反，我们会寻找那些在规模化更有力且难以被复制的公司。 最后，我们询问市场。市场今天有多大，市场增长得多快，以及为什么这个市场会在十年内具有大规模。我们试图搞清楚为什么这个市场在快速发展，以及为什么这是一个适合创业公司发展的市场。我们喜欢那种当主流技术正在发生变化但大部分人未察觉到的 — 大公司不擅长此道。还有一个与直觉相反的最佳答案是去切一个小蛋糕的大部分（而不是一个大蛋糕的小部分）。 与想法有关的其他思考： 比起一些衍生产品我们更喜欢新东西。很多大公司都开始于一些全新的东西（一个广被接受的关于”全新”的定义是 10 倍的好。）如果已经有 10 家其他公司在同一时间做同样的事情，这听起来像已存在的东西，我们对此怀疑态度。 一个违反直觉的原因是，做一些新东西比做衍生且简单的产品是更容易的。而且如果你是前者的话人们会帮助你；如果你是后者，他们不会帮助你。 好想法都是听起来很糟糕但实际上不错的。所以你不需要对你的想法过于保密 — 如果这确实是一个好想法，那它听起来不会像值得剽窃的想法。如果它听起来很值得剽窃，有好想法的人比将其执行并成立公司去实践的人多 1000 倍。如果你告诉别人你在做什么，人们或许会帮助你。 谈到告诉别人你的想法 — 尽管当人们第一次听到它时感到兴奋是很重要的，很大一部分人会说你的想法太烂了。或许他们是正确的，或许他们不擅长评估创业公司，又或者他们仅仅是嫉妒。不管原因如何，这种情况会时常发生，他会很伤害，或者尽管你认为自己不会受其影响，你仍然会。此时你越保持自信并不被其他人影响，你就越会保持好状态。不管你取得了多大的成功，喷子永远不会走开。 如果你没有想法但是想成立一个创业公司呢？你最好别。有了好想法后再通过创业公司让其传播到世界才是上策。 我们曾经尝试过一个实验，资助一些没有想法的初创团队，在一个他们在得到资助后着陆在一个有前途的想法上。 他们都失败了。我认为其一部分原因就是好的创始人倾向于有很多好想法（经常是过多了）。但你有一家创业公司后面临的更大的一个问题是，你需要赶快想出一个好想法，因为这已经是一家正式公司了，你的想法不能太疯狂。你最终获得一个貌似有理的但走歪的想法。这就是核心威胁。 因此，最好不要过于积极地强迫自己想出创业点子。相反，学习很多不同的东西。练习发现问题，那些似乎效率不高的事情，和重大技术转变。为你觉得有趣的项目工作。走出自己的方式去和聪明，有趣的人打交道。在某些时候，想法就出现了。 第二部分一个好团队平庸的团队建不成伟大的公司。我们看创始人最重要的一个事情就是其实力。当我做后期投资时，我同样看重创始人的雇员的实力。 什么让一个创始人伟大？最重要的特质就是永不止步，决心，坚韧性和智慧。智力与激情也是很重要的。这些特质都比经验和 “擅长 X 语言和 Y 框架” 更为重要。 我们发现最成功的创始人都是一些具有低应力处理事务的人，因为你会感觉到”不管这件事是什么，他 / 她将做成这件事。”有时你可以通过意志的纯粹力量取得成功。 好的创始人有一些看似矛盾的特质。一个重要的例子就是刚性和柔性。当创业涉及到几乎一切事情时，你需要保持对公司和它的使命的核心强烈信念，并依然非常灵活且愿意学习新的东西。 最好的创始人都异常敏捷。这是果断，专注，力度，并把事情做好的能力的一个指标。 不善言谈的创始人都很糟糕。沟通是一项创始人必备的技能 — 实际上，我认为这是最重要的且常被忽视的创始人技能。 科技创业公司必须至少有一个创办人可以建立公司的产品或服务，以及至少一个创始人（或可以成为）擅长销售和与用户沟通。这可以是同一个人。 当你在选择合伙人时请考虑这些标准 — 这将会是你做过最重要的决定，而且这一步经常会被做得很随意。你需要一个你非常了解的人，而不是你在合伙人聚会中刚遇到的一个人。你可以通过更多信息来评估你的合伙人，你不能走错这一步。同时，在某些时候，创业公司的期望值可能处于 X 坐标轴的下方。此时如果你和你的联合创始人预先存在联系，你们不能甩掉一个人并保持前行。联合创始人的关系破裂是一个早期创业团队死亡的最大原因，我们会常常看到联合创始人们抱着共同目的去成立一家创业公司。 目前为止最好的情况是，找一个好的联合创始人。其次的最佳做法是成为一个独立的创业者。目前最坏的情况是，找一个不好的联合创始人。如果事情没搞头了，你应该迅速分道扬镳。 一个关于净资产的简报：随着时间的推移，关于股权分配的话题并没有变简单 — 所以早点把它做好吧。平分是最好的选择，为了防止当两个创始人分离时造成死锁，有一个人多拿一份股权也是不错的选择。 第三部分一个好产品有一个好产品，这就是通往成功的秘密。这是所有伟大的公司仅有的唯一共同点。 如果你不去做一个你的用户会喜欢的东西你最终会失败。尽管创始人都去寻找其他技巧。但创业是你人生中唯一不需要寻找技巧的事情。 一个好产品是保持长期增长的唯一方法。最终你的公司会变很大以至于所有的增长黑技巧（Growth Hack）都不起作用，你需要借助那些期望用你的产品的用户来保持增长。这是关于超级成功的公司最重要的事情。别无他法。想一下所有非常成功的技术公司—他们都在做这件事。 你需要在你的公司里建立一个“产品改进引擎”。你应该和你的用户交谈，并观看他们使用你的产品，找出哪些部分是分杆，然后把你的产品做更好。然后再重复做一遍。这个周期应该是该公司的头号重点，它应该推动一切。如果你每周都能提高你的产品 5%，它就真的会复合。 这个周期的重复速率越快，公司通常就越好。在 YC，我们告诉创业者应除了吃，睡，运动，并花时间与他们的亲人外，要专注建立产品与用户交流。 要把这个周期做好，你还需与你的用户更进一步接触。甚至是观察用户使用你的产品。如果可以的话，请坐到他们的办公室。衡量他对你说的和他实际上在做的。你不应该在你和用户之间加入中间人，这个状态保持越久越好 — 这意味着创始人需要做销售，客服，等等。 尽全力搞懂你的用户。真正弄清楚他们需要什么，在哪里找到他们，以及他们在哪里感到不满。 “从小事做起（Do things that don’t scale）” 显然已成为了创业团队的口头禅。 通常你需要在一定时间招募种子用户（Ben Silbermann 过去常在咖啡馆邀请陌生人使用 Pinterest）然后打造一款他们需要的产品。很多创始人讨厌 这一步，然后仅仅想在媒体宣传其产品。但那常常不会成功。人工招募用户，然后去做一款你的种子用户会告诉他们朋友的好产品吧。 你还需要把东西分成小片，一边走一边重复和适应。不要尝试做很长期的计划，特别不要把成批的东西做一次公开发行。你需要从简单处着手 — 其表面积越小越好 — 然后将其更快地打造出来。实际上，简单永远是好的，你需要保持你的产品和公司尽可能简单。 我们都会问创业团队一些相同问题：用户使用你的产品超过一次了吗？你的用户对你的产品狂热吗？你的用户会在你的公司消失后变得很沮丧吗？你的用户会在不是你要求的情况下向别人推荐你的产品吗？如果你是 B2B 的公司，你有至少 10 家付费用户吗？ 如果没有，那这就是潜在的问题，然后我们会告诉该公司把产品做的更好。对于一家公司为何没在成长的原因我都持怀疑态度 — 因为大多数情况下真正的原因是他们的产品还不够好。 但如果初创团队不清楚他们接下来要对其产品干什么，或者他们的产品就是不够好，我们就派他们去找用户谈谈。虽然这也不是每次都会有效 — 人们会问福特寻求更快的马 — 但这种办法会常常惊人的有效。事实上，更普遍的是，在公司内有任何分歧时，请和你的用户谈谈。 最好的创始人都很关心产品质量，甚至是看似无关紧要的细节。但这看来是有效的办法。同时，“产品” 应包括所有与该公司的用户的交互。你需要提供优秀的支持，好的销售互动等。 请记住，如果你没有做出好产品，什么东西都救不了你。 第四部分好的执行尽管打造一款好产品是重要的，但这还不够。你还需要将其转变成一个好公司，你必须亲自去做 — 雇佣一个“经验丰富的经理”去帮你招聘这种很常见的行为是失败创业公司的墓地。在创业中很长一段时间内，你不能把招聘这个职位外包出去。 你还需要盈利，这听起来很明显。这时候你该考虑如何盈利了。 CEO 的唯一职位描述就是保证公司成功。作为 CEO 即使你有很多不足，你仍可以雇佣那些弥补你的不足的人才来让他们来把事情做好。有经验的 CEO 与一个理想的工商管理硕士可能会有技能的差距，但他/她也是不会理解用户，不会有和你相同的产品嗅觉，也并不会太在意产品。 成长增长和动力是伟大执行的关键。（只要不是 “以 90 美分的价格出售 1 美元”的）增长就解决了所有的问题，而缺乏增长的问题除了增长这个办法外无解的。如果你在增长，就会感觉到你在成功，大家都很高兴。如果你在增长，每个时间段都会有新的角色和责任，大家会觉得自己的事业正在进步。如果你不在增长，这感觉就像你失败了，大家不快乐并且离开。如果你不在增长，大家就只会推卸责任和抱怨了。 创业公司没有动力的话，创始人和雇员都会焦灼起来，很难形容的沮丧。 好的执行的首要方针就是“永不失去动力”。但是你该如何做到呢？ 最重要的办法就是让它成为你的首要任务。公司会按 CEO 去执行。为公司优化找到一个指标是很具价值的，也值得花时间去找到正确的增长指标。如果你关注增长，然后设定一个目标，公司其他人都会专注于该目标。 以下是一些例子。 Airbnb 的创办者构建了一个他们想达到的前瞻性图谱。他们把这个图谱挂到了所有地方 — 在他们的冰箱上，桌子上，卫生间镜子上。如果他们这周达到了目标，那很好，如果没有，他们就会一直对此进行研究。 Mark Zuckerberg 曾说道 Facebook 最重要的革新就是在增长缓慢时设立了一个增长团队。在其公司这一团队是（也许仍然是）一个最负盛名的团体—每个人都知道它是多么重要。 对增长不利的东西要记录下来。以公司的角度去讨论你如何可以增长得更快。如果你知道局限是什么，你自然需要思考如何解决它。 对于你准备去做的任何一件事，请问自己“这是优化增长的最佳做法吗？”比如，去参加一个会议并不是优化增长的最佳做法，除非你期望去那里销售你的产品。 透明公开的内部指标报表（包括财务状况）是一个很好的事情。因为某些原因，创始人总是很害怕这一点。但它是好的，可以让整个公司专注于增长。专注于指标的员工和他们目前做到的状况有直接联系。如果你隐藏了这些标准，人们很难集中在他们身上。 关于指标，请勿欺骗自己设定虚高的指标。这里常见的问题就是专注于注册量而忽视了留存。而对于增长，留存是和获取新用户同样重要的。 建立一个内部节奏去保持动力也是很重要的。你的增长过程需要一个“律动” — 新功能，客户，新员工，盈利里程碑，合作伙伴，等等其他需要内部和外部去发布的。 你应该设定富有野心的但大体可以实现的指标，并每个月审查进度。庆祝成功吧！保持将策略告诉内部人员，告诉每个员工你从客户那里听到的东西，等等。你在内部越分享更多 — 包括好消息和坏消息 — 你的公司就会越好。 这里有几个创始人经常陷入的陷阱。其中一个就是如果公司疯狂成长但一切都看起来难以置信的破败和低效率，大家都担心其破碎。在实践中，这似乎很少发生（我可以指出 Friendster 是一个最近因为技术债务而死亡的创业公司。）相反，如果你增长很快但其他事情没有优化，这其实是很好的事情 — 你需要做的就是解决它以得到更快的增长！我最喜欢投资那些增长很快但未做优化的公司 — 他们都被严重低估了。 另一个相关的陷阱就是有关长期问题—比如“我们在规模大后该怎么办？”答案就是等你先把规模做大后再考虑这个问题吧。很多创业公司在考虑这个问题时死掉了，因为他们没有想通。一个好经验就是只考虑比目前 10 倍规模大的情况。大多数早期创业团队都应该把“从小事做起”贴到他们的墙上并执行它。比如，好的创业公司常常在早期做很好的客户服务，不好的公司则担心这些小钱不够多（而不做）。但是好的客户服务会让种子用户充满惊喜，随着产品越来越好你需要减少客服工作，因为你已经知道客户纠结的东西并对此提高了产品/体验。（顺便强调下，这是个很好的例子 —去做好客服工作） 关于 “从小事做起” 这里有个很大的误区 — 这不应该成为你最终不去盈利的借口。在早期有差点的单元经济是允许的，但你在后期如果还没做好盈利的话，你最好去找个好点的理由吧。 另外一个陷阱是在增长绝对数值变坏时（尽管在比例上看起来还好）变得沮丧。对于指数增长，人类的直觉很不擅长。请提醒你的团队，所有的大公司都增长自一个小团队。 一些最大的陷阱是创始人相信会带来增长，但在实践中长时间几乎从不。常见的例子是处理其他公司和“大型新闻发布会”。小心这些，并了解他们实际上从未有效。相反，所有的大公司都通过 — 打造一个用户喜爱的产品，在起初亲自招募用户，然后测试大量的增长策略（广告，引荐计划，销售和营销等），并做更多的工作。问你的客户在哪里找到更多的类似你的用户的人。 请记住销售和市场营销不是差的词汇。尽管如果你没有一个伟大的产品，他们也不会拯救你，但他们可以帮助加速增长。如果你是一个面向企业的公司，那这是你的公司必备的。 特别是不要害怕去销售。创始人中至少要有一个擅长邀请人们使用你的产品并付费的人。 Alex Schultz 有一个关于消费产品增长的很值得观看的讲座。 对于 B2B 产品，我认为正确的答案就是一直跟踪每月的收入增长，并记住更长的销售周期意味着前几个月的数据不会好看的（虽然有时向创业公司销售，使其作为种子用户可以解决这个问题）。 专注 &amp; 强度如果我必须把我的建议提炼成两个词，我会挑专注和力度。这些词汇似乎真的匹配于我所认识的最优秀的创始人。 他们不屈地专注于他们的产品和增长。事实上，他们不想做其他任何事情，他们说很多“不”（这是很难的，因为存在很多刚开始创业的人喜欢做新的事情。） 一个通用规则是，在你控制好了第一件事之前不要让你的公司开始做下一件事。我认识的好公司没有同时开始做很多事的，他们要确认才去做，并一直做好。你可以做的事情比你想象的要少得多。一个非常常见的创业公司死亡的原因是做太多错误的事情。优先次序是关键且困难的。（同样重要的是要确定公司的优先顺序是设置你自己的战术优先级。我发现最适合我的是一张笔记的清单，每天少于 3 个的主要任务和少于 30 个的小任务，还有一张年度的总体目标的工作清单。） 虽然伟大的创始人不做很多大的项目，他们要做就做到极致。他们把事情做得很快。这是是决定性的，但你有一家创业公司时这是很难的 — 你会得到很多矛盾的意见，这都是因为做一件事有多种方式，且因为存在很多不好的建议。好的创始人听取所有的建议，然后迅速作出自己的决定。 . 请注意，这并不意味着做任何事情都要做到极致—这是很重要的一点。你必须选择去做正确的事情。Paul Buchheit 说过，要去找到用 10% 的努力得到 90% 价值的方法。市场不在乎你工作如何努力 — 只在乎你是否做了正确的事情。 同时专注于产品质量和快速行动很难。但能做到这些就是好的创始人。 我从未见过一个行动缓慢的创始人真正成功过。你和其他创业公司都一样。你也需要保持专注和快速行动。那些建造火箭和核反应堆的公司都致力于此。所有失败的公司都有个糟糕的理由解释其为何不一样且不需要快速行动。 但你发现某件事有效时，保持前行。不要被其他事情分心。不要关闭脚下的喷气机。 不要沉沦于早期的成功，你还没有一个很有前途的开始，如通过大量的网络事件，并在大量的网站上发言。初步成功的创业者们面临一个选择：要么一直在做他们正在做的事情，要么他们开始花很多时间考虑自己的 “个人品牌” 和享受成为创始人的状态。 拒绝会议和新闻发布会是很难的 — 他们感觉良好，在你的空间看到其他创始人受关注也是令人不爽的。但这不会持续很长时间。最终，新闻界人士会看出谁是胜者，如果你的公司是真正成功的话，你会得到你想不到的更多关注。极端的情况是，早期创始人带着自己的公关团队 — 他们认为在电视上看的在现实中也是一样的，然后他们大部分都失败了。 专注和强度在长跑中会赢得胜利。（Charlie Rose 曾说过结合专注和个人联系就能把事情做成，这句话一直伴随着我。） CEO的工作我之前提到的 CEO 的唯一普遍的工作描述是确保公司成功。虽然这是真的，我还想谈一点特别是关于 CEO 应如何花他/她的时间。 一个 CEO 需要:1）设定公司的愿景和战略，2）向公司的每一个人布道，3）招募和管理团队，尤其是在你自己不擅长的领域里，4）筹集资金，确保公司不缺钱，5）设置执行质量标准， 除此之外，找到你最喜爱的部分，并坚持在那里。 正如我在开始时提到的，这是一个强度很高的工作。如果你成功了，它会把你的生活带到一个你想象不到的程度，这个公司会一直在你的脑海里。极致的专注和极高的强度意味着它不是平衡工作和生活的最佳选择。你还可以有一个很大的选择 — 你的家人，参加很多的比赛，等等 — 或另一个并没有那么丰富的生活。还有很多选择只有你自己可以做出决定，你会一直在做选择，不论你在委派方面做得多好。 你的目标应该是超级响应你的团队和世界，要很清楚地知道战略和事件优先级别，出席一切重要的事情，并快速执行（特别是当其阻止到其他选择时。）你也应该采取一种“不惜一切代价”的态度 — 仍会有讨厌的笨蛋。如果团队看到你在做这些事情，他们也会这样做。 管理自己的心理是非常困难且重要的。这一点已经成为老生常谈，但它是正确的—情感的高点和低点都是非常激烈的，如果你不知道如何在其中保持一定水平，你就会纠结。当 CEO 是孤独的。重要的是在一切都融化时，可以与其他 CEO 打电话（YC 的一个重要的意外发明是有一个让创始人找同伴的方式。） 一个成功的创业需要很长的时间，当然比大多数创业者在一开始设想的要长得多。你不能把它当作一个通宵。你必须吃好，睡好，并锻炼身体。你得花时间和你的家人和朋友在一起。你还需要在一个你真正充满激情的领域工作，除了这些，没有其他东西能够长期支持你。 所有的一切都会感觉破碎，多样和规模不一的灾难会让你惊讶。你的工作是用你的微笑来解决他们，让你的团队放心，一切都会好的。通常事情并不像他们看起来那么坏，但有时他们实际上是真的坏了。在任何情况下，只要继续走，不断成长。 CEO 不找借口。很多不好和不公正的事情会发生。但是不要去说，当然更不要对团队说，“如果我们有更多的钱的话” 或 “如果我们有另一个工程师的话”。要么找出一个使这发生的方法，要么找出没有它的方法。那些让自己制造很多借口的人和创业公司的 CEO 们几乎总是失败。让自己在不公正中感到 1 分钟的不安即可，然后要清楚，想出一个解决办法这取决于你。努力做到让人们在谈论你时说：“ X 总是能把事情搞定” 。 非初次创业的创业者知道他/她们在做什么。在你位置联系他们，并寻求帮助，你会变更好。如何成为一个好的领导者和管理者是值得投资去学习的。做这件事的最好方法是找一个导师 — 读书似乎不那么有效。 在 YC 我们数量惊人的建议就是 “去问他们” 或 “想做就做吧” 。初次创业者都认为在你需要寻求某人一件事或想做一件新的事情时有秘诀。但我需要重复下，创业时，所有的秘诀都不生效了。你仅需保持直接，自愿去请求就好，但不要成为一个讨厌鬼。. 扭曲他人的现实但不是你自己的现实也是很重要的。你需要说服别人你的公司是注定成为这个年代最重要的创业公司，但你还需要对任何可能出错的事情保持怀疑。 持久。大多数创始人放弃得太快了或转移到下一个产品太快了。如果事情进展得不好，找出问题的根源是什么，确保你得到答案。作为一个成功创业公司 CEO 的一个巨大的特质就是是不放弃（虽然你不想固执于其他原因，这是另一个明显的矛盾，和一个要作出的艰难的判断。） 乐观。虽然在世界某处可能有一个伟大且悲观的 CEO ，但我还没有见过他/她。相信未来会更好，公司将更好地在未来发挥重要的作用，这些对 CEO 和其他被影响的公司是重要的。这在理论上很容易，在短期的现实挑战中缺很难。不要忽视了长期的愿景，并相信每天的挑战将被遗忘，取而代之的是一年一年的进步。 你的工作中定义任务和定义指标是最重要的。这可能有点奇怪，但它是值得早点去做的。无论你在什么时候开始还是在几年之后，随着你的成长，每一个新人都需要先植入公司的使命和价值然后再传播给他人。因此尽早写下你的价值观和使命。 另一个我认为值得重复的陈词滥调是：建立一个公司有点像建立一种宗教。如果人们不把他们的日常生活和他们所关心的更高的目标联系起来，他们就不会做好工作。我认为在 YC 中 Airbnb 在这方面做得最好，我强烈推荐看看他们的文化价值观。 一个 CEO 常见的错误就是致力于商业常见领域而不是在新产品和新方案上。比如，很多创始人认为他们需要在 人力资源，市场，财务，融资，公关等其他事情上寻找新方法。这常常是不好的。在已有事务中工作，把你的创造力用在你正在打造的产品和服务上。 招聘 &amp; 管理招聘是你最重要的工作也是你打造一个成功公司的关键（和打造一个好产品相对。） 我的第一条建议是不要做它。我们在 YC 最成功的公司都是等了比较长的时间后才开始招聘的。员工很贵。员工增加组织的复杂性和沟通开销。你有可以和联合创始人讲但不能和同一间房的员工讲的话。员工也增加了惯性，团队成员越多，在改变方向时难度越（指数级别的）高。抵制从你的雇员人数中获得自我价值的冲动。 最好的人才都有很多机会。他们希望加入一家火箭般的公司。如果你什么都没有，招募他们是很难的。一旦你明显成功了，他们都会来加入你。 值得重复提的是，好人才都有很多选择，你需要好人才来建立一个伟大的公司。要具有很大的公平、信任和责任心。愿意去寻求你认为你不可能得到的人。请记住，你想雇用的人要是那种如果他们想，就可以开始他们自己的公司的人。 当你在招聘模式（即，当你把产品-市场形态为 T-infinity），你应该花你的 25% 的时间在招聘上。至少有一个创始人，通常是 CEO 需要擅长招聘。这是大多数 CEO 的首要任务。每个人都说，CEO 们应该在招聘上花很多时间，但在实践中，只有最好的 CEO 才去做。这里或许有些蹊跷。 不要对你雇佣的人的品质做出妥协。每个人都知道这一点，然而，每个人都会在某些时候对这一点做出绝望的让步。每个人都会后悔，有时甚至会把公司杀死。好的和坏的人都有传染性的，如果你开始与平庸的人，平均值常常不会提高。公司开始与平庸的早期员工几乎从未恢复。相信你的直觉。如果你有疑问，那么答案是否定的。 不要雇佣长期消极的人。他们不适合早期的创业公司 — 世界其他的人每天都会预测你的死亡，公司需要在其内部团结起来，从信念到矛盾。 在任何角色中用态度而不是经验去评估。寻找原认知和把事情搞定的记录。寻找那些你喜欢的人才 — 你需要花费很多时间并陷入紧张的情况。对于你已经认识的人，在他们全职加入前先尝试在一个项目中共同工作。 投资成为一个好管理者，这对于大多数创业者是很难的，它绝对是违反直觉的，但做得这点很重要。找到可以帮助你的导师，如果你不擅长这一点，你会迅速失去员工，如果你不挽留员工，即使你成为世界上最好的招聘官也不重要了。作为一个好管理者的大部分原则都被很好说明过了，但我从来没有讨论的问题是“不要进入英雄模式”。大多数的初次管理者都会在某个时候把变成这种模式受害者，并试着自己做所有的事情，并成为他们的工作人员触不可及的。它通常结束于一次崩溃。请抵制一切切换到这种模式的诱惑，并愿意在项目后期有一个运作良好的团队。 说到管理，争取做到把每个人都弄到同一间办公室。由于某些原因，初创公司总是妥协于此。但几乎所有的最成功的初创公司开始于聚集在一起。我认为远程工作对大公司来说是很好的，但它并不是一个创业公司大范围成功的秘诀。 最后，辞退要快。每个人都知道这个原则，但没有人去做。但我觉得我应该说出来。同样，开除那些那些对文化有毒害的人，不管他们做什么，他们都是多么的好。文化是你雇佣、开除、提升人中定义的。 . 我就此写了一篇详细的博客。 竞争对手关于竞争对手的一个快速的词：竞争对手是一个创业公司的鬼故事。初次创业者认为他们会杀死 99% 的创业者，但 99% 的创业者死于自杀，而不是谋杀。去考虑你的内部问题吧。如果你失败了，很可能是因为你没能成功地制造一个伟大的产品和/或未能建立一个伟大的公司。99% 的时候，你应该忽略竞争对手。特别是当他们在报纸中筹集了大量的钱或是制造很多噪音的时候。不要担心一个竞争对手，直到他们交付出一个真正的，跨时代的产品。新闻稿比代码更容易编写，比制作一个伟大的产品更容易。Henry Ford 说过：“竞争对手害怕的人永远是不在乎其他的一切，且依旧在做更好的生意的人。” 每一个大公司在规模小的时候，都面临比你现在面临的更糟糕的竞争威胁，他们都走了出来。万事总有一个对策。 盈利哦对了，盈利。你需要搞清楚如何做到它。 一个简短版本是你需要让人们在你交付产品/服务中成本越高时付更多钱。因为一些原因，大家总是忘了如何把交付成本计算到账本里。 如果你有一个免费的产品，不要打算购买用户。这对广告支持的企业真的很难。你需要让一些人与他们的朋友分享。 如果你有一个低于1000美元的客户终身价值（LTV）的付费产品，你通常不要去销售。尝试不同的用户获取方法如 SEO / SEM，广告，邮件，等等，但要在 3 个月偿还你的客户获取成本（CAC）。如果你有一个超过1000美元的 LTV（净给你）付费产品，你也许可以直接销售，如果你的产品好卖。但除非你的 LTV 是 5000 美元或更高，它可能无效。试着通过推销自己的产品学习什么是有效的。销售黑技巧是一本有用的书。 在任何情况下，试着去做到 “拉面盈利” — 即，赚的钱可以维持创始人吃拉面即可。当你来到这一步，你可以控制自己的命运，不在受到来自投资者和金融市场波动的影响。 观察你的现金流。虽然这听起来令人难以置信，但我们已经看到很多创始人在没有意识到的情况下，钱花完了(然后 阅读 Paul Graham 的文章). 融资大多数初创公司在某个时候筹集资金。 你应该在你需要的时候，或是在条件成熟时筹集资金。要小心，不要失去你的节俭或开始扔钱去解决问题。没有足够的钱可能是坏的，但有太多的钱几乎总是坏的。 成功筹集到资金的秘诀是成为一个好的公司。所有其他的东西的创始人做了尝试优化的过程可能只占到 5% 的重要性。投资者寻找的是不论他们是否投资都会很成功的，但在得到外部资金会成长得更快的公司。“真正成功”这部分是重要的，因为巨大成功才会使得投资者得到回报，如果投资者相信你有 100% 的机会创造一个价值 1000 万美元的公司，但几乎没有机会建立一个更大的公司，他/她仍然可能不会投资，即使在估值非常低的情况下。所以要一直去解释为什么你的公司会是一个巨大的成功。 投资者在错过下一个谷歌和在回想起来显然是愚蠢的东西上浪费钱的双重担心下所驱动（对于最好的公司，他们两者都担心。） 如果你的公司不足以吸引资金就去融资，这不是一个好主意。你会抹黑名誉和并浪费时间。 如果你在努力筹集资金，不要让情绪低落下去。很多优秀的公司都纠结于此，因为最好的公司在开始时看起来很糟糕（而且他们几乎总是看起来过时了。）当投资者告诉你没有，请记住“不”但别记住原因。同时请记住所有的“可以”都意味着“不”—投资人擅长用 “或许可以” 来表达 “不”。 在融资对话中平等是很重要的 — 你不要去把你最喜欢的投资者列在名单上。让投资者采取行动的方法是担心其他投资者会抢走他们的机会。 把融资看成是一种必要的邪恶，并尽可能迅速地完成这些事。有些创始人爱上融资，这是不好的。最好是有一个创始人这样做，以便公司不停顿下来。 记住，大多数风投不了解很多行业。指标总是最有说服力的。 不幸的是，大多数投资者（Y Combinator 是一个显著的例外）还需要通过你们都认识的人的引荐后才把你当回事，这种模式将开始变化。. 坚持干净的条款（复杂的条款在每一轮融资后会更糟糕），但不要过度优化，特别是在估值上。估值是一种定量的竞争，所以创始人爱竞争最高估值。但中间估值不重要。 第一次检查是最难得到的，所以集中精力去获取，这通常意味着你的注意力集中在谁最喜欢的人身上。总是常备多个计划，其中一个就是不融资，并且依据利息灵活的，如果你能把更多的钱更良好地利用，并且在其合理范围内，请保持开放心态去谈论这个。 擅长 pitching 的一个重要关键是让你的故事尽可能清晰易懂。当然，最重要的关键是要有一个好的公司。有包括在 pitch 上有很多需要注意的，但至少你要有：使命，痛点，产品/服务，商业模式，团队，市场和市场增长率，财务。 请记住，每一轮的资金的指标会越来越高。如果你只是为你的种子轮做一个引人注目的演示，不要惊讶于你的A轮。 好的投资者真的做了大量的增值。坏的投资者会有损。大多数投资者陷在中间，既不增加也不减少。一个只投资小数额的投资者通常不会为你做任何事情（例如，请注意排队轮）。 伟大的董事会成员是除了用户外对公司最佳的外部驱动力，外部驱动力具有大多数创始人想不到的价值。请愿意接受较低的估值，以获得一个伟大的愿意参与董事会成员。 我认为 这篇由 Paul Graham 写的文章 是最好的关于融资的文章。作为一个战术点，你通常需要成为一个特拉华的 C 类公司，以提高机构的资本，所以最好是组成那样的。 结语请记住每个好想法都至少有一千人拥有。他们其中一个会成功。区别就是执行。这是一个磨练，每个人都希望有其他别的将想法变成功的办法，但是他们至今没找到。所以你需要的就是一个好想法，一个好产品，一个好团队，一个好执行。就是这么简单！; ) 感谢 Paul Buchheit, Erica Carpenter, Brian Chesky, Adam D’Angelo, Paul Graham, Drew Houston, Justin Kan, Matt Krisiloff, Aaron Levie, Gabriel Leydon, Jessica Livingston, Dustin Moskovitz, David Rusenko 和 Colleen Taylor 贡献了主意。 作者：Sam Altman原文链接：http://playbook.samaltman.com/ 这田舍君的一篇博文，觉得还不错，原地址：创业手册]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>创业手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native]]></title>
    <url>%2Fposts%2F55168%2F</url>
    <content type="text"><![CDATA[React Native开发环境搭建找Hexo的问题时，无意间看到一篇关于React Native的博文，想起一次源创会上有以为大牛讲过React Native。React Native是使用javascript编写移动跨平台原生app的框架, Facebook已经在多项产品中使用了React Native，并且将持续地投入建设React Native。 官网：搭建开发环境 Mac快速构件运行app安装依赖环境123brew install nodebrew install watchman(sudo) npm install -g react-native-cli 生成项目1react-native init demo 构件运行1react-native run-ios 调试技巧执行上面命令后, 会自动启动模拟器, ctrl+command+z 可以调出调试菜单. Reload 刷新app页面,让js代码的更改立刻生效, Enable Remote JS Debugging 调出Chrome开发者工具, 可以看到异常, 打印日志, 使用debugger断点.12console.log('something');debugger; 打包发布android生成离线包1react-native bundle --platform android --entry-file index.android.js --bundle-output ./bundles/index.android.bundle --dev false 配置签名 生成apk：cd android &amp;&amp; ./gradlew installRelease ios生成离线包1react-native bundle --platform ios --entry-file index.ios.js --bundle-output ./bundles/index.ios.bundle --dev false 原生代码中使用离线包 使用xcode生成ipa 原文：react-native极简教程 Windows参考官网：http://reactnative.cn/docs/0.39/getting-started.html#content Linux参考官网：http://reactnative.cn/docs/0.39/getting-started.html#content —未完成—]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>React Native</tag>
        <tag>构建原生APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客中插入音乐_视频]]></title>
    <url>%2Fposts%2F27125%2F</url>
    <content type="text"><![CDATA[本文是参考Raintons的博文写的。感谢Raintons的文章。 Markdown 通用插入方法Markdown 作为轻量级的标记语言，兼容 html 语法，可以直接在 Markdown 文档中使用 html 语法。大部分音乐、视频网站都可以直接生成播放器代码(尽量用直接生成的代码)，直接粘贴到 Markdown 文档中即可。有些标签不支持 https，尽量选支持https的网站，因为https网站加载http资源会被屏蔽掉，简单的在http地址后加个s测试即可知道是否支持https 。 Html居中代码：&lt;center&gt;我是内容，替换我&lt;/center&gt;或&lt;blockquote class=&quot;blockquote-center&quot;&gt;我是内容，替换我&lt;/blockquote&gt; 视频：123&lt;video width="480" height="320" controls&gt;&lt;source src="movie.mp4"&gt;&lt;/video&gt; 经测试不支持内嵌优酷之类的flash播放，src后面的地址要指向视频文件。width和height最好填写好对应视频的大小，不然周围有边框不好看。视频居中要用&lt;blockquote class=&quot;blockquote-center&quot;&gt;我是内容，替换我&lt;/blockquote&gt;才行。下面给大家放女票的可爱小短片，希望不要打我(=^ ^=) 网站生成代码，点分享即可生成播放代码。 来两段B站小仙女微小微的舞蹈，不谢。 HTML Flash 音频：音频分享和视频分享是一样的，也能生成外链播放器代码（有多种标签自由选择），只有网易云音乐是单独有生成按钮的。 dplayer插件插入安装两款插件基于 DIYgod 编写的 html5 播放器 APlayer 和 DPlayer 开发。 首先安装两款插件12npm install hexo-tag-dplayer --savenpm install hexo-tag-aplayer --save 安装到最后 npm 可能会报错，忽视即可。 安装成功后，在 Markdown 文档中添加 APlayer 和 DPlayer 标签即可,比如添加如下代码使用 APlayer 和 DPlayer(此处无耻的copy代码)：12&#123;% aplayer "Caffeine" "Jeff Williams" "http://7xq131.com1.z0.glb.clouddn.com/Preparation.mp3" "autoplay" %&#125;&#123;% dplayer "url=http://devtest.qiniudn.com/若能绽放光芒.mp4" "api=http://dplayer.daoapp.io" "pic=http://devtest.qiniudn.com/若能绽放光芒.png" "id=9E2E3368B56CDBB4" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %&#125; hexo s时如果报错，看看报什么错，报找不到目录或找不到文件错误就按提示创建目录或文件（文件内容可以为空，但必须存在该文件） 音频参考：https://github.com/DIYgod/APlayerhttps://github.com/grzhan/hexo-tag-aplayer#upstream-issue var aplayer0 = new APlayer({element: document.getElementById("aplayer0"),narrow: false,autoplay: false,showlrc: 0,music : {title: "Apple Stone",author: "Lost",url: "autoplay",pic: ":music=http://ofyfogrgx.bkt.clouddn.com//blog/Apple%20&%20Stone%20-%20Lost.mp3"}});aplayer0.init(); 视频：参考：https://github.com/NextMoe/hexo-tag-dplayerhttps://github.com/DIYgod/DPlayer var dplayer0 = new DPlayer({"element":document.getElementById("dplayer0"),"autoplay":false,"theme":"#FADFA3","loop":true,"video":{"url":"http://devtest.qiniudn.com/若能绽放光芒.mp4","pic":"http://devtest.qiniudn.com/若能绽放光芒.png"},"danmaku":{"api":"http://dplayer.donot.help/dplayerpy","id":"2622668","addition":["https://dplayer.daoapp.io/bilibili?aid=4157142"]}}); HTML标签和dplayer对比 项目 使用难度 是否支持https 是否使用html5 插入html语言 小 大部分不支持 大部分使用Flash 使用Hexo插件 中等 支持 使用html5 此功能太实用了，看了Raintons的博文不禁心动，自己尝试了一番，感觉甚好，原文地址：http://login926.top/2016/07/20/HexoMedia/]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>博客中插入音乐_视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[群晖DSM_Synology]]></title>
    <url>%2Fposts%2F26301%2F</url>
    <content type="text"><![CDATA[群晖官网：https://www.synology.cn开发者专区：https://www.synology.cn/zh-cn/support/developer开源项目：https://sourceforge.net/u/synology/profile/CPU信息查询：https://www.synology.com/en-global/knowledgebase/DSM/tutorial/General/What_kind_of_CPU_does_my_NAS_have群晖中文论坛：https://forum.synology.com/cht/群晖英文论坛（内容更全面）：https://forum.synology.com/enu/index.php 第三方套件地址：http://www.gebi1.com/thread-84115-1-1.html?_dsign=b839635c原文：http://xpenology.com/forum/viewtopic.php?f=2&amp;t=2994 黑群晖一般都是黑群晖的型号都为DS3615xs(高配置)，这样才能适应不同硬件环境。在虚拟机中安装可以设置硬件，很容易洗白；一般家用都是用低配机子安装，这里主要是实体机安装。 如果是虚拟机安装可以用VMware、EXSI、Virtual（VirtualDSM）或者Docker（Docker版的群晖） 黑群晖中引导是很重要的。引导有Nanoboot、gnoboot和XPEnoboot（xpenology）建议用XPEnoboot，支持的主板多，更新快。 黑群晖所需工具下载引导下载：xpenology nanoboot写U盘引导工具：win32diskimager或Roadkil DiskImage或USBImageTool_v1.66汉化版代码编辑工具：Notepad++或sublimetext启动测试：Qemu启动测试器 虚拟机可能会用到的镜像转换工具，img-虚拟磁盘格式互转：StarWind Converter 黑群晖DSM_5.2引导下载：xpenology官网5.2_5592是比较新的版本，也相对稳定一些，5.2_5644和5.2_5967也是可以的。用写U盘引导工具，把下载的img镜像文件用工具写进U盘中（U盘数据全无，做好备份），写好后重插U盘，U盘空间显示很小，其他空间被屏蔽掉了。用Qemu启动测试器测试一下能否启动，正常就插入主机设置U盘启动（事先没有设置好的要接显示器）。 选择机型是DS3615xs的官网下载DSM系统：DS3615xs下载PAT文件。历史版本：http://cndl.synology.cn/download/DSM/release 开始安装：如果局域网内只有少量待安装的机子直接浏览器输入：http://find.synology.com 即可直接跳转到安装界面（对于黑群晖，用的sn码如果网上有人使用了，可能看到的是别人的机子）。如果你知道机子分配的IP地址也可以输入：http://IP:5000 当然也可以用群晖官方的管理工具：群晖助手Synology AssistantwindowsmacUbuntu 黑群晖DSM_6.0引导下载：DS3615xs 6.0.2 Jun’s Mod V1.01或Jun’s的网盘此压缩文件包含了img引导文件和VMware虚拟机配置文件（支持6.0.2_8451），虚拟机配置文件点开即可使用（自己设置网卡桥接并添加硬盘（设置为SATA接口），硬盘空间小于5G无法安装）。img镜像刻录到U盘后是GPT+BIOS/UEFI格式的分区，太老的主板可能无法识别到分区。VBox,需要同时开启两张网卡（都用桥接模式），第二张网卡才能通过路由获得IP。这是VBox一点点小问题。 DSM6.0以上的黑群晖，引导分区和以前不一样，在制作镜像之后，洗白时不能直接给ESP分区分配盘符，这样修改之后的启动盘是无法启动的，最好用DiskGenius直接浏览文件，把gurb.cfg文件拷贝到电脑上，修改后直接拖回去替换掉 用写U盘引导工具，把下载的img镜像文件用工具写进U盘中（U盘数据全无，做好备份），写好后重插U盘，U盘空间显示很小，其他空间被屏蔽掉了。用Qemu启动测试器测试一下能否启动，正常就插入主机设置U盘启动（事先没有设置好的要接显示器）。 选择机型是DS3615xs的官网下载DSM系统：DS3615xs下载PAT文件。历史版本：http://cndl.synology.cn/download/DSM/release 开始安装：如果局域网内只有少量待安装的机子直接浏览器输入：http://find.synology.com 即可直接跳转到安装界面（对于黑群晖，用的sn码如果网上有人使用了，可能看到的是别人的机子）。如果你知道机子分配的IP地址也可以输入：http://IP:5000 当然也可以用群晖官方的管理工具：群晖助手Synology Assistantwindows | mac | Ubuntu 新的6.0设定好mac,sn,vid,pid和老的5.2系统一样的话，可以无损数据直接从5.2升级到6.0；个人不建议，有时会出现数据升天的情况。那就有的玩咯，建议全新安装。附升级教程原文：Migrate from DSM 5.2 to 6.0 - Baremetal 黑群晖DSM_6.1这次的6.1依然是大神Jun’s发布的，简单方便。引导下载：DS3615xs 6.1 Jun’s Mod V1.02-alpha系统下载：DSM_DS3615xs_15047 操作和6.0是完全一样的，注意不管是虚拟机还是真机，硬盘要选SATA，不然是识别不了的。如果是VBox,需要同时开启两张网卡（都用桥接模式），第二张网卡才能通过路由获得IP。这是VBox一点点小问题。遇到无法导入的虚拟机直接复制synoboot.img，synoboot.vmdk这两个启动文件添加磁盘就行了。 DSM6.0以上的黑群晖，引导分区和以前不一样，在制作镜像之后，洗白时不能直接给ESP分区分配盘符，这样修改之后的启动盘是无法启动的，最好用DiskGenius直接浏览文件，把gurb.cfg文件拷贝到电脑上，修改后直接拖回去替换掉 注意：全新安装是完全没有问题的，但是从6.0升级到6.1会有各种各样的问题，也可能导致数据丢失，建议全新安装；以下提供一种网传的方法，据说是不损数据。 1，做好6.1的U盘启动盘 2，把6.0的启动盘上的gurb.cfg文件拷到6.1启动盘上覆盖。 3，格式化硬盘前的那个2.4G左右的Linux分区（注意，不是删掉，或者新建，不要破坏现在的分区表，只是单纯格式化那个分区为ntfs,fat之类的格式，目的是破坏群晖的系统文件） 4，插入6.1启动盘启动，会提示数据损毁，迁移安装什么的，然后安装就行了，数据是无损的。但还是强烈建议大家备份。 配置设置技巧以下软硬件配置都是本人实验过的，确实可行，偶尔经常断线，不稳定，报错等，首先检查是不是用的大天朝的长城宽带，如果是，那么恭喜你，很可能是NAT3，连DDNS都没法用，更别说其他什么服务了，鼓励你去申请IP；另外检查你的路由是不是那种多登陆几次就打不开路由管理界面的那种路由，例如K1、K2、newifi（官方固件）等换路由，果断或其他路由测试你就明白了 洗白修改引导U盘syslinux.cfg文件把U盘插入电脑，查看VID和PIDlinux：命令行输入lsusb mac：终端输入system_profiler SPUSBDataType windows:在设备管理器的属性中，或用什么芯片无忧、芯片精灵等工具都可以看得到。 SN生成并计算Mac1.群晖所有型号官方SN和MAC生成器(在线版，需翻墙)2.群晖所有型号官方SN和MAC生成器下载Exelc打开后启用宏，选择型号后在空白地方双击生成SN，记录下来，底部选项卡选择Mac已经计算出对应了SN的Mac了，也记录下来备用。 在U盘根目录下有个syslinux.cfg文件（如果是6.0版本则修改grub下的grub.cfg文件），修改该文件的sn、vid、pid、mac的值，三处都要修改,mac1在群晖硬件版本DS3615xs之后，在sn前面，如果多网卡再加上mac2…别忘了空格是整行的没有换行，是编辑器显示区域不够了。类似于这样：改好后插回机子中启动系统，顺利的话在DSM中看不到此U盘外接设备了，在群晖助手中的MAC和序列号也是对应设定的，这时Quickconnect ID已经可以正常使用了。 6.0.x系统在升级过程中，不管是在线升级，还是手动上传pat档，均提示pat损毁，升级失败的问题。修改U盘grub.cfg文件中SataPortMap=x的值（这是指主板原生SATA接口数，主板固件总线中已经定义了，而不是通过外设方式集成的），默认为1 改成SataPortMap=2试试。可以搜索主板厂商去核实主板原生的SATA口的个数，也就是 x 的值，自己对应更改，错误的值可能启动不了系统的。 如果要设置网卡远程唤醒（当然路由已经设置了5000端口转发）要刷网卡MAC（不建议这么做，这里只提供方法，不提供工具，由此造成的任何问题，本人不负责。）根据网卡型号的不同方法不同，一般有通用的MSDOS工具刷，用软碟通制作MSDOS启动U盘并把MAC刷写工具拷到U盘根目录，插上黑群晖主机启动到DOS，进入U盘根目录命令行刷写MAC（先备份网卡BIOS），一般刷网卡MAC只需要改前面六位就行了(改为00:11:32)，后面的保持原来的不变。刷好后远程唤醒功能就正常使用了。如果没刷成功很可能网卡就废了（用备份的BIOS恢复）。 启动盘与系统盘集成可参考：洗白+启动盘与系统盘集成 修改synoinfo.conf（高级定制系统，不建议这么做，除非你是极客）synoinfo.conf文件是整个群晖系统的主要配置文件，几乎所有的网络端口、主板接口、系统功能都在这里设定。配置错误将导致系统崩溃，请谨慎修改。 修改SATA、eSATA开启DSM系统的终端登录功能，自己用shell工具连接群晖主机，账号密码是群晖系统中的用户和密码。用admin账户登陆，编辑vi /etc.defaults/synoinfo.conf文件。 修改指定的SATA口为eSATA口，这样原来装有资料的硬盘就不用格式化，作为eSATA外接硬盘接入，群晖中SATA设备是不支持NTFS格式的。修改esataportcfg和internalportcfg对应的16进制的值，esataportcfg值不够位数就写最后三位；internalportcfg值要写全。1-12代表1-12号SATA接口，用作群晖系统盘的那个接口必须是SATA接口，必须由群晖系统来初始化硬盘（数据提前做好备份）参考：http://www.7po.com/thread-456016-1-1.html 修改网络端口 可以修改默认的管理端口admin_port=”5000”；及各种端口修改，一般不建议随便修改（部分端口在DSM系统中可以修改）。 DMS6.0后无法用root登陆的问题shell登陆后输入 sudo -i，可切换root账号登陆（root账号密码同admin密码）直接输入chmod 7777 /etc/ssh/sshd_config然后就可以修改这个文件了，把root登陆那一块被打上了注释符 “//”，删除即可。 DMS6.0后无法用迅雷远程下载（官方不支持了）安装Docker套件，搜索xware，安装yinheli/docker-thunder-xware；配置启动时端口什么的都不用管，设置好挂载目录就行了，要有读写权限！启动后看容器日志，在迅雷远程下载官网登录账号绑定即可。 虚拟机U盘启动无法挂载问题虚拟机U盘启动有两种，一种是直接U盘连接进虚拟机并设置可移动磁盘启动（前提是虚拟机能正常识别到你的U盘）；另一种是对于虚拟机无法识别到U盘的情况，就只能在虚拟机中添加硬盘，在创建新硬盘时有个使用物理磁盘选项，选择它，之后选择物理磁盘时一般最后一个就是你的U盘，最后确定后能看到U盘容量；开机启动提示：勾选独立，永久模式，即可解决问题。 硬盘分区模式 RAID、SHR、BASIC、JBODSATA接口数量不多，挂的硬盘不多，但不想RAID的（RAID0不安全，RAID1太浪费，自带的SHR混合模式数据恢复麻烦一点；JBOD是类似SHR的软阵列模式，没用过，不评论），建议用BASIC方式(硬盘挂久了就知道原因了)，一个新硬盘怎么也得3-5年才会出现坏道，用BASIC方式创建ext4或btrfs分区，对于更换硬盘特别方便挂载在其他系统下转移数据。组RAID0的目的在于合并容量和提升速度，一般大于2T家用级以上的的硬盘，读写速度都有100M左右，千兆网口速度也差不多，瓶颈不在硬盘上。群晖双盘位机器SHR、RAID1阵列模式拆分、降级为BASIC教程参考：https://www.chiphell.com/thread-1392816-1-1.htmlhttp://support-cn.synology.me/wordpress/?p=589 官网容量计算器：RAID 容量计算器 硬盘数据恢复当系统或硬盘出现问题导致无法启动时，可以恢复数据，当时心疼数据，折腾了2天终于找到办法了，原谅我忘记截图了。后来换硬盘了，补上 重要：群晖在初次安装系统时，不管有几块硬盘，则默认且必须有一块硬盘是SHR阵列，这样在之后添加的硬盘不管选用何种模式，分区都为RAID类型；恢复数据有以下三种方法 克隆DSM系统分区这种方法对于喜欢装系统的朋友来说很好理解，群晖DSM是在每个硬盘之前分了三个分区（第一个空闲，第二个系统分区，第三个SWAP分区），之后第四个分区开始才是存储数据的，这也是为什么拔掉任何一块硬盘，系统也不会崩溃的原因（因为其他硬盘上还是有DSM系统的）。那么我们只要克隆系统分区就行了，注意GPT分区格式的硬盘只能克隆到GPT分区上，MBR的也同理，混刻是启动不了系统的，但是可以插入正常运行的DSM系统（有SHR阵列）中恢复（会自动挂载，就要要等10分钟左右）这样也比装Ubuntu恢复省了不少时间。 群晖系统内恢复适用于：BASIC、SHR等等随便一块能正常启动群晖的硬盘，就是SHR阵列，带有系统的那个硬盘（就是所谓的“必须有一块硬盘是SHR阵列”），没有这种硬盘可以随便找一块没有存数据的硬盘安装群晖或用别的群晖机子初始化并建立SHR阵列。 完成后，用该硬盘启动群晖系统，启动后把要恢复数据的硬盘连接主机，DSM检测到硬盘显示为未初始化，不用管，就这样等上10分钟左右就会自动挂载（这时文件管理器里可以看到数据了），这时DSM是橙色报警，显示无法访问该硬盘的系统分区，只要点修复就行啦（怕丢失数据的先不要点，在文件管理器中先备份或转移资料），数据是无损的，但还是强烈建议备份（例如扇区复制） 安装Ubuntu进行恢复适用于：SHR、RAID0、RAID1、JDOB等等阵列（fdisk -l显示有RAID字样的） 下载Ubuntu镜像：http://www.ubuntu.com/download/desktop制作U盘启动或虚拟机什么的都行，能进入系统就行，注意考虑恢复数据的速度及时间，这就决定了多长时间内要稳定运行，要是U盘启动用live模式，恢复时突然崩溃就白玩了。1234sudo -iapt-get updateapt-get install lvm2apt-get install mdadm 安装mdadm的时候如果是Ubuntu14的选No configuration 来完成安装。Ubuntu16的不会有这个选择窗口，默认就行。安装完成后运行：mdadm -Asf &amp;&amp; vgchange -ay可能会报错，不用管，打开文件管理器就能看到了 参考：还原存储在 DiskStation 中的数据 群晖绑定自己的域名方法有很多，可以在DDNS里设置花生壳、万网账号、用已备案的域名跳转到quickconnectID等等。 用NAT123做无公网IP的远程连接 永久屏蔽黑群晖升级或去除更新提示替换图形文件（法1）用WinSCP使用root权限登录到群辉。定位到/usr/syno/synoman/synoSDSjslib/images目录。下载文件：http://ofyfogrgx.bkt.clouddn.com/blog/20161222/105033516.zip替换该目录下的dsm5_badge_num.png和dsm5_notification_num.png文件 修改VERSION文件（法2）开启群晖系统的终端SSH功能，用任意ssh工具连接，账号密码是群晖系统的管理员账号和密码，连接进入系统sshell后；输入su(5.2及以下版本的系统)；sudo -i(6.0及以上版本的系统)后输入密码，进行提权（#号开头拥有root权限）12cd /etc.defaults/vi VERSION 文件内容是类似下面这样子的进官网查参数：https://www.synology.cn/zh-cn/releaseNote/DS3615xs经群晖系统升级界面看看可升级的最新版本是多少？最好不要跨大版本。 1234567majorversion="5" #大版本号minorversion="2" #小版本buildphase="hotfix"buildnumber="5967" #细分版本号smallfixnumber="2" #Update版本号，这是是DSM 5.2-5967 Update 2builddate="2016/07/27" #版本时间buildtime="17:15:53" :wq或ZZ保存退出vi编辑器。 实际上我的是5.2_5592的，但目前5.2最新的是5.2-5967 Update 2就更改为此版本，这样就会显示为最新版本了。不要改为远大于官方的版本，比如10.1_9999之类的，会出现所有套件无法安装的情况。 一行代码搞定（法3）vi /usr/syno/synoman/synoSDSjslib/sds-default.css按shift+$跳到行尾，增加以下这行代码，同一行，不要换行。 1.sds-application-notify-badge-num&#123;display:none !important;&#125; 保存退出，刷新一下网页桌面的控制面板就不会显示小角标了（所有提示都不显示小角标了，所以不建议此法），不过设置中还是会显示的。 DDNS设置3322DSM6.0后的DDNS没3322.org了。在自定义中添加以下代码就行啦！1http://members.3322.net/dyndns/update?system=dyndns&amp;hostname=__HOSTNAME__ 之后新建就能看到3322了。 SVN 和 GitSVN的话直接安装套件，设置用户，设置仓库名就可以正常使用了。 创建git仓库Git的话先安装git server套件进入“控制面板”“用户账户”，然后新增一个用户，当然也可以用现用账户（如果单独增加的是git用户，最好修改用户和用户组的权限，其他任何权限什么都没有，不能登陆，不能同步文件，不能ssh登陆等等，普通用户因为要用这些功能就不用改了），然后再git server中对应用户打钩，允许访问。群晖的用户改权限可以用图形化界面，当然也可以用命令行，参考：自己搭建Git服务器 接着开启群晖的ssh功能，用root或admin管理员账户登录shell。 123456cd /volume1 #硬盘挂载点一般是/volume1或者/volume2，你可以通过 ls /来查看mkdir git #在硬盘中创建一个git目录，我们会把所有的git repos放在这里cd gitgit init --bare testgit.git #初始化一个版本库，并创建一个testgit.git项目仓库chown -R leolan:users testgit.git # 格式【用户名:用户组】让git用户对这个板块库目录拥有可执行的权限，否则push的时候，是没有权限写入文件的 服务端就OK了，接下来本地电脑克隆下来。123456789101112git clone ssh://leolan@192.168.0.58/volume1/git/testgit.git # ssh://协议可能会提示某些错误，可以先不要理会，只要能克隆下来就可以了。#如果不克隆，可以在本地创建文件夹，绑定ssh://leolan@192.168.0.58/volume1/git/testgit.git源即可。#在windows上通过git客户端克隆时，要勾选克隆空项目的一个选项。cd testgit.gitgit remote -v #查看项目的远程仓库地址git config --global user.name "leolan" #绑定用户名git config --global user.email 842632422@qq.com #设置邮箱echo "hello Git" &gt;&gt; hello.txtgit add . &amp;&amp; git commit -m "first push" &amp;&amp; git push#如果正常提交不报错就可以使用啦，如果报错了再看具体内容，解决。 以后新建仓库时123cd /volume1/git/git init --bare newgit.git #创建新的仓库并初始化（初始化会清除该项目的所有数据）#如果已有目录或需要重新初始化则进入目录执行：git init --bare 命令 接着克隆下来，和上面的步骤是一样的。 免密钥登录1cat ~/.ssh/id_rsa.pub #查看本地的ssh密钥，copy备用 123456mkdir /volume1/homes/leolan/.sshcd /volume1/homes/leolan/.ssh/vi authorized_keys#粘贴上一步copy的ssh密钥，一行一个chown -R leolan:users /volume1/homes/leolan/.sshchmod 644 /volume1/homes/leolan/.ssh/authorized_keys 编辑ssh配置文件vim /etc/ssh/sshd_config123RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 然后在群晖系统中停用ssh功能，再次开启。就能免密钥操作啦！ VPN群晖的VPN服务是安装套件的，简单设置就行但是群晖连接别的VPN并不是在套件中设置的，而是在网络中设置填写IP，账号密码就行，其他不知道的参数默认就行。 shadowsocks群晖DSM是基于Debain定制的系统，但是移除了apt包管理程序，只支持dpkg安装包，但是我们可以通过第三方软件安装插件的形式来安装说需要的软件。 连接SS本来是路由上设置是比较方便的，但某些路由不支持SS，所以用群晖连接SS，再把代理地址指向群晖的地址。 pip安装SS此篇未完成，结尾运行报RuntimeError: can not find library crypto错误，目前还没有找到解决方法，有知道怎么解决的朋友欢迎留言 首先通过套件中心安装python及python3开启SSH服务。并通过SSH连入NAS1234567891011su #DSM5.x或 sudo -i #DSM6.xcd /tmp​​wget https://bootstrap.pypa.io/get-pip.pypython get-pip.pypip install shadowsockspip install crypto​cd /etc/vi shadowsocks.json 内容如下：配置文件参考：编写配置文件12345678910&#123; "server":"远程的SS服务器地址", "server_port":8388, #远程SS服务器的服务端口"local_address": "127.0.0.1", "local_port":1080, #端口随意，不要冲突就行，默认1080"password":"mypassword", #SS密码"timeout":300, "method":"aes-256-cfb", #加密方式"fast_open": false #FS加速&#125; 退出保存并运行服务1sslocal -c /etc/shadowsocks.json -d start 设置开机自启123vi /etc/rc#光标移动到最底下，在exit 0 之前添加以下这一句，保存退出。sslocal -c /etc/shadowsocks.json -d start 添加开机自启也可以通过计划任务添加，只是麻烦一点 Docker安装SSDocker安装也是可行的，直接下载安装，一定要看镜像说明，不同的作者定义的端口不同，打开看了才知道端口是什么。这里的端口是1984，运行Docker容器后，代理的端口,设置1984就OK了（当然，1984只是容器端口，真正的端口取决于你映射出来的端口） shadowsocks-libev(C语言版)这节内容摘录网文，只提供思路，本人没有进行测试，有需求测试后会改写内容并删除此段文字 先要在 群晖开源项目(Synology Open Source Project) 找到 DS216Play 的交叉编译工具：monaco-gcc493_glibc220_hard-GPL.txz然后 SSH 连接 VPS 进行编译工作:12345678910111213141516171819202122232425262728293031323334353637383940apt-get -y install make binutilsmkdir sscd sswget http://iweb.dl.sourceforge.net/project/dsgpl/DSM%206.0%20Tool%20Chains/STMicroelectronics%20Monaco%20Linux%203.10.77/monaco-gcc493_glibc220_hard-GPL.txztar xvf monaco-gcc493_glibc220_hard-GPL.txzexport PATH="/root/ss/arm-unknown-linux-gnueabi/bin:$PATH"export CC=/root/ss/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-gccexport LD=/root/ss/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-ldexport RANLIB=/root/ss/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-ranlibexport CFLAGS="-I/root/ss/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/include"export LDFLAGS="-L/root/ss/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/lib"# 依赖zlib，下载编译wget http://zlib.net/zlib-1.2.8.tar.gztar xvf zlib-1.2.8.tar.gzcd zlib-1.2.8/./configure --prefix=/root/dist/zlib-1.2.8make &amp; make install# 依赖openssl，下载编译wget https://www.openssl.org/source/openssl-1.0.2h.tar.gztar xvf openssl-1.0.2h.tar.gzcd openssl-1.0.2h./Configure dist --prefix=/root/dist/openssl-1.0.2hmakemake install# 编译shadowsocks-libevwget https://github.com/shadowsocks/shadowsocks-libev/archive/v2.4.6.tar.gztar xvf v2.4.6.tar.gzcd shadowsocks-libev-2.4.6# 配置 需要注意的是--host选项，目标NAS不同值可能也会不同# 详见Synology开发指南的Compile Open Source Projects章节./configure \ --with-zlib=/root/dist/zlib-1.2.8 \ --with-openssl=/root/dist/openssl-1.0.2h \ --prefix=/root/dist/ss \ --host=arm-unknown-linux-gnueabimakemake install 这样 ss 就会编译到 /root/dist/ss 目录，这个时候打包:1tar cvf shadowsocks.tar ss/ 登录群晖终端从远程取回文件：1scp xxx@xxx.xxx.xxx.xxx:/root/dist/shadowsocks.tar . 运行 需要知道的是 shadowsocks 是一个 socket 代理，而群晖 NAS 只支持 HTTP 代理，所以我们需要 Privoxy软件转换下，幸运的是 ipkg 里面刚好有此软件包。1sudo ipkg install privoxy 新建 shadowsocks 配置文件 config.json，内容如下：12345678&#123; "server":"xxx.xx.xx.xx", "server_port":1984, "local_port":16800, "password":"xxxx", "method":"aes-256-cfb", "timeout":60&#125; 新建 Privoxy 配置文件 privoxy.config：12345listen-address 127.0.0.1:16801 #监听本地的16801端口forward / .forward-socks5 .dropbox.com 127.0.0.1:16800 . #把访问 dropbox 的数据都通过ss 的代理端口转发出去forward-socks5 .tmdb.org 127.0.0.1:16800 . #把访问 tmdb 的数据都通过ss 的代理端口转发出去#forward-socks5 / 127.0.0.1:16800 . #全部转发 表示监听本地 16801 的端口数据转发到本地的socks5 16800 端口。这里只有两个网站的数据经过 ss 代理，一个是 Dropbox ，另一个是 tmdb（VideoStation 封面数据抓取网址）。如果需要更多可以一个个添加进去或者使用 actionfiles。 后台运行：12./ss-local -c config.json &amp; privoxy privoxy.config 然后进 NAS 设置一下就 OK 了： 自动运行 最后写一段自动运行脚本，放在 NAS 的任务计划中，设置每二十分钟运行一下，因为发现两个进程会有意外退出的情况，还没找原因：1234567891011121314151617181920212223242526272829#!/bin/shecho "Please run it with source command!"i1=`ps -ef | grep -E "ss-local*"|grep -v grep|awk '&#123;print $2&#125;'`if (kill -9 $i1)then&#123; echo 'ss killed'&#125;else&#123; echo 'no ss found!'&#125;fi~/Software/ShadowSocks/bin/ss-local -c ~/Software/ShadowSocks/bin/config.json &amp;echo "ss lunched!"i2=`ps -ef | grep -E "privoxy*"|grep -v grep|awk '&#123;print $2&#125;'`if (kill -9 $i2)then&#123; echo 'privoxy killed'&#125;else&#123; echo 'no privoxy found!'&#125;fiprivoxy ~/Software/ShadowSocks/privoxy.configecho "privoxy lunched!" ipkg、opkg、dpkg、Entwareipkg、opkg、dpkg是包管理程序，类似于yum和apt-get，群晖安装后可以扩展许多功能。Optware运行库，opkg就是基于此。Entware本身是一个跨平台运行库，自动识别Intel、ARM平台，可以提供Linux运行环境，严格来说可以算是一种系统，可以实现Linux非常多的功能，神器！实在不懂的进群晖英文论坛能找到你想要的。 dpkg群晖自带了dpkg，但好像只能安装下载好的ipk文件，命令也很繁琐，没什么用处。 安装ipkgipkg功能很强大，可以在线安装，但是在大天朝完全给墙了，只有Google能访问到官网的快照。如果无法安装可用opdk 123456789sudo -iwget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xshchmod +x syno-i686-bootstrap_1.2-7_i686.xshsh syno-i686-bootstrap_1.2-7_i686.xshrm syno-i686-bootstrap_1.2-7_i686.xshvi /root/.profile#在PATH的等号后面加入以下这一句(注意格式和其他一样，千万不要改错了，不然几乎全部命令都失效)/opt/bin: 然后保存退出，重启DSM（必须重启），重启运行ipkg update，之后就可以使用ipkg命令啦。 安装opdk12345678910sudo -iwget http://qnapware.zyxmon.org/binaries-x86/installer/qnapware_install_x86.shchmod +x qnapware_install_x86.sh./qnapware_install_x86.sh#安装完了可能会报Info:Found a Bug?，不用理。vi /etc/profilevi /root/.profile#分别在这两个文件的export CLASSPATH PATH JAVA_HOME LANG # Synology Java runtime enviroment（最后一行）的下一行加入以下这一句(注意格式和其他一样，千万不要改错了，不然几乎全部命令都失效)PATH=$PATH:/Apps/opt/bin:/Apps/opt/sbin 然后保存退出，重启DSM（必须重启），重启运行opkg update，之后就可以使用opkg命令啦。 Entware-ng神器Entware-ng是全平台运行库 官方项目：https://github.com/Entware-ng/Entware-ngREADME有说明安装在各个平台的链接 安装在群晖上：https://github.com/Entware-ng/Entware-ng/wiki/Install-on-Synology-NAS 安装Entware同时会安装opkg Aria2 下载神器Docker安装Aria2直接在镜像中心搜索下载镜像运行。添加端口映射和目录挂载，端口默认是6800，不知道的看镜像文档。挂载目录可以把容器目录挂载到群晖的指定目录中。 通过opkg安装Aria212345opkg updateopkg install aria2#启动aria2aria2c --enable-rpc=true --rpc-listen-all=true --rpc-allow-origin-all=true --dir=/volume1/139G/aria2(这里是你的存储位置)/ --file-allocation=none -s 5 -j 3 -x 5 -c -D 下载Aria2管理界面：webui-aria2解压后得到webui-aria2-master文件夹，改名为aria2放在web网站根目录然后通过：http://群晖IP/aria2/ 访问然后就可以正常使用了，速度还是很快的 Aria2配置参考：http://aria2c.com/usage.html 以下功能有时间再折腾，之后完善 开机启动Aria2参考：http://www.tweaking4all.com/qnap/qnap-aria2-download-manager/ 放弃迅雷Xware3.0 转投Aria2：http://www.nasyun.com/thread-25850-1-1.html迅雷离线https://github.com/binux/ThunderLixianExporter，百度云下载，，，，，，， 远程下载，远程控制，百度云导出若BaiduExporter插件不行就用以下这个https://chrome.google.com/webstore/detail/aria2c-integration/edcakfpjaobkpdfpicldlccdffkhpbfk?hl=en-US http://www.cnplugins.com/fuzhu/baiduexporter/detail.htmlhttp://www.nasyun.com/forum.php?mod=viewthread&amp;tid=26077&amp;pid=83563&amp;page=1&amp;extra= VirtualBox在群晖中群晖中安装此第三方套件之后就可以在群晖中运行虚拟机了。目前是还有版本范围限制，目前只支持x86以上且支持虚拟化的CPU。 官网：http://spk.diablos-netzwerk.de/#showhistory_virtualbox 先在设置中打开Web Station服务，然后在套件中心添加第三方源：http://spk.diablos-netzwerk.de保存刷新之后就能在套件中心看到这个插件了。 KVM不管是黑群晖还是白群晖，CPU基本上都是支持虚拟化的，所以也可以在群晖DSM中安装KVM 安装1，下载套件:https://github.com/bsdcpp/synoKVM黑裙一般是bromolow；我的DS216+II是braswell平台，进入该目录下载qemu和libvirt两个spk安装包。要知道自己机器平台参考：https://github.com/SynoCommunity/spksrc/wiki/Architecture-per-Synology-model 在套件中心设置群晖控制面板–&gt;网络–&gt;网络界面–&gt;管理–&gt;Open vSwitch设置，启用Open vSwitch。 然后手动安装这两个套件。 管理可以打开群晖的shell用virsh命令行来管理；也可以在Linux中安装virt-manager，运行：virt-manager命令（连的时候选择tcp方式）图形化管理。 参考：群晖（Synology）KVM虚拟机教程：https://blog.oldghost.net/synology-nas-kvm-turtorial.html用docker来搭建virt-manager：https://blog.oldghost.net/synology-ssh-and-virt-manager-setup-in-docker.html没图形界面的Linux机器安装virt-manager后在Windows下用putty和xming连接virt-manager主机：http://www.zw1840.com/blog/zw1840/2008/10/putty-xming-linux-gui.htmlubuntu中virt-manager图形化管理：http://www.ilanni.com/?p=6101 virtio驱动下载：https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso 软路由http://koolshare.cn/thread-76860-1-2.html]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>群晖DSM_Synology</tag>
        <tag>Aria2</tag>
        <tag>迅雷离线</tag>
        <tag>opkg、ipkg、dpkg</tag>
        <tag>Entware</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2Fposts%2F48230%2F</url>
    <content type="text"><![CDATA[系统管理类快捷键搜索历史命令快速搜索历史命令并运行Ctrl+r输入命令关键字即可搜索出来，按左或右方向键，或鼠标左键（视使用的第三方ssh软件而定）选定该命令，回车执行。 ssh免密钥登录ssh-keygen 创建公钥和密钥。 一路回车就行，会在~/.ssh/下创建相应文件。 ssh-copy-id user@IP 把本地主机的公钥复制到远程主机的authorized_keys文件上。这样就能免登录这台主机啦。 ssh-copy-id 也会给远程主机的用户主目录（home）和~/.ssh, 和~/.ssh/authorized_keys设置合适的权限 。 A将公钥发给B，不是说让B来访问A，而是A就可以访问B了。也就是说B不能在.ssh文件夹下的authorized_keys保留A的公钥，如保存就是把自己让给别人来访问！ 参考：https://my.oschina.net/emptytimespace/blog/79173http://www.linuxidc.com/Linux/2015-07/119608.htmhttp://www.runoob.com/w3cnote/set-ssh-login-key.html 分析空间大小分析空间大小（根目录下个文件夹大小）:du -sh /* 硬盘检测badblocksbadblock命令用于查找磁盘中损坏的区块，是一个很好的检查坏道位置的工具。 语法： badblock (选项) (参数) 选项-b&lt;区块大小&gt;：指定磁盘的区块大小，单位为字节；-o&lt;输出文件&gt;：将检查的结果写入指定的输出文件；-s：在检查时显示进度；-v：执行时显示详细的信息；-w：在检查时，执行写入测试。-c：指定检查次数。 参数磁盘装置：指定要检查的磁盘装置；磁盘区块数：指定磁盘装置的区块总数；启始区块：指定要从哪个区块开始检查。 使用fdisk命令识别硬盘信息1sudo fdisk -l 扫描硬盘的损坏扇区或区块1sudo badblocks -v /dev/sdb &gt; /tmp/bad-blocks.txt 扫描完成后，如果损坏区块被发现了，然后通过e2fsck命令使用“bad-blocks.txt”，强迫操作系统不使用这些损坏的区块存储数据。1sudo e2fsck -l /tmp/bad-blocks.txt /dev/sdb 注意：在运行e2fsck命令前，请保证设备没有被挂载。 对可疑的区块多做几次操作以4096字节为一个“block”,每一个“block”检查1次, 将结果输出到“/tmp/bad-blocks2.txt”文件中，由第51000 block开始，到63000 block结束，同时屏幕输出详细信息。1badblocks -v -b 4096 -c 1 /dev/sdb -o /tmp/bad-blocks2.txt 63000 51000 fsck使用badblocks的信息badblocks只会在日志文件中标记出坏道的信息，但若希望在检测磁盘时也能跳过这些坏块不检测，可以使用fsck的-l参数1fsck.ext3 -l /tmp/bad-blocks.txt /dev/sdb 在创建文件系统前检测坏道badblocks可以随e2fsck和mke2fs的-c一起运行（对ext3文件系统也一样），在创建文件系统前就先检测坏道信息，使用-c在创建文件系统前检查坏道的硬盘。 mkfs.ext3 -c选项用read-only方式检查硬盘，会在格式化硬盘时检查硬盘，并标出错误的硬盘“block”。1mkfs.ext3 -c /dev/sdb1 定时任务123456crontab status #crontab 状态 crontab -e #编辑配置文件/sbin/service crond start #启动服务 /sbin/service crond stop #关闭服务 /sbin/service crond restart #重启服务 /sbin/service crond reload #重新载入配置 格式：1*/25 * * * * /opt/xxx/xxx/restart.sh crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下： minute hour day month week command 顺序：分 时 日 月 周 minute： 表示分钟，可以是从0到59之间的任何整数。 hour：表示小时，可以是从0到23之间的任何整数。 day：表示日期，可以是从1到31之间的任何整数。 month：表示月份，可以是从1到12之间的任何整数。 week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。 command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。 可以使用以下特殊字符：星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。 命令执行顺序执行多条命令可以用;来隔开（即使前面一条命令没有正确执行，后面的命令也会执行） &amp;&amp;实现选择性执行的，它表示如果前面的命令执行结果返回0(前一条命令正确执行)，才执行后面的，否则不执行（不是表示终端输出的内容，而是表示命令执行状态的结果），用echo $?环境变量可以查看上一次命令的执行结果。 shell中的||除了用于表示逻辑与和或之外，还可以实现命令执行顺序的简单控制。||是与&amp;&amp;相反的控制效果，当上一条命令执行结果为≠0($?≠0)时(上一条命令执行失败)，则执行它后面的命令。 后台运行命令 1.screen [command] 2.[command] &amp;图中所显示的 [1] 236分别是该工作的 job number 与该进程的 PID，而最后一行的 Done 表示该命令已经在后台执行完毕。 3.nohup [command] &amp; nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。 该命令的一般形式为：nohup command &amp; 使用nohup命令提交作业如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件： nohup command &gt; myout.file 2&gt;&amp;1 &amp;在上面的例子中，输出被重定向到myout.file文件中。 4.Ctrl+Zctrl + z 使当前工作停止并丢到后台中去使用 jobs 查看任务。第一列显示的为被放置后台的工作的编号，第二列的 ＋ 表示最近被放置后台的工作，同时也表示预设的工作，也就是若是有什么针对后台的工作的操作，首先对预设的工作，- 表示倒数第二被放置后台的工作，倒数第三个以后都不会有这样的符号修饰，第三列表示它们的状态，而最后一列表示该进程执行的命令 通过fg命令将后台的工作拿到前台来运行12#后面不加参数提取预设工作，加参数提取指定工作的编号fg (%jobnumber) #使用时不要括号 通过bg命令将后台的工作在后台运行12#与fg类似，加参则指定，不加参则取预设bg [%jobnumber] psps命令很强大，选项和参数也多的离谱，参考：http://man.linuxde.net/ps 常用命令：ps aux 罗列出所有的进程信息pa axjf 连同部分的进程呈树状显示出来ps -l 显示自己这次登陆的 bash 相关的进程信息罗列出来ps －afxo user,ppid,pid,pgid,command 自定义我们所需要的参数显示 内容 解释 F 进程的标志为4 表示此程序的权限为 root，若为 1 则表示此子程序仅进行复制(fork)而沒有实际执行(exec) USER 进程的属主 PID 进程的ID PPID 其父进程的PID SID session的ID TPGID 前台进程组的ID %CPU 进程占用的CPU百分比 %MEM 占用内存的百分比 NI 进程的NICE值 VSZ 进程使用虚拟内存大小 RSS 驻留内存中页的大小 TTY 终端ID S or STAT 进程状态 WCHAN 正在等待的进程资源 START 启动进程的时间 TIME 进程消耗CPU的时间 COMMAND 命令的名称和参数 TPGID栏写着-1的都是没有控制终端的进程，也就是守护进程STAT表示进程的状态，而进程的状态有很多，如下表所示 状态 解释 R Running.运行中 S Interruptible Sleep.等待调用 D Uninterruptible Sleep.不可终端睡眠 T Stoped.暂停或者跟踪状态 X Dead.即将被撤销 Z Zombie.僵尸进程 W Paging.内存交换 N 优先级低的进程 &lt; 优先级高的进程 s 进程的领导者 L 锁定状态 l 多线程状态 + 前台进程 其中的 D 不可终端睡眠的状态，处在这种状态的进程不接受外来的任何signal，所以无法使用 kill 命令杀掉处于D状态的进程，无论是 kill，kill -9 还是 kill -15，一般处于这种状态可能是进程 IO 的时候出问题了。 在使用 ps 命令的时候可以看到大部分的进程都是处于休眠的状态，如果这些进程都被唤醒，那么该谁最先享受 CPU 的服务，后面的进程又该是一个什么样的顺序呢？进程调度的队列又该如何去排列呢？ 当然就是靠该进程的优先级值来判定进程调度的优先级，而优先级的值就是 PR 与 nice 来控制与体现的 而 nice 的值我们是可以通过 nice 命令来修改的，而需要注意的是 nice 值可以调整的范围是 -20 ~ 19，其中 root 有着至高无上的权力，既可以调整自己的进程也可以调整其他用户的程序，并且是所有的值都可以用，而普通用户只可以调制属于自己的进程，并且其使用的范围只能是 0 ~ 19，因为系统为了避免一般用户抢占系统资源而设置的一个限制。123456789#这个实验在环境中无法做，因为权限不够，可以自己在本地尝试#打开一个程序放在后台，或者用图形界面打开nice -n -5 vim &amp;renice -5 pid #修改已经存在的进程的优先级#用 ps 查看其优先级ps -afxo user,ppid,pid,stat,pri,ni,time,command | grep vim pstree通过 pstree 可以很直接的看到相同的进程数量，还可以看到所有进程的之间的相关性。 123456pstree 或 pstree -up#参数选择：#-A ：各程序树之间以 ASCII 字元來連接；#-p ：同时列出每个 process 的 PID；#-u ：同时列出每个 process 的所属账户名称。 kill 信号值 作用 -1 重新读取参数运行，类似与restart -2 如同 ctrl+c 的操作退出 -9 强制终止该任务 -15 正常的方式终止该任务 完整64个信号： 用法一般是：kill [信号值] [PID] 对 pid 对应的进程做操作 kill [信号值] [％jobnumber] 对job对象进行操作 日志常见的日志一般存放在/var/log，一般都有日志系统，默认是syslog,但一些新的linux发新版已经采用了功能更强大的rsyslog 系统日志 日志名称 记录信息 alternatives.log 系统的一些更新替代信息记录 apport.log 应用程序崩溃信息记录 apt/history.log 使用apt-get安装卸载软件的信息记录 apt/term.log 使用apt-get时的具体操作，如 package 的下载打开等 auth.log 登录认证的信息记录 boot.log 系统启动时的程序服务的日志信息 btmp 错误登陆的信息记录 Consolekit/history 控制台的信息记录 dist-upgrade dist-upgrade这种更新方式的信息记录 dmesg 启动时，显示屏幕上内核缓冲信息,与硬件有关的信息 dpkg.log dpkg命令管理包的日志。 faillog 用户登录失败详细信息记录 fontconfig.log 与字体配置有关的信息记录 kern.log 内核产生的信息记录，在自己修改内核时有很大帮助 lastlog (二进制文件)用户的最近信息记录 wtmp (二进制文件)wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等 syslog 系统信息记录 二进制日志文件wtmp，lastlog，不能直接使用 less、cat、more 这样的工具来查看， 可以用last 与 lastlog 工具来提取其中的信息 syslog 是一个系统日志记录程序，在早期的大部分 Linux 发行版都是内置 syslog，让其作为系统的默认日志收集工具，虽然时代的进步与发展，syslog 已经年老体衰跟不上时代的需求，所以他被 rsyslog 所代替了，较新的Ubuntu、Fedora 等等都是默认使用 rsyslog 作为系统的日志收集工具12sudo service rsyslog startps aux | grep syslog 既然它是一个服务，那么它便是可以配置，为我们提供一些我们自定义的服务;rsyslog 的配置文件有两个123vim /etc/rsyslog.conf #主要是配置的环境，也就是 rsyslog 的加载什么模块，文件的所属者等。vim /etc/rsyslog.d/50-default.conf #主要是配置的过滤条件 修改配置文件比较复杂，请自行man或搜索。 开机启动项交互界面的开机启动项：ntsysv(centos)--back：在互动式界面里，显示Back钮，而非cancel钮。使用空格键选择或者取消选项！ 包管理二进制包二进制包的安装比较简单，我们需要做的只是将从网络上下载的二进制包解压后放到合适的目录，然后将包含可执行的主程序文件的目录添加进PATH环境变量即可。 Debian/Ubuntu(apt)搜索软件包：apt-cache search softname 选项 说明 install 其后加上软件包名，用于安装一个软件包 update 从软件源镜像服务器上下载/更新用于更新本地软件源的软件包列表 upgrade 升级本地可更新的全部软件包，但存在依赖问题时将不会升级，通常会在更新之前执行一次update dist-upgrade 解决依赖关系并升级(存在一定危险性) remove 移除已安装的软件包，包括与被移除软件包有依赖关系的软件包，但不包含软件包的配置文件 autoremove 移除之前被其他软件包依赖，但现在不再被使用的软件包 purge 与remove相同，但会完全移除软件包，包含其配置文件 clean 移除下载到本地的已经安装的软件包，默认保存在/var/cache/apt/archives/ autoclean 移除已安装的软件的旧版本软件包 参数 说明 -y 自动回应是否安装软件包的选项，在一些自动化安装脚本中使用这个参数将十分有用 -s 模拟安装 -q 静默安装方式，指定多个q或者-q=#,#表示数字，用于设定静默级别，这在你不想要在安装软件包时屏幕输出过多时很有用 -f 修复损坏的(已安装的所有软件包)依赖关系 -d 只下载不安装 –reinstall 重新安装已经安装但可能存在问题的软件包 –install-suggests 同时安装APT给出的建议安装的软件包 dpkg常用参数介绍： 参数 说明 -i 安装指定deb包 -R 后面加上目录名，用于安装该目录下的所有deb安装包 -r remove，移除某个已安装的软件包 -I 显示deb包文件的信息 -s 显示已安装软件的信息 -S 搜索已安装的软件包 -L 显示已安装软件包的目录信息 Centos\Redhat(yum) 选项 说明 install 安装rpm软件包； update 更新rpm软件包； check-update 检查是否有可用的更新rpm软件包； remove 删除指定的rpm软件包； list 显示软件包的信息； search 检查软件包的信息； info 显示指定的rpm软件包的描述信息和概要信息； clean 清理yum过期的缓存； shell 进入yum的shell提示符； resolvedep 显示rpm软件包的依赖关系； localinstall 安装本地的rpm软件包； localupdate 显示本地rpm软件包进行更新； deplist 显示rpm软件包的所有依赖关系。 参数 说明 -h 显示帮助信息； -y 对所有的提问都回答“yes”； -c 指定配置文件； -q 安静模式； -v 详细模式； -d 设置调试等级（0-10）； -e 设置错误等级（0-10）； -R 设置yum处理一个命令的最大等待时间； -C 完全从缓存中运行，而不去下载或者更新任何头文件。 自动搜索最快镜像插件：yum install yum-fastestmirror安装yum图形窗口插件：yum install yumex查看可能批量安装的列表：yum grouplist 安装 123yum install #全部安装 yum install package1 #安装指定的安装包package1 yum groupinsall group1 #安装程序组group1 更新和升级 12345yum update #全部更新 yum update package1 #更新指定程序包package1 yum check-update #检查可更新的程序 yum upgrade package1 #升级指定程序包package1 yum groupupdate group1 #升级程序组group1 查找和显示 12345678yum info package1 #显示安装包信息package1 yum list #显示所有已经安装和可以安装的程序包 yum list package1 #显示指定程序包安装情况package1 yum groupinfo group1 #显示程序组group1信息yum search string 根据关键字string查找安装包 删除程序 yum remove | erase package1 #删除程序包package1 yum groupremove group1 #删除程序组group1 yum deplist package1 #查看程序package1依赖情况 清除缓存 123yum clean packages #清除缓存目录下的软件包 yum clean headers #清除缓存目录下的 headers yum clean oldheaders #清除缓存目录下旧的 headers yum 软件组软件组管理功能实测并不是很好用，经常出现没有包可安装的问题，可能原因有几个，换了yum源，软件组信息已经变更了，等等，平时用处不大，就没有去研究咯，知道怎么解决的朋友欢迎反馈。列出软件组yum grouplist 已安装的软件组未安装的软件组软件组信息yum groupinfo “软件组名（英文双引号）” 主要被安装的软件额外可选的软件安装某个软件组yum groupinstall “软件组名（英文双引号）” RPM常用参数介绍： 参数 说明 -a 查询所有套件； -b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+ 设置包装套件的完成阶段，并指定套件档的文件名称； -c 只列出组态配置文件，本参数需配合”-l”参数使用； -d 只列出文本文件，本参数需配合”-l”参数使用； -e&lt;套件档&gt;或–erase&lt;套件档&gt; 删除指定的套件； -f&lt;文件&gt;+ 查询拥有指定文件的套件； -h或–hash 套件安装时列出标记； -i 显示套件的相关信息； -i&lt;套件档&gt;或–install&lt;套件档&gt; 安装指定的套件档； -l 显示套件的文件列表； -p&lt;套件档&gt;+ 查询指定的RPM套件档； -q 使用询问模式，当遇到任何问题时，rpm指令会先询问用户； -R 显示套件的关联性信息； -s 显示文件状态，本参数需配合”-l”参数使用； -U&lt;套件档&gt;或–upgrade&lt;套件档&gt; 升级指定的套件档； -v 显示指令执行过程； -vv 详细显示指令执行过程，便于排错。 dd命令dd --help或是info dd 输入或输出dd if=[STDIN] of=[STDOUT]例：dd if=ubuntu-13.10-desktop-amd64.iso of=/dev/sdb2把光盘写进磁盘当然你可以拿这个来方便的拷贝光碟(注意，你的光碟是标准的 iso9660格式才可以这么做！) dd if=/dev/cdrom of=cdrom.iso把光驱内容保存为iso镜像文件 同理，要把一张磁盘的内容拷贝到另一张磁盘上，利用/tmp作为临时存储区。把源盘插入驱动器中，输入下述命令：dd if =/dev/xxx of = /tmp/tmpfile拷贝完成后，将源盘从驱动器中取出，把目标盘插入，输入命令：dd if = /tmp/tmpfile of =/dev/xxx软盘拷贝完成后，应该将临时文件删除：rm /tmp/tmpfile 如果两个设备能同时工作：dd if =/dev/xxx of = /dev/xxx /dev/null 它是空设备，也称为位桶（bit bucket）。任何写入它的输出都会被抛弃。如果不想让消息以标准输出显示或写入文件，那么可以将消息重定向到位桶。 /dev/zero该设备无穷尽地提供0，可以使用任何你需要的数目——设备提供的要多的多。他可以用于向设备或文件写入字符串0。dd if=/dev/zero of=./test.txt bs=1k count=1/dev/zero还可用于擦除磁盘数据 时区时间时区修改cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 提示覆盖的就覆盖掉date 看到有CST字样为中国标准时间; date -R 看到+0800 是东八区 修改硬件时钟（每次开机都是从硬件读取时间的，首先硬件时间要正确）hwclock --show 显示当前硬件时间hwclock --set --date=&quot;10/28/16 10:04:00&quot; （月/日/年 时:分:秒） 1.硬件时钟与系统时钟同步hc代表硬件时间，sys代表系统时间，即用硬件时钟同步到系统时钟hwclock --hctosys 或者clock --hctosysdate #查看当前系统时间 2.系统时钟和硬件时钟同步（一般是系统自动同步Internet时间后才把最新时间同步到硬件中）hwclock --systohc或者clock --systohc 即用系统时钟同步到硬件时钟 注：tzselect 命令也可以交互界面选择修改，但最后还要执行一个提示设置时区的命令，并写入环境变量中，重启才能生效。 文件、目录类cdcd ：进入用户主目录；cd ~ ：进入用户主目录；cd - ：返回进入此目录之前所在的目录；cd !$ ： 把上个命令的参数作为cd参数使用 权限设置数字设定法0表示没有权限，1表示可执行权限， 2表示可写权限，4表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。 例如，如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝6（读/写）。数字设定法的一般形式为：语法：chmod [mode] 文件名例如：chmod 755 mm.txt 文字设定法语法：chmod [who] [+ | - | =] [mode] 文件名命令中各选项的含义为：操作对象who可是下述字母中的任一个或者它们的组合： u 表示“用户（user）”，即文件或目录的所有者。 g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。 o 表示“其他（others）用户”。 a 表示“所有（all）用户”。它是系统默认值。操作符号可以是： + 添加某个权限。 - 取消某个权限。 = 赋予给定权限并取消其他所有权限（如果有的话）。 设置 mode 所表示的权限可用下述字母的任意组合： r 可读。 w 可写。 x 可执行。 X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。 s 在文件执行时把进程的属主或组ID置为该文件的文件属主。 方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。 t 保存程序的文本到交换设备上。 u 与文件属主拥有一样的权限。 g 与和文件属主同组的用户拥有一样的权限。 o 与其他用户拥有一样的权限。 文件名：以空格分开的要改变权限的文件列表，支持通配符。 CUT命令 -b：仅显示行中指定直接范围的内容； -c：仅显示行中指定范围的字符； -d：指定字段的分隔符，默认的字段分隔符为“TAB”； -f：显示指定字段的内容； -n：与“-b”选项连用，不分割多字节字符； --complement：补足被选择的字节、字符或字段； --out-delimiter=&lt;字段分隔符&gt;：指定输出内容是的字段分割符； --help：显示指令的帮助信息； --version：显示指令的版本信息。 打印/etc/passwd文件中以:为分隔符的第1个字段和第6个字段分别表示用户名和其家目录：cut /etc/passwd -d &#39;:&#39; -f 1,6前五个（包含第五个）：cut /etc/passwd -c -5前五个之后的（包含第五个）：cut /etc/passwd -c 5-第五个：cut /etc/passwd -c 52到5之间的（包含第五个）： cut /etc/passwd -c 2-5 查找近期修改的文件比如按名字查找一个文件，可以用find / -name filename按时间查找也有参数 -atime 访问时间 -ctime 改变状态的时间 -mtime修改的时间。这里的时间是以24小时为单位的。 find . -name &#39;*.html&#39; -type f -mmin -30：当前目录最近30分钟内修改过的html文件find . -name &#39;*.html&#39; -type f -mmin -30 -ls：最近30分钟内修改过的文件，的详细情况find ./ -mtime 0：返回最近24小时内修改过的文件。find ./ -mtime 1 ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。find . -type f -mtime +1：最近1天前（2天内）修改过的常规文件find . -mtime -2 -type f：48小时以内修改过的文件 那怎么返回10天内修改过的文件？find支持表达式关系运算，所以可以把最近几天的数据一天天的加起来：find ./ -mtime 0 -o -mtime 1 -o -mtime 2 虽然比较土，但也算是个方法了。 参考：http://man.linuxde.net/find echoecho “ok” &gt; test.txt ：用ok字符覆盖掉test.txt内容，&gt;表示追加并覆盖的意思。echo “ok” &gt;&gt; test.txt：向test.txt文件追加OK字符，不覆盖原文件里的内容。&gt;&gt;表示尾行追加。 计算MD5计算MD5：md5sum filename 文件上下传SCP1scp /home/git/.ssh/id_rsa.pub gitServer:/home/git lrzsz(Windows-Linux)rz 上传文件sz 下载文件 ncftp另外有两个常用的ftp工具ncftpget和ncftpput，可以实现后台的ftp上传和下载，这样我就可以利用这些命令在后台上传和下载文件了。 man手册转为PDF把man的帮助转换成PDF文档：man -t [command] | ps2pdf - filename.pdf 管道符、awk等高级控制“|”管道符是左边命令的标准输出(stdout)给右边命令作为标准输入（stdin）;“&lt;”是右边文件名指定的文件内容读入为左边命令的标准输入（stdin）；“&gt;”是左边命令的输出覆盖写到右边指定的文件中。 ps aux |grep XXX |awk &#39;{print $11}&#39; | grep -v &#39;grep&#39; | wc -l grep -v ‘grep’ 过滤带grep的部分 取反 wc -l 统计行数 sort -nr 排序 grep -rnI &quot;myleolan&quot; ~ -r 参数表示递归搜索子目录中的文件, -n表示打印匹配项行号， -I表示忽略二进制文件。查看环境变量中以”leolan”结尾的字符串：export | grep &quot;.*leolan$&quot;其中$就表示一行的末尾。 wc 命令用于统计并输出一个文件中行、单词和字节的数目分别只输出行数、单词数、字节数、字符数和输入文本中最长一行的字节数：行数：wc -l /etc/passwd单词数：wc -w /etc/passwd字节数：wc -c /etc/passwd字符数：wc -m /etc/passwd最长行字节数：wc -L /etc/passwd 注意：对于西文字符来说，一个字符就是一个字节，但对于中文字符一个汉字是大于2个字节的，具体数目是由字符编码决定的 sort 排序命令将输入按照一定方式排序，然后再输出,它支持的排序有按字典排序,数字排序，按月份排序，随机排序，反转排序，指定特定字段进行排序等等。默认为字典排序：cat /etc/passswd | sort反转排序：cat /etc/passwd | sort -r按特定字段排序：cat /etc/passwd | sort -t&#39;:&#39; -k 3 -n 上面的-t参数用于指定字段的分隔符，这里是以“:”作为分隔符；-k 字段号用于指定对哪一个字段进行排序。这里/etc/passwd文件的第三个字段为数字，默认情况下是一字典序排序的，如果要按照数字排序就要加上-n参数 uniq 去重命令uniq命令可以用于过滤或者输出重复行。 ● 过滤重复行我们可以使用history命令查看最近执行过的命令（实际为读取${SHELL}_history文件），那么你可能就会要想去掉命令后面的参数然后去掉重复的命令：history | cut -c 8- | cut -d &#39; &#39; -f 1 | uniq 然后经过层层过滤，你会发现确是只输出了执行的命令那一列，不过去重效果好像不明显，仔细看你会发现它趋势去重了，只是不那么明显，之所以不明显是因为uniq命令只能去连续重复的行，不是全文去重，所以要达到预期效果，我们先排序：history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq或者history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort -u ● 输出重复行输出重复过的行（重复的只输出一个）及重复次数：history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq -dc输出所有重复的行：history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq -D tr 命令tr 命令可以用来删除一段文本信息中的某些文字。或者将其进行转换。常用的选项有： 选项 说明 -d 删除和set1匹配的字符，注意不是全词匹配也不是按字符顺序匹配 -s 去除set1指定的在输入文本中连续并重复的字符 删除 “hello shiyanlou” 中所有的’o’,’l’,’h’：echo &#39;hello shiyanlou&#39; | tr -d &#39;olh&#39;将”hello” 中的ll,去重为一个l：echo &#39;hello&#39; | tr -s &#39;l&#39;将输入文本，全部转换为大写或小写输出：cat /etc/passwd | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;上面的&#39;[:lower:]&#39; &#39;[:upper:]&#39;你也可以简单的写作&#39;[a-z]&#39; &#39;[A-Z]&#39;,当然反过来将大写变小写也是可以的 col 命令col 命令可以将Tab换成对等数量的空格建，或反转这个操作。常用的选项有： 选项 说明 -x 将Tab转换为空格 -h 将空格转换为Tab（默认选项） 操作举例：查看 /etc/protocols 中的不可见字符，可以看到很多 ^I ，这其实就是 Tab 转义成可见字符的符号:cat -A /etc/protocols使用 col -x 将 /etc/protocols 中的 Tab 转换为空格,然后再使用 cat 查看，你发现 ^I 不见了:cat /etc/protocols | col -x | cat -A join命令学过数据库的用户对这个应该不会陌生，这个命令就是用于将两个文件中包含相同内容的那一行合并在一起。 常用的选项有： 选项 说明 -t 指定分隔符，默认为空格 -i 忽略大小写的差异 -1 指明第一个文件要用哪个字段来对比，默认对比第一个字段 -2 指明第二个文件要用哪个字段来对比，默认对比第一个字段 操作举例：创建两个文件123echo '1 hello' &gt; file1echo '1 shiyanlou' &gt; file2join file1 file2 将/etc/passwd与/etc/shadow两个文件合并，指定以‘:’作为分隔符sudo join -t&#39;:&#39; /etc/passwd /etc/shadow将/etc/passwd与/etc/group两个文件合并，指定以‘:’作为分隔符, 分别比对第4和第3个字段sudo join -t&#39;:&#39; -1 4 /etc/passwd -2 3 /etc/group paste命令paste这个命令与join 命令类似，它是在不对比数据的情况下，简单地将多个文件合并一起，以Tab隔开。 常用的选项有： 选项 说明 -d 指定合并的分隔符，默认为Tab -s 不合并到一行，每个文件为一行 操作举例：12345echo hello &gt; file1echo shiyanlou &gt; file2echo www.shiyanlou.com &gt; file3paste -d ':' file1 file2 file3paste -s file1 file2 file3 xargs 分割参数列表xargs 是一条 UNIX 和类 UNIX 操作系统的常用命令。它的作用是将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。这个命令在有些时候十分有用，特别是当用来处理产生大量输出结果的命令如 find，locate 和 grep 的结果，详细用法请参看 man 文档。cut -d: -f1 &lt; /etc/passwd | sort | xargs echo上面这个命令用于将/etc/passwd文件按:分割取第一个字段排序后，使用echo命令生成一个列表。 命令行将图片转换为 ascii 字符查看的工具 aview/asciiview(黑白的)彩色的：1234sudo apt-get install caca-utilscacaview &lt;pic_file&gt;cacademocacafire 重定向标准错误重定向 重定向标准输出到文件，这是一个很实用的操作，另一个很实用的操作是将标准错误重定向，标准输出和标准错误都被指向伪终端的屏幕显示，所以我们经常看到的一个命令的输出通常是同时包含了标准输出和标准错误的结果的。比如下面的操作： 使用cat 命令同时读取两个文件，其中一个存在，另一个不存在cat Documents/test.c hello.c你可以看到除了正确输出了前一个文件的内容，还在末尾出现了一条错误信息下面我们将输出重定向到一个文件，根据我们前面的经验，这里将在看不到任何输出了cat Documents/test.c hello.c &gt; somefile 这里依然出现了那条错误信息，这正是因为如我上面说的那样，标准输出和标准错误虽然都指向终端屏幕，实际它们并不一样。那有的时候我们就是要可以隐藏某些错误或者警告，那又该怎么做呢。这就需要用到我们前面讲的文件描述符了： 将标准错误重定向到标准输出，再将标准输出重定向到文件，注意要将重定向到文件写到前面cat Documents/test.c hello.c &gt;somefile 2&gt;&amp;1或者只用bash提供的特殊的重定向符号”&amp;”将标准错误和标准输出同时重定向到文件cat Documents/test.c hello.c &amp;&gt;somefilehell 注意你应该在输出重定向文件描述符前加上&amp;,否则shell会当做重定向到一个文件名为1的文件中 tee命令同时重定向到多个文件经常你可能还有这样的需求，除了将需要将输出重定向到文件之外也需要将信息打印在终端(打印终端的同时输出到文件)，那么你可以使用tee命令来实现：echo &#39;hello shiyanlou&#39; | tee hello 永久重定向 前面的重定向操作都只是临时性的，即只对当前命令有效，那如何做到“永久”有效呢，比如在一个脚本中，你需要某一部分的命令的输出全部进行重定向，难道要让你在每个命令上面加上临时重定向的操作嘛，当然不需要，我们可以使用exec命令实现“永久”重定向。exec命令的作用是使用指定的命令替换当前的 Shell，及使用一个进程替换当前进程，或者指定新的重定向： 先开启一个子 Shell:zsh使用exec替换当前进程的重定向，将标准输出重定向到一个文件:exec 1&gt;somefile后面你执行的命令的输出都将被重定向到文件中,直到你退出当前子shell，或取消exec的重定向（后面将告诉你怎么做）123lsexitcat somefile 创建输出文件描述符默认在 Shell 中可以有9个打开的文件描述符，上面我们使用了也是它默认提供的0,1,2号文件描述符，另外我们还可以使用3-8的文件描述符，只是它们默认没有打开而已，你可以使用下面命令查看当前 Shell 进程中打开的文件描述符：cd /dev/fd/;ls -Al 同样使用exec命令可以创建新的文件描述符：12345678zshexec 3&gt;somefile# 先进入目录，再查看，否则你可能不能得到正确的结果，然后再回到上一次的目录cd /dev/fd/;ls -Al;cd -# 注意下面的命令&gt;与&amp;之间不应该有空格，如果有空格则会出错echo "this is test" &gt;&amp;3cat somefileexit 关闭文件描述符如上面我们打开的3号文件描述符，可以使用如下操作将它关闭：12exec 3&gt;&amp;-cd /dev/fd;ls -Al;cd 完全屏蔽命令的输出在 Linux 中有一个被成为“黑洞”的设备文件,所以导入它的数据都将被“吞噬”。在类 UNIX 系统中，/dev/null，或称空设备，是一个特殊的设备文件，它通常被用于丢弃不需要的输出流，或作为用于输入流的空文件，这些操作通常由重定向完成。读取它则会立即得到一个EOF。我们可以利用设个/dev/null屏蔽命令的输出：cat Documents/test.c nefile 1&gt;/dev/null 2&gt;&amp;1上面这样的操作将使你得不到任何输出结果。 网络类wget递归下载整个网站wget加上参数之后，即可成为相当强大的下载工具。12345678wget -r -p -np -k http://xxx.com/xxx-r, --recursive（递归）指定使用递归下载-k, --convert-links（转换链接）将下载的HTML页面中的链接转换为相对链接即本地链接-p, --page-requisites（页面必需元素）下载所有的图片等页面显示所需的内容-np, --no-parent（不追溯至父级）-nc, （断点续传）-o, （日志） axel高速下载axel是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。 CentOS安装Axel： 目前yum源上没有Axel，我们可以到http://pkgs.repoforge.org/axel/下载rpm包安装。 32位CentOS执行下面命令：12wget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.i386.rpm rpm -ivh axel-2.4-1.el5.rf.i386.rpm 64位CentOS执行下面命令：12wget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.x86_64.rpm rpm -ivh axel-2.4-1.el5.rf.x86_64.rpm Debian/Ubuntu安装Axel： apt-get install axel 如下载lnmp安装包指定10个线程，保存到/tmp/中：1axel -n 10 -o /tmp/ http://www.linuxde.net/lnmp.tar.gz 监听流量iftop官方网站：http://www.ex-parrot.com/~pdw/iftop/安装：源码安装：12345678910yum install flex byacc libpcap ncurses ncurses-devel libpcap-devel #安装依赖或apt-get install flex byacc libpcap0.8 libncurses5 #安装依赖#编译之前确保已安装好了make、gcc、autoconf等。wget http://www.ex-parrot.com/pdw/iftop/download/iftop-0.17.tar.gztar zxvf iftop-0.17.tar.gzcd iftop-0.17./configuremake &amp;&amp; make install 仓库源安装：Debian/Ubuntu系统：apt-get install iftopCentos/Redhat系统：安装EPEL源，然后yum install iftop安装 使用：iftop或iftop -i eth0 -n -p nethogsnethogs eth0 网页命令行阅读器w3m 【网址】 网页命令行方式阅读，对于没有桌面环境但在需要判断网页服务是否正常时非常有用。 links阅读html文件,只显示链接links [选项] [URL]例：links www.baidu.com 禁ping （禁用ICMP协议）1“echo "1" &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all” 不能vi编辑，1为禁止ping命令，0为允许ping命令 文字接口数据包捕获器:tapdump [-AennqX] [-i 接口] [-w 存储文件名] [-c 次数] \ [-r 文件] [所要摘取的数据包数据格式] 图形接口数据包捕获器：Wiresharkyum install wireshark wireshark-gnome 屏幕共享（局域网，公网貌似不行）连接的两台电脑（也可多台）命令行显示是实时同步的，两边都可以操作。可能要先安装:screen123screen -S foo 创建会话screen -x foo 加入会话exit退出 即时通讯软件： pidgin（gaim的延伸）yum install pidgin]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重装服务器系统基本配置]]></title>
    <url>%2Fposts%2F29609%2F</url>
    <content type="text"><![CDATA[Centos MiniCentos mini版镜像缺少很多常用工具 更新系统yum update 开发环境1yum install gcc gcc-c++ make automake cmake libtool bison flex perl git subversion mercurial -y 常用开发库1yum install readline-devel bzip2-devel zlib-devel libxml2-devel libxslt-devel openssl-devel kernel-devel pcre-devel boost-devel python-devel python-setuptools libpcap-devel -y 常用软件1yum install wget vim lsof lrzsz tcpdump -y 防火墙打开需要的端口123iptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A INPUT -p tcp --dport 8080 -j ACCEPT iptables -A INPUT -p tcp --dport 3306 -j ACCEPT #激活用ACCEPT ，关闭用DROP 保存配置/etc/init.d/iptables save重启service iptables restart centos（6.X及以下版本）网卡配置vi /etc/sysconfig/network-scripts/ifcfg-eth0 编辑配置文件,添加修改以下内容双网不要配内网网关例：1234567891011121314151617181920212223242526272829303132#联通公网：DEVICE=eth0BOOTPROTO=staticONBOOT=yesIPADDR=221.4.XXX.XXXNETMASK=255.255.XXX.224 GATEWAY=221.4.xxx.xxxDNS1=221.5.XX.88DNS2=8.8.8.8#内网：vi /etc/sysconfig/network-scripts/ifcfg-eth1DEVICE=eth1BOOTPROTO=staticONBOOT=yesIPADDR=192.168.0.114NETMASK=255.255.252.0 GATEWAY=192.168.0.1#DNS1=221.5.XX.88#DNS2=8.8.8.8 （公网配了DNS和网关了）#修改DNS也可以vim /etc/resolv.confnameserver 221.5.XX.88nameserver 8.8.8.8IPV6INIT=no #禁止IPV6service ip6tables stop #停止IPV6服务chkconfig ip6tables off #禁止IPV6开机启动service yum-updatesd stop #关闭系统自动更新chkconfig yum-updatesd off #禁止开启启动service network restart #重启网络连接ifconfig #查看IP地址 防火墙123iptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A INPUT -p tcp --dport 8080 -j ACCEPT iptables -A INPUT -p tcp --dport 3306 -j ACCEPT #激活用ACCEPT ，关闭用DROP 保存配置/etc/init.d/iptables save重启service iptables restart 设置主机名123456789vi /etc/sysconfig/networkvi /etc/hostshostname newname #newname就是你要改的主机名service network restart 或 /etc/network restartyum install wget lrzsz -yservice sshd startchkconfig sshd onshutdown -r now #重启系统 Ubuntu（14.04及以上版本）安装常用软件新安装的Ubuntu如果没有root用户密码，用sudo passwd root设置root密码。12apt-get install wget lrzsz openssh-server vim -y/etc/init.d/ssh start 允许root登录shellUbuntu超级用户root用户是默认被禁用的，这就是为什么我们登陆时只能以普通用户登陆，而且switch user时没有root选项。必须使用命令启动root。即输入：sudo passwd root。然后输入密码即可启动root。123vim etc/ssh/sshd_config将PermitRootLogin 的值改为yessudo service sshd restart 网卡地址配置配置静态IP地址sudo vi /etc/network/interfaces1234567891011121314151617#双网不要配内网网关auto loiface lo inet loopbackifconfig #可以看到eth0用作公网auto eth0 （有的可能是eno0或eno1）iface eth0 inet staticaddress 221.4.xxx.xxxgateway 221.4.xxx.xxxnetmask 255.255.255.xxxdns-nameservers 221.5.XX.88dns-nameservers 8.8.8.8auto eth1iface eth1 inet staticaddress 192.168.0.254netmask 255.255.252.0#gateway 192.168.0.1 保存退出,重启服务1/etc/init.d/networking restart 以DHCP 方式配置网卡123sudo vi /etc/network/interfaces auto eth0 iface eth0 inet dhcp 用/etc/init.d/networking restart命令使网络设置生效 修改DNS服务器法一1234vi /etc/network/interfaces增加dns-nameservers 221.5.XX.88dns-nameservers 8.8.8.8 法二1234vi /etc/resolvconf/resolv.conf.d/head增加dns-nameservers 221.5.XX.88dns-nameservers 8.8.8.8 重启后生效，重启不失效 防火墙12345resolvconf -uiptables -A INPUT -p tcp -i eth0 --dport 22 -j ACCEPTiptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A INPUT -p tcp --dport 8080 -j ACCEPT iptables -A INPUT -p tcp --dport 3306 -j ACCEPT #激活用ACCEPT ，关闭用DROP 保存配置/etc/init.d/iptables save重启service iptables restart 修改主机名123456vi /etc/hostnamevi /etc/hostshostname newname #newname就是你要改的主机名/etc/init.d/networking restartshutdown -r now #重启系统 Ubuntu 系统版本升级（如从16.04升到16.10）Canonical 已经提供了一个直接升级的方法，非常快捷容易。适用于：Kubuntu、 Xubuntu、 Lubuntu、 Ubuntu GNOME、 Ubuntu Mate。首先更新一下系统12sudo apt-get updatesudo apt-get dist-upgrade 接下来，需要安装更新管理器的核心12sudo apt-get install update-manager-core sudo do-release-upgrade -d 或 sudo update-manager -d 注：d-release-upgrade 命令是帮助我们寻找最新的稳定版本，而 -d 参数意思是包括非稳定版本。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>重装服务器系统基本配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统常用配置设置]]></title>
    <url>%2Fposts%2F3766%2F</url>
    <content type="text"><![CDATA[Ubuntu开启root用户登录桌面123456sudo vim /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf加上下面一句greeter-show-manual-login=true然后修改密码sudo passwd root重启系统 允许root用户登录ssh12345/etc/ssh/sshd_config修改PermitRootLoginPermitRootLogin yes#保存退出重启服务sudo service ssh restart CentosDocker Centos修改密码出错CentOS 修改root密码时报错：/usr/share/cracklib/pw_dict.pwd: No such file or directory PWOpen: No such file or directory 这是因为缺少某些lib库。解决办法：yum reinstall -y cracklib-dicts 使用yum时报fakesystemd相关错误解决：yum swap -- remove fakesystemd -- install systemd systemd-libs参考：http://stackoverflow.com/questions/36630718/docker-as-a-builder-cant-install-systemd-header-files Mac Windows]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>操作系统常用配置设置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建shadowsocks服务器]]></title>
    <url>%2Fposts%2F13905%2F</url>
    <content type="text"><![CDATA[目前 shadowsocks 服务已经受到了影响，不过部署在 25 端口目前还可用。 shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。 主流的 VPS（虚拟主机）服务器提供商有三家： linodedigital oceanbandwagon（搬瓦工）下面的比上面的便宜。如果只是自用，bandwagon 足够。 一般使用 paypal 绑定一个 visa 或 mastercard 信用卡来付款。注意要用国际 paypal 帐号，国内的是不能用外币付款的。 服务端安装 shadowsocksDebian/Ubuntu:12apt-get install python-pippip install shadowsocks 如果遇到第一个命令安装 python-pip 时找不到包的情况。pip 官方给出了一个安装脚本，可以自动安装 pip。先下载脚本，然后执行即可：1wget https://bootstrap.pypa.io/get-pip.py python get-pip.py CentOS12yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocks 源码编译1git clone https://github.com/madeye/shadowsocks-libev.git 进入目录编译安装123cd shadowsocks-libev./configure --prefix=/usrmake &amp;&amp; make install 配置服务及配置文件12345mkdir -p /etc/shadowsocks-libevcp ./debian/shadowsocks-libev.init /etc/init.d/shadowsocks-libevcp ./debian/shadowsocks-libev.default /etc/default/shadowsocks-libevcp ./debian/config.json /etc/shadowsocks-libev/config.jsonchmod +x /etc/init.d/shadowsocks-libev 配置shadowsocks配置文件vi /etc/shadowsocks-libev/config.json12345678&#123; "server":"vps的ip", "server_port":8388, #服务器端口，与SSH端口不一样 "local_port":1080, "password":"barfoo!", #认证密码 "timeout":60, "method":"aes-256-cfb" #加密方式，推荐使用aes-256-cfb&#125; 重启shadowsocks服务。12/etc/init.d/shadowsocks-libev stop/etc/init.d/shadowsocks-libev start 编写配置文件shadowsocks 启动时的参数，如服务器端口，代理端口，登录密码等，可以通过启动时的命令行参数来设定，也可以通过 json 格式的配置文件设定。推荐使用配置文件，方便查看和修改。 用 vi 新建一个配置文件：vi /etc/shadowsocks.json然后输入如下内容：123456789&#123; "server":"my_server_ip", #服务器ip地址 "server_port":25, #绑定的端口，端口最好小于1024，注意不要设置已经使用了的端口 "local_address": "127.0.0.1", "local_port":1080, "password":"mypassword", #连接密码 "timeout":300, #超时时间（秒） "method":"aes-256-cfb", #加密方法 "fast_open": false &#125; #Linux 内核版本大于3.7，设置为true可降低延迟 如果需要配置多个SS账号，可以按照如下案例进行配置：12345678910111213&#123;"server":"your_server_ip","port_password":&#123; "8381":"password1", "8382":"password2", "8383":"password3", "8384":"password4" &#125;,"timeout":300,"method":"rc4-md5","fast_open":false,"workers":1&#125; 启动 shadowsocks启动 shadowsocks 服务器的命令如下：123ssserver -c /etc/shadowsocks.json #启动服务ssserver -c /etc/shadowsocks.json -d start #后台启动服务ssserver -c /etc/shadowsocks.json -d stop #停止服务 shadowsocks 的日志保存在: /var/log/shadowsocks.log一键安装脚本这里提供一键安装脚本 1.Ubuntu、Debian点我直接下载脚本文件 安装中出现的选择界面，请一律选择YES，然后回车。安装过程中脚本会提示输入server_port及passwordserver_port建议取小一些，如443,80等。password自定安装完成后有提示。卸载：name.sh uninstall更新：name.sh update更新其实是卸载了重装，配置不会丢失。shadowsocks的配置文件位于：/etc/shadowsocks-libev/config.json可以编辑该文件从而修改密码、服务器端口及加密方式，修改之后记得保存重启。12/etc/init.d/shadowsocks-libev stop/etc/init.d/shadowsocks-libev start 脚本已加入开机自启。 2.项目地址：https://github.com/shadowsocksr/shadowsocksr脚本下载：http://ofyfogrgx.bkt.clouddn.com/blog/20170105/095845797.sh 3.基于Python的SS服务器,原文：https://blog.linuxeye.com/423.html 12345678910111213141516wget http://ofyfogrgx.bkt.clouddn.com/blog/20170105/100514414.zipunzip 100514414.zipcd oneinstack./shadowsocks.sh install#Shadowsocks添加用户./shadowsocks.sh adduser#Shadowsocks卸载./shadowsocks.sh uninstall#Shadowsocks服务管理service shadowsocks start #启动service shadowsocks stop #关闭service shadowsocks restart #重启service shadowsocks status #状态 客户端安装并启动 shadowsocks 客户端shadowsocks 支持 windows、Mac OS X、Linux、Android、iOS 等多个平台。不过 iOS 由于系统对应用后台运行的限制，推荐使用客户端内嵌的浏览器科学上网，给其他应用代理时需要每过几分钟重新启动一下 app。 shadowsocks 项目 Github 主页在这里。 里面可以找到客户端下载地址。 下载安装客户端以后，只需按服务器的配置填写 IP 地址、服务器端口、本地端口（如果没有本地端口选项，就是默认的 1080）、密码、加密方式等参数，启动就可以了。 客户端支持全局代理和 PAC 代理两种方式，后者会使用一个脚本来自动检查一个网站是否在需要代理的网站列表中，自动选择直接连接或代理连接。 PAC 列表可以在线更新，但是难免有收录不全的情况。这时可以选择关闭 shadowsocks 代理（实际上是取消对系统代理的配置，shadowsocks 客户端仍然保持工作），然后使用支持自定义规则的代理管理插件来实现自动切换代理，比如 switchyOmega。 使用 switchyOmega 实现自动切换代理switchyOmega 是 chrome 浏览器上一个很好用的代理管理插件。它的前身 switchySharp 更有名。 chrome 应用商店本身需要翻墙才能访问，因此需要先在 shadowsocks 启动代理模式下下载安装，再关闭 shadowsocks 代理。 安装完毕后，右击 switchyOmega 图标，选择选项，进入 switchOmega 配置界面。 创建 shadowsocks 情景模式 新建一个情景模式，比如叫 SS，代理协议选择 socks5，代理地址为 127.0.0.1，端口 1080。 现在切换到 SS 情景模式就可以通过 shadowsocks 科学上网了。后面获取自动切换规则列表 设置自动切换模式 在设置界面选择自动切换模式，在 “切换规则” 中勾选“规则列表规则”，对应的情景模式选择刚刚新建的 SS。 然后在下面的规则列表地址中填写 https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt 规则列表格式选择 AutoProxy。 然后点击立即更新情景模式， 更新完成后会有提示。 点击左侧的 “应用选项”。然后单击 switchyOmega 图标，选择自动切换，就可以在访问“不存在的网站” 时自动切换到 shadowsocks 代理了。 添加自定义规则如果遇到某个国外网站无法直接连接或速度太慢时，可以单击 switchyOmega 图标，选择 “添加条件”，情景模式选择 SS，就可以了。 这时打开 switchyOmega 选项，在自动切换模式的切换规则中就可以看到刚刚添加的规则。可以在这里管理自定义的规则。 导入和导出 switchyOmega 设置 如果换了一台电脑，重新设置一遍 switchyOmega 就太麻烦了。可以在设置好的 switchyOmega 中导出设置文件，在另一个 chrome 浏览器中导入，就可以直接复制原来的设置了。 在 switchyOmega 选项的左侧点击 “导入 / 导出”，点击“生成备份文件” 即可生成 switchyOmega 设置备份。点击 “从备份文件恢复” 可以导入备份]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>搭建shadowsocks服务器</tag>
        <tag>搭梯子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat]]></title>
    <url>%2Fposts%2F55324%2F</url>
    <content type="text"><![CDATA[安装tomcat需要有JDK环境。系统中已安装gcc、automake等编译工具。参考：java jdk环境搭建 tomcat官网下载：http://tomcat.apache.org/download-90.cgi 下载解压这里就指定了安装目录是/usr/local/tomcat，后面都要用这个目录，也可以是/opt等其他目录。1234cd /usr/localwget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.0.M13/bin/apache-tomcat-9.0.0.M13.tar.gztar zxvf apache-tomcat-9.0.0.M13.tar.gzmv apache-tomcat-9.0.0.M13 tomcat 编译守护程序1234567cd /tomcat/bin/tar zxvf commons-daemon-native.tar.gz#进入解压出来的目录，一般是commons-daemon-X.X.XX-native-src这个文件夹cd commons-daemon-1.0.10-native-src/unix./configuremake #生成jsvc守护程序cp jsvc /usr/local/tomcat/bin 这里如果./configure失败(提示找不到jdk路径，是因为jdk环境变量没有配置好)可以用./configure --with-java=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64(JAVA_HOME)临时代替（这是我的JDK安装目录）。 设置环境变量这里注意不要写错了，一旦写错，大多数命令基本都会失效，必须手工指定路径运行命令修改/usr/bin/vim /etc/profile然后注销或重启生效。 编辑文件：vim /etc/profile加入tomcat路径；和/tomcat/bin路径。注意格式，一般有两种，一种是每引用一个变量就export一下，像这种：12export CATALINA_HOME=/usr/local/tomcat/export PATH=$CATALINA_HOME/bin #这里注意PATH,变量不能重复出现，相同的路径要合并，前面加":" 还有一种是合并起来写，像这样：123CATALINA_HOME=/usr/local/tomcat/ #这一句新加的PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$CATALINA_HOME/bin #这里增加了（:$CATALINA_HOME/bin）export JAVA_HOME JRE_HOME CLASS_PATH PATH CATALINA_HOME #这里增加了（CATALINA_HOME） 使配置立刻生效：source /etc/profile或. /etc/profile 修改守护程序在tomcat/bin目录里面有一个daemon.sh 这个文件就是启动和关闭tomcat的服务守候程序。 注意：之前的一些tomcat版本,例如tomcat 6.0.x, 可能没有这个文件, 其实这个文件就是放在commons-daemon-x.x.x-native-src/unix/samples/Tomcat7.sh这儿的（此目录还有一个Tomcat5.sh），只不过新版本的tomcat把它移动到了bin目录下，并取名为daemon.sh了。所以，如果您使用的是tomcat 6，那就把这个Tomcat7.sh文件复制到bin目录下，并取名为daemon.sh即可。 修改daemon环境变量：cd /usr/local/tomcat/bin &amp;&amp; vim ./daemon.sh修改TOMCAT_USER=tomcat为您要指定身份运行的linux账号用户名,此处指定用户名为tomcat(一般不改或新建其他用户，不用现成的用户，要禁止登陆)。并把JAVA_HOME=…前面的注释（即“#”号）去掉，并设置为jdk的安装目录路径。修改好保存退出。创建用户、修改权限。1234useradd -M tomcat #创建没有主目录的tomcat用户chsh tomcat -s /sbin/nologin #禁止tomcat登陆操作，类似于windows的系统账户chown -R tomcat /usr/local/tomcat #将/usr/local/tomcat下的所有档案与子目录进行相同的拥有者变更为tomcatchmod +x /usr/local/tomcat/bin/*.sh #为tomcat/bin/目录下的*.sh添加相应的x权限 防火墙、开机自启12345678vim /etc/sysconfig/iptables#加入下面这句，注意加到22端口下，不要加在-A INPUT -j REJECT语句之后，会失效。-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT #tomcat默认端口是8080service iptables restart #重启防火墙cd /usr/local/tomcat/bin./startup.sh #启动tomcat./daemon.sh start #启动守护程序curl http://localhost:8080 #测试一下是否启动 如果daemon.sh启动不了，重点查验tomcat的bin目录下的*.sh是否有x可执行权限、linux帐号是否有tomcat目录的读写权限，是否有tomcat/logs日志目录的写权限等等。 添加tomcat为Linux的服务，需要创建一个软链到/etc/init.d/目录中123456ln -s /usr/local/tomcat/bin/daemon.sh /etc/init.d/tomcat#现在就可以用系统服务来启动停止tomcat服务啦。/etc/init.d/tomcat start #启动tomcatservice tomcat start #启动tomcat/etc/init.d/tomcat stop #关闭tomcatservice tomcat stop #关闭tomcat 设置tomcat服务开机启动，法1.在daemon.sh中增加以下的语句：123#!/bin/sh #这句是原文件里有的，下面的2句是要添加的,是有#号的。# chkconfig: 2345 90 15# description: Tomcat-en Manager 再运行 chkconfig命令增加tomcat服务，而达到自启动(只有上一步“添加tomcat为Linux的服务”生效了这一步才能执行，否则报错)1chkconfig --add tomcat 法2.修改/etc/rc.d/rc.local在/etc/rc.d/rc.local文件最后添加下面两句12345export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64/usr/local/tomcat/bin/startup.sh start或export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64/usr/local/tomcat/bin/catalina.sh start 增加可执行权限：chmod +x /etc/rc.d/rc.local 关于catalina.sh启动文件，参考：catalina.sh详解 如果想再创建一个tomcat服务，只需要将/usr/local/tomcat这个目录复制一份，例如：1cp /usr/local/tomcat /usr/local/tomcat1 再修改一下tomcat1的端口号(/usr/local/tomcat/opt/tomcat1/conf/server.xml中的端口号不能与其它的服务重复)。最后从上面所述”设置环境变量“开始，一直往下，设置新用户，创建用户，修改权限，设置防火墙，新建服务tomcat1，设置开机自启，就OK啦。通过这种方式，您就可以为一台Linux服务器创建任意多个tomcat服务了。最后只需要安装一个前端服务器（例如Nginx或Apache），将不同域名的请求转发到不同的tomcat服务程序就可以了。 参考： Linux下Apache与多个Tomcat 集群负载均衡 Nginx Tomcat 集群负载均衡解决笔记 Tomcat组件安装+Nginx反向代理Tomcat+Apache使用mod_jk和mod_proxy反向代理和负载均衡]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java jdk环境搭建]]></title>
    <url>%2Fposts%2F59%2F</url>
    <content type="text"><![CDATA[Java(jre) 运行环境只提供Java程序基本的运行环境。 安装Ubuntu默认已经安装好了，可以运行命令升级。12apt-get updateapt-get upgrate 或运行命令安装：12apt list *openjdk* #查看当前apt源有那些版本apt-get install openjdk-7-jre 安装完后检查一下版本：java -version Centos12yum list *openjdk* #查看当前yum源有那些版本yum install java-1.8.0-openjdk #安装Java运行环境 安装完后检查一下版本：java -version JDK(jdk) 开发环境除了开发，任何涉及Java编译的情况都需要依赖jdk开发环境。安装JDK环境强烈建议先安装好JRE环境。JDK官网下载 注意：环境变量设置错误如果环境变量没有配置成功，可能是JAVA_HOME的路径不对,可以手动找到位置并替换掉(find / -name dt.jar即可定位，找不到文件证明JDK没有安装)，一般JAVA_HOME目录下的结构是这样的12345678910├── jre│ ├── bin│ ├── lib │ ├── bin├── lib│ ├── bin│ ├── lib│ │ ├── dt.jar│ │ ├── tools.jar 安装Ubuntu法1：apt安装123apt list *openjdk* 或：apt-cache search java|grep jdk #列出版本，注意是apt不是apt-getapt-get install openjdk-7-jdk 设置环境变量安装好后默认可以运行程序，一些程序找不到jdk工作目录时就要手动设置。编辑文件：vi /etc/profile在最后结尾处加入以下代码：123456#set java environmentJAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64JRE_HOME=$JAVA_HOME/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 使修改立刻生效：source /etc/profile再次检查，看看配置文件是否修改正确。12java -versionjavac -version 法2：压缩包安装1234mkdir /usr/java &amp;&amp; cd /usr/java #创建并进入目录curl -O http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.tar.gztar -zxvf jdk-8u112-linux-x64.tar.gzmv jdk-8u112-linux-x64 jdk1.8.0_112 #如果名称本身为jdk1.8.0_112就不用执行这一步了 设置环境变量编辑文件：vi /etc/profile添加如下内容：123456#set java environmentJAVA_HOME=/usr/java/jdk1.8.0_112JRE_HOME=/usr/java/jdk1.8.0_112/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 让修改生效：source /etc/profile验证：java -version Centos法1：yum安装12yum search java|grep jdk #列出有哪些版本yum install java-1.8.0-openjdk-devel* 设置环境变量安装好后默认可以运行程序，一些程序找不到jdk工作目录时就要手动设置。编辑文件：vi /etc/profile在最后结尾处加入以下代码：123456#set java environmentJAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64JRE_HOME=$JAVA_HOME/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 使修改立刻生效：source /etc/profile再次检查，看看配置文件是否修改正确。12java -versionjavac -version 法2：rpm包12curl -O http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpmrpm -ivh jdk-8u112-linux-x64.rpm 设置环境变量编辑文件：vi /etc/profile添加如下内容：123456#set java environmentJAVA_HOME=/usr/java/jdk1.8.0_112JRE_HOME=/usr/java/jdk1.8.0_112/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 让修改生效：source /etc/profile验证：java -version 法3：压缩包安装1234mkdir /usr/java &amp;&amp; cd /usr/java #创建并进入目录curl -O http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.tar.gztar -zxvf jdk-8u112-linux-x64.tar.gzmv jdk-8u112-linux-x64 jdk1.8.0_112 #如果名称本身为jdk1.8.0_112就不用执行这一步了 设置环境变量编辑文件：vi /etc/profile添加如下内容：123456#set java environmentJAVA_HOME=/usr/java/jdk1.8.0_112JRE_HOME=/usr/java/jdk1.8.0_112/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 让修改生效：source /etc/profile验证：java -version Mac、Windows官网下载安装包安装，Mac的一般是自动设置（没有设置的参考上文），Windows还要在高级设置中设置环境变量。 环境变量说明yum、apt在线管理安装Java用alternatives进行版本控制，相应版本安装在/usr/lib/jvm/之后，会在alternatives中注册，在/etc/alternatives目录下会产生一些链接到/usr/lib/jvm/中刚安装好的jdk版本。 在/usr/bin下面会有链接到/etc/alternatives的相应的文件。比如，/usr/bin下面会有一个链接文件java的映射关系如下： /usr/bin/java--&gt;/etc/alternatives/java/etc/alternatives/java--&gt;/usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java这样，java命令不用设置环境变量，就可以正常运行了。但如果对于tomcat或其他软件来说还是要设置环境变量。同样，如果安装新的版本jre/jdk，就会重新链接到最新安装的jre/jdk版本。当然，也可以使用alternatives修改所要使用的版本。 可以用验证一下1234which java #得到Java的运行路径ll /usr/bin/java |grep java #得到Java指向alternatives的路径ll /etc/alternatives/java |grep java #得到Java的home路径如下/usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java rpm、deb包、压缩包安装默认会把jdk安装到/usr/java/jdk1.8.0_112，然后通过三层链接，链接到/usr/bin/具体链接如下：/usr/bin/java--&gt;/usr/java/default/bin/java--&gt;/usr/java/jdk1.8.0_112]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>java jdk环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux各版本root本地密码破解]]></title>
    <url>%2Fposts%2F65067%2F</url>
    <content type="text"><![CDATA[忘记了root密码可以用此方法修复。 RedHat/CentOS/Fedora 1.在grub选项菜单按E进入编辑模式 2.编辑kernel 那行最后空一格加上S (或者Single)然后回车 3.按B，启动到single-user mode模式 4.进入后执行下列命令12345678passwdreboot或mount -t proc proc /procmount -o remount,rw /passwdsyncreboot Debian linux 1.在grub选项菜单Debian GNU/Linux,…(recovery mode)，按e进入编辑模式 2.编辑kernel那行最后面的 ro single 改成 rw single init=/bin/bash，按b执行重启 3.进入后执行下列命令123mount -apasswd rootreboot Freebsd 系统 1.开机进入引导菜单 2.选择每项(按4)进入单用户模式 3.进入之后输入一列命令123456mount -afsck -ypasswd #(修改密码命令)root #(要破解密码的用户名)#Enter new unix password:init 6 #(重启) Solaris 系统 1.在grub选项菜中选择solaris failasfe 项 2.系统提示Do you wish to have it mounted read-write on /a ?[y,n,?] 选择y 3.就进入单用户模式 4.输入下列命令:passwd 5.init 6 (重启) NetBsd 系统 1.开机：当出现提示符号并开始倒数五秒时， 键入以下指令： &gt; boot -s (进入单用户模式命令) 2.在以下的提示符号中 Enter pathname of shell or RETURN for sh: 按下 Enter。 3.键入以下指令：12mount -afsck -y 4.使用 passwd 更改 root 的密码。 5.使用 exit 指令进入多人模式。 SUSE 系统 1.重新启动机器，在出现grub引导界面后，在启动linux的选项里加上init=/bin/bash，通过给内核传递init=/bin/bash参数使得OS在运行login程序之前运行bash，出现命令行。 2.稍等片刻出现(none)#:命令行。 3.这时输入mount -n / -o remount,rw 表示将根文件系统重新mount为可读写，有了读写权限后就可以通过passwd命令修改密码了。 4.这时输入passwd命令就可以重置密码了 5.修改完成后记得用mount -n / -o remount,ro将根文件系统置为原来的状态。]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Linux各版本root本地密码破解</tag>
        <tag>root密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux检测硬件信息脚本]]></title>
    <url>%2Fposts%2F49171%2F</url>
    <content type="text"><![CDATA[常常要了解一台服务器的基本硬件情况，以便更好的安排。写了一个脚本能大概了解服务器的硬件配置情况，方便安排。直接把代码保存为.sh文件，加权限即可运行。现成文件下载 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/bin/bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATHif [ $(cat /etc/issue |grep -v Kernel |awk &apos;&#123;print $1&#125;&apos;) != &quot;CentOS&quot; ]; then apt-get install smartmontools -yfiecho &quot;&quot;echo &quot;---------------------服务器信息------------------------&quot;echo &quot;服务器品牌：&quot;`dmidecode|grep &quot;System Information&quot; -A9 | grep Manufacturer |awk &apos;&#123;print $2&#125;&apos;`echo &quot;服务器型号：&quot;`dmidecode|grep &quot;System Information&quot; -A9 | grep Product |awk &apos;&#123;print $3&#125;&apos;`echo &quot;序列号：&quot;`dmidecode|grep &quot;System Information&quot; -A9 | grep Serial |awk &apos;&#123;print $3&#125;&apos;`echo &quot;&quot;echo &quot;&quot;echo &quot;---------------------主板信息--------------------------&quot;b=`dmidecode|grep &quot;System Information&quot; -A9|egrep Manufacturer: |awk &apos;&#123;print $2&#125;&apos;`echo &quot;主板品牌：&quot; $bc=`dmidecode |grep &quot;System Information&quot; -A9 |grep &quot;Product Name:&quot; |awk &apos;&#123;print $3&#125;&apos;`echo &quot;主板型号：&quot; $cecho &quot;&quot;echo &quot;&quot;echo &quot;--------------------操作系统信息------------------------&quot;echo &quot;系统：&quot; `cat /etc/issue |grep -v Kernel`echo &quot;主机名：&quot; `uname -n`echo &quot;内核版本：&quot; `uname -r`echo &quot;&quot; echo &quot;----------------------CPU信息--------------------------&quot;echo &quot;CPU个数：&quot; `cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l`echo &quot;CPU型号：&quot; `cat /proc/cpuinfo | grep &apos;model name&apos; |uniq |awk -F : &apos;&#123;print $2&#125;&apos;`echo &quot;每个CPU核数：&quot; `cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq |awk &apos;&#123;print $4&#125;&apos;`echo &quot;CPU总个数：&quot; `cat /proc/cpuinfo | grep &quot;physical id&quot; | uniq | wc -l`echo &quot;逻辑CPU个数（总核数）：&quot; `cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l`echo &quot;&quot;echo &quot;&quot;echo &quot;---------------------内存信息--------------------------&quot;echo &quot;内存插槽总数：&quot; `dmidecode |grep -A16 &quot;Memory Device$&quot; |grep Manufacturer: | wc -l`echo &quot;未使用插槽数：&quot; `dmidecode |grep -A16 &quot;Memory Device$&quot; |grep &apos;Manufacturer: NO DIMM&apos; | wc -l`echo &quot;厂商如下：&quot; dmidecode -t memory |grep Manufacturerecho &quot;内存型号：&quot; dmidecode -t memory |grep &apos;Part Number&apos;echo &quot;每条内存大小：&quot; dmidecode|grep -A5 &quot;Memory Device&quot;|grep Size|grep -v Rangeecho &quot;每条内存频率：&quot; dmidecode|grep -A16 &quot;Memory Device&quot;|grep Speedecho &quot;总内存（GB）：&quot; `free -g |grep Mem |awk &apos;&#123;print $2&#125;&apos;`echo &quot;&quot;echo &quot;&quot;echo &quot;---------------------硬盘信息--------------------------&quot;echo &quot;硬盘厂商、型号、序列号：&quot; `smartctl -a /dev/sda |egrep &quot;Device Model:|Serial Number:&quot;`echo &quot;硬盘数量、容量：&quot; `fdisk -l |grep &quot;Disk /dev/sd&quot;`echo &quot;&quot;echo &quot;&quot;echo &quot;---------------------网卡信息--------------------------&quot;echo &quot;网卡设备：&quot;lspci | grep Ethernetecho &quot;&quot;echo &quot;&quot;]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Linux检测硬件信息脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用工具]]></title>
    <url>%2Fposts%2F2336%2F</url>
    <content type="text"><![CDATA[工具Git-osx-install：https://sourceforge.net/projects/git-osx-installer/ Homebrew - Mac OSX 的包管理1ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)" XCode 官方开发工具，同时也能解决很多环境问题 wget1brew install wget 有时遇到默认的下载链接速度十分坑爹，就 brew edit wget 修改下链接再装 iterm2https://www.zhihu.com/question/27447370 Oh-my-zsh1wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 重新打开终端就好了。卸载：uninstall_oh_my_zsh 终极 Shell——ZSH autojump插件zsh 和 autojump 的组合形成了 zsh 下最强悍的插件Mac：brew install autojumpLinux：1234wget https://github.com/downloads/joelthelion/autojump/autojump_v21.1.2.tar.gztar zxvf autojump_v21.1.2.tar.gzcd autojump_v21.1.2./install.sh 修改配置文件vim ~/.zshrc加入以下这句1[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh 技巧ssh远程连接突然连接不了在重装了远程主机（云主机）系统之后，即使有免密钥登录也会失败。出现类似如下的提示：12345678910111213@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the RSA key sent by the remote host is 07:36:8e:d0:72:88:38:f7:21:10:c3:12:d6:35:ad:55. Please contact your system administrator. Add correct host key in /Users/watsy/.ssh/known_hosts to get rid of this message. Offending RSA key in /Users/watsy/.ssh/known_hosts:1 RSA host key for 192.168.2.108 has changed and you have requested strict checking. Host key verification failed. 这时只要执行rm -rf ~/.ssh/known_hosts删除记录主机信息的文件就可以重新连接了。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Mac常用工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python版本升级]]></title>
    <url>%2Fposts%2F40882%2F</url>
    <content type="text"><![CDATA[Centos一般情况下yum源有更新都是可以直接升级到新版的，在yum源无新版时一般采用源码编译。 更新python千万不要把老版本的删除！新老版本是可以共存的，很多基本的命令、软件包都要依赖预装的老版本python的，比如yum。 源码包下载：http://python.org/ftp/python/12345678910yum -y install gccwget http://python.org/ftp/python/3.3.0/Python-3.3.0.tar.bz2 tar -jxvf Python-3.3.0.tar.bz2 cd Python-3.3.0 ./configure make all make install make clean make distclean /usr/local/bin/python3 -V 这时python3安装好了，但需要输入python3才能运行。替换旧版本（这里的旧版本是2.4的）12345mv /usr/bin/python /usr/bin/python2.4#当前python的版本为2.4所以是python2.4 ,看/usr/bin/下版本是多少。ln -s /usr/local/bin/python3.3 /usr/bin/python #这里python3.3也一样，安装多少版就写多少python -V #查看当前默认python版本 默认的python成功指向3.3.0但此时yum不能用了，还要修改一下文件vi /usr/bin/yum把文件头部的#!/usr/bin/python改成#!/usr/bin/python2.4 (改为之前的老版本号)保存退出，yum即可正常使用。如若有其他命令、软件不能正常使用，仿照yum配置文件的修改方法，修改其配置文件即可。 CentOS 安装easy_install、pip12345678910111213wget -q http://peak.telecommunity.com/dist/ez_setup.pypython ez_setup.py#CentOS安装python包管理安装工具pip：wget --no-check-certificate https://github.com/pypa/pip/archive/1.5.5.tar.gz#注意：wget获取https的时候要加上：--no-check-certificatetar zvxf 1.5.5.tar.gz #解压文件cd pip-1.5.5/python setup.py installOK，安装好pip了，接着安装 requests吧。pip install requests]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Python版本升级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swap分区转换]]></title>
    <url>%2Fposts%2F4829%2F</url>
    <content type="text"><![CDATA[普通分区转Swap分区增加Swap分区，适用于系统没有Swap分区，或者有Swap分区但空间很小的情况。 查看有哪些分区：fdisk -l查看已挂载的分区：df -h这两条命令可以看出系统有没有多余的没有使用的分区。 查看内存和Swap空间：free -m -m是以MB为单位显示 total used free shared buffers cachedMem: 996 928 67 0 215 482-/+ buffers/cache: 231 765Swap: 0 0 0 上表中Swap分区大小是0（有Swap分区没有激活，或者根本没有Swap分区），这时我们需要增加Swap空间，有2种方式，都要用root用户操作。 压缩正常的分区，分出小部分转换为Swap分区。如果是LVM分区，参考：LVM磁盘管理 找到要要缩小的磁盘，比如/home，先备份/home下的文件 12cd /tmptar -zcpv -f home.tar.gz /home/ 然后卸载/home下的分区，先在终端df -h一下，记下挂载在/home下的设备名，假设是/dev/sda5。执行命令umount /home或umount /dev/sda5就卸载了。 重新分区，执行命令fdisk /dev/sda输入p,查看一下当前的分区表输入d，删除分区，输入5，删除/dev/sda5输入n，新建分区，输入+8G，建立一个8G分区输入n，新建分区，输入起始磁道号，然后输入结束磁道号，把剩余空间再新建一个分区这时候，会提示要reboot才能读取磁盘分区表，我们不reboot，输入命令partprobe就可以了！ 挂载磁盘，恢复/home 12cd /tmptar -zxvf home.tar.gz -C /home 把8G空间转换为Swap分区，和下面的内容是一样的。 有未使用的分区或为激活的Swap分区，直接转换为Swap分区激活即可。这里假设/dev/sda5是空闲空间。 格式化分区：mkfs.ext3 /dev/sda5会有UUID号，记录下来备用。 将分区转换成交换分区，格式化交换分区（mkswap）：mkswap /dev/sda5 激活交换分区：swapon /dev/sda5 现在再free -m看看，Swap分区已经不为0了。 最后添加开机挂载就行，按格式写好,注意UUID是刚刚记录下来的。1UUID=aa65f414-312f-4ec8-aed6-9e0423e87938 none swap sw 0 0 Swap分区转普通分区 关闭交换分区（swapoff）：swapoff /dev/sda5 重新格式化分区：mkfs.ext3 /dev/sda5会有UUID号，记录下来备用。 设置磁盘巻标：e2label /dev/sda5 sky 查看巻标： 12e2label /dev/sda5 sky 根据巻标查看硬盘：findfs LABEL=sky 最后添加开机挂载就行，按格式写好,注意UUID是刚刚记录下来的。1UUID=aa65f414-312f-4ec8-aed6-9e0423e87938 none swap sw 0 0]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>swap分区转换</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站链接~~]]></title>
    <url>%2Fposts%2F44568%2F</url>
    <content type="text"><![CDATA[一些方便个人查询的链接，而不用打开笔记，不喜欢请忽略。 解决问题 Q&amp;A各种报错:stackoverflow Markdown语法：Markdown入门指南Markdown中插入数学公式 iOS APP打包成 ipa包(简单粗暴方法) 运维在线man命令查询：http://man.linuxde.net/Linux常用命令大全：http://www.cnblogs.com/DamonTang/archive/2012/10/17/2727942.html运维abcDocker：http://www.abcdocker.com/运维俱乐部：http://www.ywclub.org/ 持续集成（上线部署）：瓦力：http://www.walle-web.ioJenkins：https://jenkins.io 学习、技能免费计算机编程类书籍：https://github.com/justjavac/free-programming-books-zh_CNhttp://siberiawolf.com/free_programming/index.htmlhttps://github.com/it-ebooks/it-ebooks-archivehttp://www.yiibai.com/ godeye:http://www.godeye.org/ HTML： W3school：http://www.w3school.com.cn/index.htmlhttp协议：http://www.kancloud.cn/kancloud/tealeaf-httpHtml5 tricks：http://www.html5tricks.com/jquery-china-map.htmlRGB值与色值：RGB值与色值之间的联系 Python： Python简明教程：http://www.kuqin.com/abyteofpython_cn/Python之路：http://www.cnblogs.com/alex3714/articles/5465198.html#3519330Python在线手册：http://docs.pythontab.com/Python 练手：https://www.zhihu.com/question/29372574用Python做些神奇好玩的事情:https://www.zhihu.com/question/21395276 shell： 京峰免费shell课程：http://v.jfedu.net/web/course/2github年度shell：https://www.zhihu.com/question/28182203Shell教程：http://c.biancheng.net/cpp/shell/ PHP：学PHP最快要多久？2个月学PHP：http://www.zhihu.com/question/39078661?plg_nld=1&amp;plg_uin=1&amp;plg_auth=1&amp;plg_nld=1&amp;plg_usr=1&amp;plg_vkey=1&amp;plg_dev=1 版本控制图形客户端：https://www.sourcetreeapp.com/Git知识：http://lib.csdn.net/base/git SVN： webnginx中文文档：http://www.nginx.cn/doc/index.html 优秀的博客优秀Coding博客分享：https://coding.net/u/coding/p/awesome-blogs/githttp://www.arao.mehttp://www.ilanni.comhttp://iwanli.mehttp://blog.foreverqing.comhttp://www.jokinkuang.infohttp://www.tianfeiyu.comhttp://yonsm.nethttp://tianshaojie.com Androidhttp://www.ezlippi.comhttp://www.joryhe.comhttps://www.maoshu.cc/page/6 猫叔Machttps://teddysun.comhttps://neveryu.github.iohttp://willxue.tophttp://zhishuo.infohttp://notes.iissnan.comhttp://blog.tangxiaozhu.com/p/45374067/http://www.tennfy.com/ VPShttp://www.linuxde.net/http://www.cnblogs.com/vamei/ Login926:http://www.jianshu.com/p/53e0d2a617dahttp://login926.top https://haiwx.github.iohttps://cyang.tech 卢松松的博客http://lusongsong.com/ https://qqdie.com/ 梯子搬瓦工VPS(支持支付宝)新手教程：http://www.tennfy.com/2020.html购买链接：https://bwh1.net/vps-hosting.php其他教程：http://www.tennfy.com/2083.html XX-Net:https://github.com/XX-net/XX-Net（免费） https://www.dou-bi.co 各种SS：https://liyuans.com/archives/free-ss-account-collection.html 如有乐享：http://51.ruyo.net见微Seemicro：http://www.seemssr.com MarkSS:http://markss.xyz（个人维护，免费共享）http://markss.club（个人维护，免费共享） GFW论坛：https://bit.no.com:43110/GFWtalk.bit/?Topics:10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa/ 环境搭建oneinstack一键环境 https://oneinstack.com一键LNMP http://lnmp.org一键LAMP http://www.wdlinux.cn/bbs/forum-5-1.html php官网 http://www.php.net/phpmyadmin http://www.phpmyadmin.net/mysql http://www.mysql.com/ Discuz! http://www.discuz.net/forum.phpWordPress https://cn.wordpress.org/ Docker 平台Daocloud：https://www.daocloud.io 网站管理joomla https://www.joomla.org/WDCP http://www.wdlinux.cn/wdcp/AMH http://amh.sh/install.htmPHPCMS http://www.phpcms.cn/ yum源网易163源 http://mirrors.163.com/阿里云源 http://mirrors.aliyun.com/搜狐源 http://mirrors.sohu.com/中科大源 http://mirrors.ustc.edu.cn/ 系统下载CentOS官网 https://www.centos.org/Ubuntu官网 http://www.ubuntu.com/downloadDebian官网 https://www.debian.org/Fedora官网 https://getfedora.org/RedHat官网 https://www.redhat.com 博客平台静态：Hexo https://hexo.ioForbox https://www.farbox.comJekyll http://jekyll.com.cnPelican http://blog.getpelican.com 动态：typecho http://typecho.orgWordPress https://cn.wordpress.orgZ-Blog https://www.zblogcn.comEmlog http://www.emlog.net 持续集成jenkins http://www.jenkins.io/walle(瓦力) http://www.walle-web.io/CheungSSH http://www.oschina.net/p/cheungssh 批量安装Linux之搭建服务器http://www.centoscn.com/image-text/setup/2015/0126/4564.htmlhttp://www.centoscn.com/image-text/setup/2014/0912/3720.html https://my.oschina.net/alanlqc/blog/147047 Python生成二维码艺术二维码：https://github.com/sylnsfar/qrcode 素材PS 插件和小软件推荐：http://www.4kong.com 高精度IP定位普通精度IP定位：https://www.opengps.cn/Data/IP/IPSearch.aspx百度高精度IP定位：https://www.opengps.cn/Data/IP/IPHighAccuracy.aspx 工具类网站在线转换工具：http://cn.office-converter.comChrome插件网：http://www.cnplugins.com网盘数据搬家：www.multcloud.com HTTPS证书各大云主机商都有提供免费的开发者证书，一般是一年签一次。另外不建议用沃通，不太稳定，国外产品是不认沃通的，证书还有可能被吊销的风险。 Let’s Encrypt HTTPS 证书快速申请并自动续期]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>网页链接更新页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库主主互备（高可用）]]></title>
    <url>%2Fposts%2F27740%2F</url>
    <content type="text"><![CDATA[本文是在Neil的博客上看到的一篇博文，由于没有试验环境，没有经过测试，以后测试后会更新并删除本段文字，摘录分享，仅供参考。 mysql 主主互备双机热备的概念简单说一下，就是要保持两个数据库的状态自动同步。对任何一个数据库的操作都自动应用到另外一个数据库，始终保持两个数据库数据一致。 这样做的好处多。 1.可以做灾备，其中一个坏了可以切换到另一个。 2.可以做负载均衡，可以将请求分摊到其中任何一台上，提高网站吞吐量。 3.对于异地热备，尤其适合灾备。 mysql -v,查看使用的是mysql 5.5.34， mysql 备份工作原理简单的说就是把 一个服务器上执行过的sql语句在别的服务器上也重复执行一遍， 这样只要两个数据库的初态是一样的，那么它们就能一直同步。 当然这种复制和重复都是mysql自动实现的，我们只需要配置即可。上图中有两个服务器， 演示了从一个主服务器（master） 把数据同步到从服务器（slave）的过程。这是一个主-从复制的例子。 主-主互相复制只是把上面的例子反过来再做一遍。 所以我们以这个例子介绍原理。 对于一个mysql服务器， 一般有两个线程来负责复制和被复制。当开启复制之后。 1.作为主服务器Master， 会把自己的每一次改动都记录到 二进制日志 Binarylog 中。 （从服务器会负责来读取这个log， 然后在自己那里再执行一遍。） 2.作为从服务器Slave， 会用master上的账号登陆到 master上， 读取master的Binarylog, 写入到自己的中继日志 Relaylog， 然后自己的sql线程会负责读取这个中继日志，并执行一遍。 到这里主服务器上的更改就同步到从服务器上了。 在mysql上可以查看当前服务器的主，从状态。 其实就是当前服务器的 Binary（作为主服务器角色）状态和位置。 以及其RelayLog（作为从服务器）的复制进度。 例如我们在主服务器上查看主状态：第一行表明 当前正在记录的 binarylog文件名是： mysql-bin.000014.我们可以在mysql数据目录下，找到这个文件： 第二行， 107. 表示当前的文件偏移量， 就是写入在mysql-bin.000014 文件的记录位置。这两点就构成了 主服务器的状态。 配置从服务器的时候，需要用到这两个值。 告诉从服务器从哪读取主服务器的数据。 （从服务器会登录之后，找到这个日志文件，并从这个偏移量之后开始复制。） 第三行，和第四行，表示需要记录的数据库和需要忽略的数据库。 只有需要记录的数据库，其变化才会被写入到mysql-bin.000014日志文件中。 后面会再次介绍这两个参数。 我们还可以在从服务器上，查看从服务器的复制状态：mysql&gt; show slave status\G我们还是来重点解释途中的红圈的部分： Master_host 指的是 主服务器的地址。 Master_user 指的是主服务器上用来复制的用户。 从服务器会用此账号来登录主服务。进行复制。 Master_log_file 就是前面提到的， 主服务器上的日志文件名. Read_Master_log_pos 就是前面提到的主服务器的日志记录位置， 从服务器根据这两个条件来选择复制的文件和位置。 Slave_IO_Running: 指的就是从服务器上负责读取主服务器的线程工作状态。 从服务器用这个专门的线程链接到主服务器上，并把日志拷贝回来。 Slave_SQL_Running: 指的就是专门执行sql的线程。 它负责把复制回来的Relaylog执行到自己的数据库中。 这两个参数必须都为Yes 才表明复制在正常工作。 其他的参数之后再介绍。 mysql 双机热备实战主从复制了解了上面的原理之后， 我们来实战。 这里有两个重点， 要想同步数据库状态， 需要相同的初态，然后配置同步才有意义。 当然你可以不要初态，这是你的自由。 我们这里从头开始配置一遍。 我们先以A服务器为起点， 配置它的数据库同步到B。 这就是主-从复制了。 之后再反过来做一次，就可以互相备份了。 在A上面创建专门用于备份的用户12grant replication slave on *.* to 'repl_userl'@''grant replication slave on *.* to 'repl_user'@'192.***.***.***' identified by 'hj34$%&amp;mnkb'; 上面把ip地址换成B机器的ip地址。 只允许B登录。安全。用户名为： repl_user密码为： hj34$**nkb这个等会在B上面要用。 开启主服务器的 binarylog。很多服务器是默认开启的，我们这里检查一下：打开 /etc/my.cnf解释一下红框中的配置：前面三行， 你可能已经有了。binlog-do-db 用来表示，只把哪些数据库的改动记录到binary日志中。 可以写上关注hello数据库。 但是我把它注释掉了。 只是展示一下。 可以写多行，表示关注多个数据库。binlog-ignore-db表示，需要忽略哪些数据库。我这里忽略了其他的4个数据库。 最后两行用于在 双主（多主循环）互相备份。 因为每台数据库服务器都可能在同一个表中插入数据，如果表有一个自动增长的主键，那么就会在多服务器上出现主键冲突。 解决这个问题的办法就是让每个数据库的自增主键不连续。 上图说是， 我假设需要将来可能需要10台服务器做备份， 所以auto-increment-increment 设为10。 而 auto-increment-offset=1 表示这台服务器的序号。 从1开始， 不超过auto-increment-increment。这样做之后， 我在这台服务器上插入的第一个id就是 1， 第二行的id就是 11了， 而不是2。（同理，在第二台服务器上插入的第一个id就是2， 第二行就是12， 这个后面再介绍） 这样就不会出现主键冲突了。 后面我们会演示这个id的效果。 获取主服务器状态， 和同步初态。假设我现在有这些数据库在A上面。如果你是全新安装的， 那么不需要同步初态，直接跳过这一步，到后面直接查看主服务器状态。这里我们假设有一个 hello 数据库作为初态。 先锁定 hello数据库：FLUSH TABLES WITH READ LOCK; 然后导出数据：我这里只需要导出hello数据库， 如果你有多个数据库作为初态的话， 需要导出所有这些数据库： 然后查看A服务器的binary日志位置：记住这个文件名和 位置， 等会在从服务器上会用到。 主服务器已经做完了， 可以解除锁定了：UNLOCK TABLES; 设置从服务器 B 需要复制的数据库打开从服务器 B 的 /etc/my.cnf 文件： 解释一下上面的内容: server-id 必须保证每个服务器不一样。 这可能和循环同步有关。 防止进入死循环。 replicate-do-db 可以指定需要复制的数据库， 我这里注掉了。 演示一下。 replicate-ignore-db 复制时需要排除的数据库， 我使用了，这个。 除开系统的几个数据库之外，所有的数据库都复制。 relay_log 中继日志的名字。 前面说到了， 复制线程需要先把远程的变化拷贝到这个中继日志中， 在执行。 log-slave-updates 意思是，中继日志执行之后，这些变化是否需要计入自己的binarylog。 当你的B服务器需要作为另外一个服务器的主服务器的时候需要打开。 就是双主互相备份，或者多主循环备份。 我们这里需要， 所以打开。 保存， 重启mysql。 导入初态， 开始同步。把刚才从A服务器上导出的 hello.sql 导入到 B的hello数据库中， 如果B现在没有hello数据库，请先创建一个， 然后再导入：创建数据库：mysql&gt; create database hello default charset utf8;把hello.sql 上传到B上， 然后导入：mysql -uroot -p hello &lt; hello.sql如果你刚才导出了多个数据库， 需要把他们都一一上传导入。 开启同步, 在B服务器上执行：123456CHANGE MASTER TO MASTER_HOST='192.***.***.***', MASTER_USER='repl_user', MASTER_PASSWORD='hj3****', MASTER_LOG_FILE='mysql-bin.000004', MASTER_LOG_POS=7145; 上面几个参数就不解释了,前面说过了。 重启mysql，然后查看slave线程开启了没：注意图中的红框， 两个都是Yes， 说明开启成功。如果其中一个是No， 那就说明不成功。需要查看mysql的错误日志。有时候密码填错了， 有时候防火墙的3306没有打开。ip地址不对，等等。 都会导致失败。mysql的错误日志一般在：/usr/local/mysql/data/;文件名应该是你的机器名， hostname.err 你换成你自己的。 到这里主-从复制已经打开了。 我们先来实验一下。我们在A的数据库里面去 添加数据：我在A的 hello数据库的test表中 连续插入了3条数据， 注意看他们的自增长id， 分别是1,11,21. 知道这是为什么吗。 前面已经说过了，不懂再回去看。 我们去看一下B数据库有没有这三条数据：打开B的数据库： 此时不要在B中修改数据。 我们接着配置从B到A的复制。 如果你只需要主从复制的话， 到这里就结束了。后面可以不看了。 所有A中的修改都能自动同步到B， 但是对B的修改却不能同步到A。 因为是单向的。 如果需要双向同步的话，需要再做一次从B到A的复制。 主主复制基本跟上面一样：我们简单一点介绍： 在B中创建用户1grant replication slave on *.* to 'repl_user'@'192.***.***.***' identified by 'hj34$%&amp;mnkb'; 打开 /etc/my.cnf ， 开启B的binarylog注意红框中所新添加的部分。 我们不需要导出B的初态了，因为它刚刚才从A导过来。 直接记住它的master日志状态记住这两个数值，等会在A上面要用。B服务器就设置完了。 登录到A 服务器。 开启中继： 注意框中心添加的部分， 不解释了。 启动同步：上面的ip地址是B的ip地址， 因为A把B当做master了。 不解释了。 然后重启mysql服务。然后查看，slave状态是否正常：图中出现了两个No。说明slave没有成功， 即，从B到A的同步没有成功。 我们去查看mysql错误日志，前面说过位置：/usr/local/mysql/data/ 查看hostname.err 文件，打开看看看图中的error信息。 说找不到中继日志文件。这是因为我们在配置A的中继文件时改了中继文件名，但是mysql没有同步。解决办法很简单。 先停掉mysql服务。 找到这三个文件，把他们删掉。 一定要先停掉mysql服务。不然还是不成功。你需要重启一下机器了。 或者手动kill mysqld。改好之后， 启动mysql之后。 我们在来检查一下slave状态：完成，现在就是A&lt;—&gt;B主主互备啦！ 深入了解复制已经讨论了关于复制的一些基本东西，下面深入讨论一下复制。 基于语句的复制(Statement-Based Replication)MySQL 5.0及之前的版本仅支持基于语句的复制（也叫做逻辑复制，logical replication），这在数据库并不常见。master记录下改变数据的查询，然后，slave从中继日志中读取事件，并执行它，这些SQL语句与master执行的语句一样。这种方式的优点就是实现简单。此外，基于语句的复制的二进制日志可以很好的进行压缩，而且日志的数据量也较小，占用带宽少——例如，一个更新GB的数据的查询仅需要几十个字节的二进制日志。而mysqlbinlog对于基于语句的日志处理十分方便。 但是，基于语句的复制并不是像它看起来那么简单，因为一些查询语句依赖于master的特定条件，例如，master与slave可能有不同的时间。所以，MySQL的二进制日志的格式不仅仅是查询语句，还包括一些元数据信息，例如，当前的时间戳。即使如此，还是有一些语句，比如，CURRENT USER函数，不能正确的进行复制。此外，存储过程和触发器也是一个问题。 另外一个问题就是基于语句的复制必须是串行化的。这要求大量特殊的代码，配置，例如InnoDB的next-key锁等。并不是所有的存储引擎都支持基于语句的复制。 基于记录的复制(Row-Based Replication)MySQL增加基于记录的复制，在二进制日志中记录下实际数据的改变，这与其它一些DBMS的实现方式类似。这种方式有优点，也有缺点。优点就是可以对任何语句都能正确工作，一些语句的效率更高。主要的缺点就是二进制日志可能会很大，而且不直观，所以，你不能使用mysqlbinlog来查看二进制日志。 对于一些语句，基于记录的复制能够更有效的工作，如：1234mysql&gt; INSERT INTO summary_table(col1, col2, sum_col3) -&gt; SELECT col1, col2, sum(col3) -&gt; FROM enormous_table -&gt; GROUP BY col1, col2; 假设，只有三种唯一的col1和col2的组合，但是，该查询会扫描原表的许多行，却仅返回三条记录。此时，基于记录的复制效率更高。 另一方面，下面的语句，基于语句的复制更有效：1mysql&gt; UPDATE enormous_table SET col1 = 0; 此时使用基于记录的复制代价会非常高。由于两种方式不能对所有情况都能很好的处理，所以，MySQL 5.1支持在基于语句的复制和基于记录的复制之前动态交换。你可以通过设置session变量binlog_format来进行控制。 复制相关的文件除了二进制日志和中继日志文件外，还有其它一些与复制相关的文件。如下 mysql-bin.index 服务器一旦开启二进制日志，会产生一个与二日志文件同名，但是以.index结尾的文件。它用于跟踪磁盘上存在哪些二进制日志文件。MySQL用它来定位二进制日志文件。内容与下面类似12.\mysql-01-bin.000003.\mysql-01-bin.000004 mysql-relay-bin.index该文件的功能与mysql-bin.index类似，但是它是针对中继日志，而不是二进制日志。内容与下面类似 12.\mysql-02-relay-bin.000017.\mysql-02-relay-bin.000018 master.info保存master的相关信息。不要删除它，否则，slave重启后不能连接master。内容与下面类似 123456mysql-01-bin.000010286localhostrepl12343306 I/O线程更新master.info文件，内容与下面类似 123456.\mysql-02-relay-bin.000019254mysql-01-bin.000010286052813 relay-log.info包含slave中当前二进制日志和中继日志的信息。 发送复制事件到其它slave当设置log_slave_updates时，你可以让slave扮演其它slave的master。此时，slave把SQL线程执行的事件写进行自己的二进制日志(binary log)，然后，它的slave可以获取这些事件并执行它。如下： 复制过滤(Replication Filters)复制过滤可以让你只复制服务器中的一部分数据，有两种复制过滤：在master上过滤二进制日志中的事件；在slave上过滤中继日志中的事件。如下： 复制的常用拓扑结构复制的体系结构有以下一些基本原则：(1) 每个slave只能有一个master；(2) 每个slave只能有一个唯一的服务器ID；(3) 每个master可以有很多slave；(4) 如果你设置log_slave_updates，slave可以是其它slave的master，从而扩散master的更新。 MySQL不支持多主服务器复制(Multimaster Replication)——即一个slave可以有多个master。但是，通过一些简单的组合，我们却可以建立灵活而强大的复制体系结构。 1.单一master和多slave由一个master和一个slave组成复制系统是最简单的情况。Slave之间并不相互通信，只能与master进行通信。在实际应用场景中，MySQL复制90%以上都是一个Master复制到一个或者多个Slave的架构模式，主要用于读压力比较大的应用的数据库端廉价扩展解决方案。因为只要Master和Slave的压力不是太大（尤其是Slave端压力）的话，异步复制的延时一般都很少很少。尤其是自从Slave端的复制方式改成两个线程处理之后，更是减小了Slave端的延时问题。而带来的效益是，对于数据实时性要求不是特别Critical的应用，只需要通过廉价的pcserver来扩展Slave的数量，将读压力分散到多台Slave的机器上面，即可通过分散单台数据库服务器的读压力来解决数据库端的读性能瓶颈，毕竟在大多数数据库应用系统中的读压力还是要比写压力大很多。这在很大程度上解决了目前很多中小型网站的数据库压力瓶颈问题，甚至有些大型网站也在使用类似方案解决数据库瓶颈。如图： 如果写操作较少，而读操作很时，可以采取这种结构。你可以将读操作分布到其它的slave，从而减小master的压力。但是，当slave增加到一定数量时，slave对master的负载以及网络带宽都会成为一个严重的问题。这种结构虽然简单，但是，它却非常灵活，足够满足大多数应用需求。一些建议： (1)不同的slave扮演不同的作用(例如使用不同的索引，或者不同的存储引擎)； (2)用一个slave作为备用master，只进行复制； (3)用一个远程的slave，用于灾难恢复； 大家应该都比较清楚，从一个Master节点可以复制出多个Slave节点，可能有人会想，那一个Slave节点是否可以从多个Master节点上面进行复制呢？至少在目前来看，MySQL是做不到的，以后是否会支持就不清楚了。MySQL不支持一个Slave节点从多个Master节点来进行复制的架构，主要是为了避免冲突的问题，防止多个数据源之间的数据出现冲突，而造成最后数据的不一致性。不过听说已经有人开发了相关的patch，让MySQL支持一个Slave节点从多个Master结点作为数据源来进行复制，这也正是MySQL开源的性质所带来的好处。 2.主动模式的Master-Master(Master-Master in Active-Active Mode)Master-Master复制的两台服务器，既是master，又是另一台服务器的slave。这样，任何一方所做的变更，都会通过复制应用到另外一方的数据库中。可能有些人可能会担心，这样搭建复制环境之后，难道不会造成两台MySQL之间的循环复制么？实际上MySQL自己早就想到了这一点，所以在MySQL的BinaryLog中记录了当前MySQL的server-id，而且这个参数也是我们搭建MySQLReplication的时候必须明确指定，而且Master和Slave的server-id参数值比需要不一致才能使MySQLReplication搭建成功。一旦有了server-id的值之后，MySQL就很容易判断某个变更是从哪一个MySQLServer最初产生的，所以就很容易避免出现循环复制的情况。而且，如果我们不打开记录Slave的BinaryLog的选项（--log-slave-update）的时候，MySQL根本就不会记录复制过程中的变更到BinaryLog中，就更不用担心可能会出现循环复制的情形了。如图： 主动的Master-Master复制有一些特殊的用处。例如，地理上分布的两个部分都需要自己的可写的数据副本。这种结构最大的问题就是更新冲突。假设一个表只有一行(一列)的数据，其值为1，如果两个服务器分别同时执行如下语句：在第一个服务器上执行：mysql&gt; UPDATE tbl SET col=col + 1;在第二个服务器上执行：mysql&gt; UPDATE tbl SET col=col * 2;那么结果是多少呢？一台服务器是4，另一个服务器是3，但是，这并不会产生错误。实际上，MySQL并不支持其它一些DBMS支持的多主服务器复制(Multimaster Replication)，这是MySQL的复制功能很大的一个限制(多主服务器的难点在于解决更新冲突)，但是，如果你实在有这种需求，你可以采用MySQL Cluster，以及将Cluster和Replication结合起来，可以建立强大的高性能的数据库平台。但是，可以通过其它一些方式来模拟这种多主服务器的复制。 3.主动-被动模式的Master-Master(Master-Master in Active-Passive Mode)这是master-master结构变化而来的，它避免了M-M的缺点，实际上，这是一种具有容错和高可用性的系统。它的不同点在于其中一个服务只能进行只读操作。如图： 4.级联复制架构 Master –Slaves - Slaves在有些应用场景中，可能读写压力差别比较大，读压力特别的大，一个Master可能需要上10台甚至更多的Slave才能够支撑注读的压力。这时候，Master就会比较吃力了，因为仅仅连上来的SlaveIO线程就比较多了，这样写的压力稍微大一点的时候，Master端因为复制就会消耗较多的资源，很容易造成复制的延时。遇到这种情况如何解决呢？这时候我们就可以利用MySQL可以在Slave端记录复制所产生变更的BinaryLog信息的功能，也就是打开--log-slave-update选项。然后，通过二级（或者是更多级别）复制来减少Master端因为复制所带来的压力。也就是说，我们首先通过少数几台MySQL从Master来进行复制，这几台机器我们姑且称之为第一级Slave集群，然后其他的Slave再从第一级Slave集群来进行复制。从第一级Slave进行复制的Slave，我称之为第二级Slave集群。如果有需要，我们可以继续往下增加更多层次的复制。这样，我们很容易就控制了每一台MySQL上面所附属Slave的数量。这种架构我称之为Master-Slaves-Slaves架构这种多层级联复制的架构，很容易就解决了Master端因为附属Slave太多而成为瓶颈的风险。下图展示了多层级联复制的Replication架构。当然，如果条件允许，我更倾向于建议大家通过拆分成多个Replication集群来解决上述瓶颈问题。毕竟Slave并没有减少写的量，所有Slave实际上仍然还是应用了所有的数据变更操作，没有减少任何写IO。相反，Slave越多，整个集群的写IO总量也就会越多，我们没有非常明显的感觉，仅仅只是因为分散到了多台机器上面，所以不是很容易表现出来。此外，增加复制的级联层次，同一个变更传到最底层的Slave所需要经过的MySQL也会更多，同样可能造成延时较长的风险。而如果我们通过分拆集群的方式来解决的话，可能就会要好很多了，当然，分拆集群也需要更复杂的技术和更复杂的应用系统架构。 5.带从服务器的Master-Master结构(Master-Master with Slaves)这种结构的优点就是提供了冗余。在地理上分布的复制结构，它不存在单一节点故障问题，而且还可以将读密集型的请求放到slave上。级联复制在一定程度上面确实解决了Master因为所附属的Slave过多而成为瓶颈的问题，但是他并不能解决人工维护和出现异常需要切换后可能存在重新搭建Replication的问题。这样就很自然的引申出了DualMaster与级联复制结合的Replication架构，我称之为Master-Master-Slaves架构和Master-Slaves-Slaves架构相比，区别仅仅只是将第一级Slave集群换成了一台单独的Master，作为备用Master，然后再从这个备用的Master进行复制到一个Slave集群。 这种DualMaster与级联复制结合的架构，最大的好处就是既可以避免主Master的写入操作不会受到Slave集群的复制所带来的影响，同时主Master需要切换的时候也基本上不会出现重搭Replication的情况。但是，这个架构也有一个弊端，那就是备用的Master有可能成为瓶颈，因为如果后面的Slave集群比较大的话，备用Master可能会因为过多的SlaveIO线程请求而成为瓶颈。当然，该备用Master不提供任何的读服务的时候，瓶颈出现的可能性并不是特别高，如果出现瓶颈，也可以在备用Master后面再次进行级联复制，架设多层Slave集群。当然，级联复制的级别越多，Slave集群可能出现的数据延时也会更为明显，所以考虑使用多层级联复制之前，也需要评估数据延时对应用系统的影响。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库主主互备（高可用）</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitLab服务器搭建]]></title>
    <url>%2Fposts%2F22149%2F</url>
    <content type="text"><![CDATA[一键安装 gitlab并设置邮件发送(简单教程) 本节是根据烂泥大神分享的笔记摘录的！ 安装 GitLabGitLab 下载：http://www.gitlab.cc/downloads/GitLab 中文文档：http://doc.gitlab.cc安装方式官方有详细说明，这里使用Centos 6安装，其他系统参考官方文档。 1234567#切换到root用户登录yum -y install curl openssh-server openssh-clients postfix cronieservice postfix startchkconfig postfix on#这句是用来做防火墙的。避免用户通过ssh方式和http来访问sudo lokkit -s http -s ssh 添加GitLab仓库,并安装到服务器上123456789101112131415161718192021222324252627282930313233343536第一步：curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bashyum -y install gitlab-ce或者使用国内的镜像源：vim /etc/yum.repos.d/gitlab-ce.repo[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.lifetoy.org/gitlab-ce/yum/el6repo_gpgcheck=0gpgcheck=0enabled=1gpgkey=https://packages.gitlab.com/gpg.keyyum -y install gitlab-ce或者使用vim /etc/yum.repos.d/gitlab-ce.repo[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.lifetoy.org/gitlab-ce/yum/el6/repo_gpgcheck=0gpgcheck=0enabled=1gpgkey=https://packages.gitlab.com/gpg.keyyum -y install gitlab-ce-----------------------------------------------------------------------------------------第二步：rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-8.9.6-ce.0.el6.x86_64.rpm#截至到7.16为止，8.9.6版本还没有中文汉化版或者rpm -ivh http://mirrors.lifetoy.org/gitlab-ce/yum/el6/gitlab-ce-8.8.7-ce.1.el6.x86_64.rpm 查看gitlab-ce安装的软件包：rpm -ql gitlab-ce |more 启动gitLabsudo gitlab-ctl reconfigure 使用mysql数据库代替gitlab-ce添加yum仓库源12wget -P /etc/yum.repos.d http://mirrors.aliyun.com/repo/Centos-6.repo #Centos7 源不一样，官网找。yum -y install mysql mysql-server mysql-devel gcc 初始化mysql设定root用户密码为：12345gitlab12/etc/init.d/mysqld start/usr/bin/mysqladmin -u root password '12345gitlab' 创建gitlab相关的数据库创建gitlab用户，并设定密码为：gitlab12345aa12345mysql -uroot -p'12345gitlab'create user 'gitlab'@'%' identified by 'gitlab12345aa';set storage_engine=innodb;create database if not exists `gitlabhq_production` default character set `utf8` collate `utf8_unicode_ci`;grant select,insert,update,delete,create,create temporary tables,drop,index,alter,lock tables on `gitlabhq_production`.* to 'gitlab'@'%'; 删除用户名为空的主机，并刷新mysql权限1mysql -uroot -p'12345gitlab' mysql -e "delete from user where user='';flush privileges;" 测试gitlab用户连接数据库1mysql -h127.0.0.1 -ugitlab -p'gitlab12345aa' gitlab配置文件：vim /etc/gitlab/gitlab.rbgitlab_rails[‘db_adapter’] = “mysql2”gitlab_rails[‘db_encoding’] = “utf8”gitlab_rails[‘db_database’] = “gitlabhq_production”gitlab_rails[‘db_pool’] = 10gitlab_rails[‘db_username’] = “gitlab”gitlab_rails[‘db_password’] = “gitlab12345aa“gitlab_rails[‘db_host’] = “127.0.0.1”gitlab_rails[‘db_port’] = 3306postgresql[‘enable’] = false 1vim /opt/gitlab/embedded/service/gitlab-rails/.bundle/config BUNDLE_RETRY: 5BUNDLE_PATH: “/opt/gitlab/embedded/service/gem”BUNDLE_JOBS: 9BUNDLE_WITHOUT: development:test:postgresBUNDLE_DISABLE_SHARED_GEMS: ‘1’ 12345cd /opt/gitlab/embedded/service/gitlab-rails/opt/gitlab/embedded/bin/bundle installgitlab-ctl reconfiguregitlab-ctl restartgitlab-rake gitlab:setup 到此gitlab-ce更换成mysql完成。 打开http://IP/ 即可访问，首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.默认的管理员账号是root,如果你想更改默认管理员账号,请输入上面设置的新密码登录系统后修改帐号名 修改gitlab通过域名访问：12vim /etc/gitlab/gitlab.rbexternal_url 'http://your.domain' 重启配置sudo gitlab-ctl reconfigure 实时查看所有执行日志gitlab-ctl tail 查看版本：cat /opt/gitlab/embedded/service/gitlab-rails/VERSION /var/opt/gitlab/gitlab-workhorse/opt/gitlab/embedded/service/gitlab-rails/public/opt/gitlab/etc/gitlab-workhorse /var/log/gitlab/gitlab-workhorse 配置文件路径：/var/opt/gitlab/nginx/var/opt/gitlab/nginx/conf/nginx.conf/var/opt/gitlab/nginx/conf/gitlab-http.conf 汉化法一中文社区：https://gitlab.com/larryli/gitlab确认gitlab版本与当前汉化版本的 VERSION 是否相同，当前最新的汉化版本为 8.13.5 。如果安装版本小于当前汉化版本，请先升级。如果安装版本大于当前汉化版本，请在项目中提交新的 issue。如果版本相同，首先在本地clone仓库。 下载汉化补丁包 1.先停止gitlabgitlab-ctl stop 2.克隆gitLab.com仓库，有中文补丁git clone https://gitlab.com/xhang/gitlab.git #注意对应的版本地址不同 或gitcafe.com镜像，速度更快，暂时不支持中文补丁git clone https://git.oschina.net/qiai365/gitlab-ce.git或者git clone https://git.oschina.net/johnwu/gitlab-zh.git 12cd gitlabgit branch -a |tac 8.8版本的汉化补丁（8-8-stable是英文稳定版，8-8-zh是中文版，两个diff结果便是汉化补丁）git diff origin/8-8-stable origin/8-8-zh &gt; /tmp/8.8.diff 应用汉化补丁12cd /opt/gitlab/embedded/service/gitlab-railsgit apply /tmp/8.8.diff 启动gitlab：gitlab-ctl start 法二12345wget https://gitlab.com/larryli/gitlab/repository/archive.zip?ref=8-7-zhunzip gitlab-8-7-zh-faeea0c584b042eaa433ed6c82335fe0c124af97.zipcd gitlab-8-7-zh-faeea0c584b042eaa433ed6c82335fe0c124af97sudo gitlab-ctl reconfiguresudo gitlab-ctl restart 最后配置123456vim /etc/gitlab/gitlab.rbvim /opt/gitlab/embedded/service/gitlab-rails/config/environments/production.rbvim /var/opt/gitlab/gitlab-rails/etc/smtp_settings.rbvim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.ymltime_zone: Asia/Shanghaivim /opt/gitlab/embedded/service/gitlab-rails/config/environments/development.rb 1.设置存放代码库的主目录：vim /etc/gitlab/gitlab.rb默认是在/var/opt/gitlab/git-data下git_data_dir &quot;/var/opt/gitlab/git-data&quot; 2.访问刚搭建的GitLab站点，创建一个group，比如devusers。这时会在/var/opt/gitlab/git-data下创建/var/opt/gitlab/git-data/devusers文件夹。然后在/var/opt/gitlab/git-data/repositories/创建一个文件夹，比如devusers 3.将现有的所有git项目文件复制到这个文件夹cp -r /data/git/* /var/opt/gitlab/git-data/devusers 4.修改一下复制过来的文件夹的所有者：chown -R git:git /var/opt/gitlab/git-data/devusers 12cd /var/opt/gitlabgitlab-rake gitlab:import:repos gitlab仓库地址123/var/opt/gitlab/git-data/repositoriessudo vi /etc/gitlab/gitlab.rbgit_data_dir]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB]]></title>
    <url>%2Fposts%2F51937%2F</url>
    <content type="text"><![CDATA[本节是根据烂泥大神分享的笔记摘录的！ 安装这里安装的是3.2版本。 yum安装123456789101112vim /etc/yum.repos.d/mongodb.repo[MongoDB]name=MongoDB Repositorybaseurl=http://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/gpgcheck=0enabled=1yum -y install mongodb-org/etc/init.d/mongod restartchkconfig mongod onmongod --version 源码安装1234567891011121314wget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.2.8.tgz或：wget https://fossies.org/linux/misc/mongodb-linux-x86_64-3.2.8.tgztar -xf mongodb-linux-x86_64-rhel62-3.2.8.tgz -C /usr/local/ #注意解压的包名cd /usr/local/mv mongodb-linux-x86_64-rhel62-3.2.8 mongodbmkdir /usr/local/mongodb/datavim /etc/profileexport PATH=$PATH:/usr/local/mongodb/binsource /etc/profile安装好直接可以用了 配置修改配置文件1234567891011121314151617vim /usr/local/mongodb/mongodb.conf#端口port=27017#数据文件存放目录dbpath= /usr/local/mongodb/data#日志文件存放目录logpath= /usr/local/mongodb/mongodb.log#使用追加的方式写日志logappend=true#以守护程序的方式启用，即在后台运行fork=true#最大同时连接数maxConns=500#只允许通过本机访问#bind_ip=127.0.0.1#启用验证#auth = true #注释掉不启用用户认证，创建好用户后再启用 启动mongodb：1/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf 创建用户、管理用户read：允许用户读取指定数据库readWrite：允许用户读写指定数据库dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profileuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。root：只在admin数据库中可用。超级账号，超级权限 创建用户对admin数据库，创建一个suadmin用户，密码是ilannipasswd，并且赋予dbAdminAnyDatabase和userAdminAnyDatabase权限123mongouse admindb.createUser(&#123;user:'suadmin',pwd:'ilannipasswd',roles:[&#123;role:'dbAdminAnyDatabase',db:'admin'&#125;,&#123;role:'userAdminAnyDatabase',db:'admin'&#125;]&#125;) 验证刚刚创建的用户123db.auth('suadmin','ilannipasswd')或者：db.createUser(&#123;user:'suadmin',pwd:'ilannipasswd',roles:[&#123;role:'dbAdminAnyDatabase',db:'admin'&#125;]&#125;) 返回1表示成功。 然后退出mongodb，启用用户验证auth = true，再次启动mongodb12345678910111213pgrep -f mongodb |xargs kill -2vim /usr/local/mongodb/mongodb.conf#启用验证auth = true#启动mongo/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.confmongo localhost:27017/admin -u suadmin -p ilannipasswdshow usersshow dbsshow collections 查看整个mongoDB全部的用户：db.system.users.find() 接着测试,创建库,创建用户创建ilanni数据库，然后创建ilanniadmin用户，授予readWrite权限1234use ilannidb.createUser(&#123;user:'ilanniadmin',pwd:'ilanni123456',roles:[&#123;role:'readWrite',db:'ilanni'&#125;]&#125;)或者db.createUser(&#123;user:'ilanniadmin',pwd:'ilanni123456',roles:[&#123;role:'dbAdmin',db:'ilanni'&#125;,&#123;role:'readWrite',db:'ilanni'&#125;]&#125;) 验证刚刚创建的用户：db.auth(&#39;ilanniadmin&#39;,&#39;ilanni123456&#39;)注意，在use ilanni后，ilanni实际上还没真正建立起来，只是表明目前是在使用ilanni了。如果什么都不操作离开的话,这个库就会被系统删除.所以我们还要执行下面的命令:12db.ilanni.insert(&#123;'name':'tompig'&#125;);db.ilanni.insert(&#123;'name':'tompig1','id':1&#125;); 使用刚刚创建的ilanniadmin用户登陆数据库，然后插入一些，并查看123mongo localhost:27017/ilanni -u ilanniadmin -p ilanni123456db.ilanni.findOne()db.ilanni.find() 现在我们再使用suadmin用户登陆到服务器，查看服务器上的数据库12mongo localhost:27017/admin -u suadmin -p ilanni123456show dbs 通过上图，我们可以看到刚刚创建的ilanni数据库 删除库，删除用户现在我们来测试数据库的删除123mongo localhost:27017/admin -u suadmin -p ilannipasswduse ilannidb.dropDatabase(); 通过shell删除ilanni数据库 现在我们来测试用户的删除 导入数据：mongoimport --port 27017 -d tms -c mod &lt; mongo_data/mod.json 命令行连接mongodb数据库：12345./mongohelp #查看帮助show dbs #查看所有的mongodb数据库use tms #使用tms数据库db.status() #查看数据库的信息 删除数据库123show dbsuse tmsdb.dropDatabase() 导出数据：mongoexport --port 27017 -d tms -c mod -o tms.json]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB3.2</tag>
        <tag>分布式数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins]]></title>
    <url>%2Fposts%2F34699%2F</url>
    <content type="text"><![CDATA[jenkins是一个广泛用于持续构建的可视化web工具，持续构建说得更直白点，就是各种项目的”自动化”编译、打包、分发部署。jenkins可以很好的支持各种语言（比如：java, c#, php等）的项目构建，也完全兼容ant、maven、gradle等多种第三方构建工具，同时跟svn、git能无缝集成，也支持直接与知名源代码托管网站，比如github、bitbucket直接集成。 jenkins 安装Ubuntu法一：apt-get1234wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -echo "deb https://pkg.jenkins.io/debian-stable binary/" &gt;&gt; /etc/apt/sources.listsudo apt-get updatesudo apt-get install jenkins jenkins地址是:http://IP:8080 法二：war包下载地址：https://jenkins.io下载的jenkins.war，放到tomcat/webapp目录下，启动tomcattomcat默认端口为8080（可以自行修改），jenkins地址是:http://IP:8080/jenkins 启动jenkins和停止jenkins可以用下面这两条命令：12sudo service startsudo service stop 安装完成，启动报错见下面配置设置，网页打不开看看防火墙有没有放行端口。 Centos安装前检查jdk12java --versionyum list *openjdk* 法一：yum123sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.reposudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.keyyum install jenkins jenkins地址是:http://IP:8080 法二：war包下载地址：https://jenkins.io下载的jenkins.war，放到tomcat/webapp目录下，启动tomcattomcat默认端口为8080（可以自行修改），jenkins地址是:http://IP:8080/jenkins 启动jenkins和停止jenkins可以用下面这两条命令：12sudo /etc/init.d/jenkins startsudo /etc/init.d/jenkins stop 安装完成，启动报错见下面配置设置，网页打不开看看防火墙有没有放行端口。Window、Mac下载地址：https://jenkins.io直接点图中war包旁边小三角选择下载安装jenkins地址是:http://IP:8080 DockerDockerHub官方jenkins镜像： https://registry.hub.docker.com/_/jenkins/ github源码： https://github.com/jenkinsci/docker 官方jenkins镜像中所使用的jenkins是Jenkins的LTS（Long Term Support）发布版本。 docker官方的jenkins镜像启动容器运行命令为1docker run --name myjenkins -p 8080:8080 -v /var/ jenkins_home jenkins 运行docker run命令时，如果本地没有镜像，则默认会从DockerHub pull镜像，将镜像缓存到本地，然后再启动基于镜像创建的容器。查看镜像信息：docker images 过一会儿就能看到启动日志了，此时注意日志输出的密码。查看日志也可以12docker psdocker logs [image_name/CONTAINER ID] 提示说密码在/var/jenkins_home/secrets/initialAdminPassword能看到，于是进入交互模式1docker run -i -t [image_name/CONTAINER ID] /bin/bash 就可以直接像一台主机一样操作啦，但我没有找到该文件。 之后浏览器输入http://IP:8080就能看到Jenkins页面了，输入刚刚的密码。下一步按需要选择；输入账户密码；进入管理界面。 源码构建jenkins镜像并运行容器需要JDK环境123git clone https://github.com/jenkinsci/docker.gitcd dockerdocker build -t leolan/jenkins . #使用docker build+Dockerfile（文件在docker目录下）构建jenkins镜像 镜像构建成功后（总共21个Step，Dockerfile共21条指令），使用docker images查看镜像，leolan/jenkins和官方的jenkins镜像大小相同,使用docker ps查看运行的容器信息。使用docker stop [image_name/CONTAINER ID]停止之前基于官方jenkins镜像启动的容器启动新容器：docker run --name leolan_jenkins -p 8080:8080 -v /var/jenkins_home leolan/jenkins之后浏览器输入http://IP:8080就能看到Jenkins页面了，输入刚刚的密码。下一步按需要选择；输入账户密码；进入管理界面。 用cSphere希云管理Docker参考：http://csphere.cn/hub/jenkins 配置设置jenkins安装目录(WAR包会放在这里):/usr/lib/jenkins/jenkins配置文件:/etc/sysconfig/jenkins默认的JENKINS_HOME:/var/lib/jenkins/Jenkins日志文件:/var/log/jenkins/jenkins.log 端口设置：vim /etc/sysconfig/jenkins找到2处修改端口号：JENKINS_PORT=”8080”JENKINS_AJP_PORT=”8009”重启服务：service jenkins restart 错误：“Starting Jenkins -bash: /usr/bin/Java: No such file or directory”。表示找不到Jenkins找不到java。查看java版本java -version，编辑文件vi /etc/init.d/jenkins，找到类似这样的一段，在最后加上：1234567candidates="/etc/alternatives/java/usr/lib/jvm/java-1.6.0/bin/java/usr/lib/jvm/java-1.7.0/bin/java/usr/lib/jvm/java-1.8.0/bin/java/usr/bin/java/usr/java/jdk1.8.0_111/bin/java #新增加的 重启服务：service jenkins restart jenkins 插件Git Parameter Plug-In 插件本节是根据烂泥大神分享的笔记摘录的！Git Parameter Plug-In插件可以参数化构建git 可以根据不同的分支或者tag进行构建。 安装Git Parameter Plug-In插件 Git Parameter 文档：https://wiki.jenkins-ci.org/display/JENKINS/Git+Parameter+Plugin插件下载：https://updates.jenkins-ci.org/download/plugins/git-parameter/ 下面这个截图是根据分支进行构建 如果是根据tag进行构建的话，如下进行配置 这次我们是根据分支进行构建 注意以上两张截图中name就是下面我们要配置的变量： 通过上图，我们可以看到下载git仓库中有两个分支master和wxy，我们可以选择其中任意一个进行构建即可。这次我们选择wxy分支进行构建，如下： ansible plugin插件本节是根据烂泥大神分享的笔记摘录的！ 首先要注意把yml文件存放到jenkins的工作目录下，否则jenkins会提示无权限操作。1234567cat /var/lib/jenkins/yml/dir.yml - hosts: '&#123;&#123; host &#125;&#125;' remote_user: root tasks: - name: test make dir file: path=/etc/ilannitest state=directory mode=0755 也可以保存到文件中主机地址，如下：1234cat /etc/ansible/hosts [h5]114.55.101.252 ansible_ssh_user=root ansible_ssh_private_key_file=/var/lib/jenkins/key/dongyin 多仓库Multiple SCMs plugin插件本节是根据烂泥大神分享的笔记摘录的！ 插件地址：http://mirror.xmission.com/jenkins/plugins/multiple-scms/这个设置是为了防止前一个仓库的代码覆盖后一个仓库代码]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>jenkins 安装</tag>
        <tag>jenkins参数化构建git</tag>
        <tag>Git Parameter Plug-In 插件</tag>
        <tag>ansible plugin插件</tag>
        <tag>Multiple SCMs plugin插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建博客]]></title>
    <url>%2Fposts%2F23632%2F</url>
    <content type="text"><![CDATA[配置环境Hexo是用node-js写的，hexo生成静态页面的速度要比较快，hexo是本地生成html再上传。官网：https://hexo.io/zh-cn/docs/ 安装Node.js官网下载对应平台安装包安装：https://nodejs.org详见：Node.js开发环境搭建 安装Git参考教程：Git教程 安装Hexo12345npm install -g hexo-cli #Mac下安装sudo -i切换到root权限。hexo init blog #blog文件夹要先建好，这一步自动生成网站。cd blognpm install #安装依赖的插件。hexo server #运行服务 这时可以在浏览器打开网页。hexo server的简化命令为hexo s；指定端口：-p xxxx和jekyll一样是通过修改_config.yml文件来配置站点信息的。（在Hexo中，根目录下的_config.yml文件是用来配置网站信息的；主题目录下的_config.yml文件是用来配置文章主题，页面等等的） 如果是在另一台电脑上配置环境（远程仓库中有项目文件）只需要安装Node.js、Git、Markdown编辑器，之后npm install -g hexo-cli安装hexo后配置Git 1234git config --global user.name "leolan"git config --global user.email "842632422@qq.com"ssh-keygen -t rsa -C "842632422@qq.com"cat ~/.ssh/id_rsa.pub 把密钥添加到Coding和Github上，再git clone 仓库地址（建议用ssh地址）就直接可以正常使用了。 默认的目录结构如下： 12345678910├── .deploy #执行hexo deploy命令部署到GitHub上的内容目录├── public #执行hexo generate命令，输出的静态网页内容目录├── scaffolds #layout模板文件目录，其中的md文件可以添加编辑├── scripts #扩展脚本目录，这里可以自定义一些javascript脚本├── source #文章源码目录，该目录下的markdown和html文件均会被hexo处理。404文件，CNAME文件等都应该放这里。| ├── _drafts #草稿文章| └── _posts #发布的文章├── themes #主题文件目录├── _config.yml #全局配置文件，大多数的设置都在这里└── package.json #应用程序数据，指明hexo的版本等信息。在push到github时提示*.json错误，删掉这个文件或删掉db.json就行。 配置优化、定制站点Next官方设置说明：http://theme-next.iissnan.com/getting-started.html 站点配置以下是我的配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: LeoLan's Blogsubtitle: 有时候正是不报期望的人做出了人们不敢期望之事！description: Better late than neverauthor: LeoLanlanguage: zh-Hanstimezone: Asia/Shanghai# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://www.leolan.topcoding_url: https://www.leolan.toproot: /permalink: posts/:abbrlink/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :lang#禁止编译README.md文件，也可以在文件中增加yml文件头layout: false，---结尾skip_render: - baidu_verify_dc4dBM4StW.html - googled7e43f3624e0f703.html - CNAME - README.md - .nojekyll - Staticfile - 'love/**' - love/** - 'love/*.html' - love/*.html#强制包含.nojekyll文件（放在source下），这样hexo g时，.开头的文件具不会被忽略，适用于5.0以下版本的next主题（github屏蔽了一些文件夹）include: - .nojekyll# abbrlink config 生成文章永久链接（利于SEO）需要安装插件abbrlink: alg: crc16 # 算法：crc16(default) and crc32 rep: dec # 进制：dec(default) and hexbaidu_url_submit: #百度链接推送，推送刚刚生成的永久链接 count: 5 ## 比如3，代表提交最新的三个链接 host: www.leolan.top ## 在百度站长平台中注册的域名 token: kZ5xboXBFPxQ0g7N ## 请注意这是您的秘钥， 请不要发布在公众仓库里! path: /baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里# Writing 官网：https://hexo.io/zh-cn/docs/writing.htmlnew_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: false #新建文章时自动生成本地存放图片等资源的文件夹relative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 单独页面文章数目，需要安装以下3个插件#npm install --save hexo-generator-index#npm install --save hexo-generator-archive#npm install --save hexo-generator-tag## Set per_page to 0 to disable paginationindex_generator: per_page: 5archive_generator: per_page: 20 yearly: true monthly: truetag_generator: per_page: 10pagination_dir: page# Extensions 主题选择## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next5.0.1#theme: material# Deployment 自动部署到仓库## 官方文档Docs: https://hexo.io/docs/deployment.html 有部署到各种服务器的方法## 参考：http://www.lxway.com/240950852.htm#不管是github还是coding，type都填写gitdeploy:- type: git repo: git@git.coding.net:leolan/blog.git,master message: 'LeoLan updated：&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;' #这个是commit的说明，因为是发布站点，方便看到发布时间。- type: git repo: git@github.com:MyLeoLan/blog.git,master message: 'LeoLan updated：&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;'#- type: git# repo: git@git.oschina.net:leolan/leolan.git,master# message: 'LeoLan updated：&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;'#deploy:#- type: git# repo:#- type: heroku（另一种云平台）# repo:# Disqus #Disqus评论系统disqus_shortname: leolan#plugins: #插件，例如生成 RSS 和站点地图的#hexo-generator-sitemap#- hexo-generator-baidu-sitemapplugins: hexo-generator-feed hexo-generator-baidu-sitemapsitemap: path: sitemap.xml baidusitemap: path: baidusitemap.xml# Social links 社交链接social: GitHub: https://github.com/myleolan Coding: https://coding.net/u/leolan Cloud1: http://quickconnect.to/myleolan OSchina: https://git.oschina.net/leolan Cloud2: http://842632422-abc.eicp.net Links: https://www.leolan.top/posts/44568/ #Twitter: https://twitter.com/lmintlcx #Zhihu: http://www.zhihu.com/people/lmintlcx #Douban: http://www.douban.com/people/lmintlcx #Weibo: http://weibo.com/u/3233729080duoshuo_shortname: leolan# 多说热评文章 true 或者 falseduoshuo_hotartical: true# 多说分享服务duoshuo_share: true# 百度分享服务baidushare: true#打赏功能reward_comment: 您的支持将鼓励我继续创作,非常感谢！alipay: http://ofyfogrgx.bkt.clouddn.com//pay/alipay.jpgwechatpay: http://ofyfogrgx.bkt.clouddn.com//pay/weixinpay.png#站点建立时间since: 2016#百度分析(可能会影响网页加载速度)#baidu_analytics: c91eae7f335d73f093d1499eff4b45a7#本地搜索search: path: search.xml field: post format: html limit: 10000 主题配置Material主题：https://material.viosey.com/start/#install-materialMaterial项目地址：https://github.com/viosey/hexo-theme-material 推荐Next主题，简单简洁，官网：http://theme-next.iissnan.com/安装最新版：12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 在主题目录下可以看到next文件夹，修改站点配置文件_config.yml中的theme: nexthexo clean &amp;&amp; hexo s就可以看到新主题生效啦！接下来修改主题配置文件_config.yml，以下是我的配置。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Put your favicon.ico into `hexo-site/source/` directory.favicon: /200.png# Set default keywords (Use a comma to separate) 站点关键词，利于SEOkeywords: "Hexo, NexT, Leo Lan, leolan, Blog, myleolan, lan, coding"# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: https://www.leolan.top/atom.xml# Specify the date when the site was setup#since: 2015# Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.# See: https://support.google.com/webmasters/answer/139066# Tips: Before you open this tag, remeber set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )canonical: true# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu: home: / categories: /categories tags: /tags archives: /archives about: /about guestbook: /guestbook # schedule: /schedule #commonweal: /404.html# Enable/Disable menu icons. 菜单图标# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.# When an question mask icon presenting up means that the item has no mapping icon.menu_icons: #http://fontawesome.io/icons/ enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: tags archives: archive commonweal: heartbeat guestbook: commenting# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mistscheme: Pisces# ---------------------------------------------------------------# Font Settings# - Find fonts on Google Fonts (https://www.google.com/fonts)# - All fonts set here will have the following styles:# light, light italic, normal, normal intalic, bold, bold italic# - Be aware that setting too much fonts will cause site running slowly# - Introduce in 5.0.1# ---------------------------------------------------------------font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default) 慢的话搜索fonts.googleapis.com即可找到替换地址 host: #fonts.css.network # Global font settings used on &lt;body&gt; element. global: # external: true will load this font family from host. external: true family: Lato #Monda # Font settings for Headlines (h1, h2, h3, h4, h5, h6) # Fallback to `global` font settings. headings: external: true family: # Font settings for posts # Fallback to `global` font settings. posts: external: true family: Roboto # Font settings for Logo # Fallback to `global` font settings. # The `size` option use `px` as unit logo: external: true family: Georgia size: 24 # Font settings for &lt;code&gt; and code blocks. codes: external: true family: size: 14#"Source Code Pro", "PT Mono", "DejaVu Sans Mono", # ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social Links 社交链接# Key is the link label showing to end users.# Value is the target link (E.g. GitHub: https://github.com/iissnan)#social:#LinkLabel: Link# Social Links Icons# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.# When an globe mask icon presenting up means that the item has no mapping icon.social_icons: #http://fontawesome.io/icons/ enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github Coding: github-alt Cloud1: cloud Cloud2: cloud OSchina: git-square #松松视频: video-camera #Twitter: twitter #Weibo: weibo# Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpgavatar: /images/avatar.jpg #博客侧边栏显示的头像# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: true# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: 侧边栏显示 # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggler. display: post #display: always #display: hide #display: remove# Blogrolls 友情链接links_title: 友链#links_layout: blocklinks_icon: heartbeat#links_layout: inlinelinks: Jerry Locke: https://jerry.hk/ Raintons: http://login926.top DIYgod: https://www.anotherhome.net 小黑: http://mblack.cn/ Jing's Blog: http://www.iamlj.com/ cyang's blog: http://cyang.tech/ 一路向北: http://www.showerlee.com/ 卢松松的博客: http://lusongsong.com/ 松松视频: http://v.lusongsong.com/ # ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images's urlcustom_logo: enabled: false image:# Code Highlight theme 代码高亮主题# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150# Wechat Subscriber 微信打赏#wechat_subscriber: #enabled: true #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #description: ex. subscribe to my blog by scanning my public wechat account# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Support 数学公式mathjax: enable: true cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML#各种第三方服务# Swiftype Search API Key#swiftype_key:# Baidu Analytics ID#baidu_analytics:# Duoshuo ShortName#duoshuo_shortname:# Disqus#disqus_shortname:# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.#baidushare:## type: button# Sharejiathis: false# Warning: JiaThis does not support https.#add_this_id:# Shareduoshuo_share: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# CNZZ count#cnzz_siteid:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: ture user_id: 6343395544286626562 admin_nickname: 博主# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Facebook comments plugin# This plugin depends on Facebook SDK.# If facebook_sdk.enable is false, Facebook comments plugin is unavailable.facebook_comments_plugin: enable: false num_of_posts: 10 # min posts num is 1 width: 100% # default width is 550px scheme: light # default scheme is light (light or dark)# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: zieuxKa4IjAP6VgxxXXXXXXXXXXXXXX app_key: MHGN54IEuofFNXXXXXXXXXXXXX#这里的id和key请用自己的# Show PV/UV of the website/page with busuanzi. 不算子网站访问量统计# Get more information on http://ibruce.info/2015/04/04/busuanzi/#busuanzi_count: # count values only if the other configs are false# enable: true # custom uv span for the whole site# site_uv: true# site_uv_header: 你是第# site_uv_footer: 个小伙伴 # custom pv span for the whole site# site_pv: true# site_pv_header: 本站总浏览# site_pv_footer: 次 # custom pv span for one page only# page_pv: true# page_pv_header: 热度# page_pv_footer: ℃# Tencent analytics ID# tencent_analytics:# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true# Google Calendar# Share your recent schedule to others via calendar page## API Documentation:# https://developers.google.com/google-apps/calendar/v3/reference/events/listcalendar: enable: false calendar_id: &lt;required&gt; api_key: &lt;required&gt; orderBy: startTime offsetMax: 24 offsetMin: 4 timeZone: showDeleted: false singleEvents: true maxResults: 250#! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Motionuse_motion: true# Fancyboxfancybox: true# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. 5.0以下版本如果打开网页空白，就把vendors文件夹改名为lib,这里对应改。 _internal: lib # Internal version: 2.1.3 jquery: # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: fancybox_css: # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: # Internal version: 4.4.0 # See: http://fontawesome.io/ fontawesome:# 多说热评文章 true 或者 falseduoshuo_hotartical: true# Assetscss: cssjs: jsimages: images# Theme versionversion: 5.1.0 安装插件hexo支持插件，可以直接通过命令行安装即可：npm install **plugin-name** --save更新插件npm update卸载插件npm uninstall **plugin-name**下面推荐几个常用的插件：feed插件:npm install hexo-generator-feed --save站点地图:npm install hexo-generator-sitemap --save百度站点地图:npm install hexo-generator-baidu-sitemap --save 自由定制文章字数、阅读时长统计修改post.swig模板模板位置：themes\next\layout\_macro\post.swig 安装hexo-wordcount插件1npm install hexo-wordcount --save 通过以上安装后，你可以在你的模板文件后者.md文件加入以下相关的标签实现本插件的功能字数统计:WordCount1&lt;span class="post-count"&gt;&#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 阅读时长预计:Min2Read1&lt;span class="post-count"&gt;&#123;&#123; min2read(post.content) &#125;&#125;&lt;/span&gt; 总字数统计: TotalCount1&lt;span class="post-count"&gt;&#123;&#123; totalcount(site, '0,0.0a') &#125;&#125;&lt;/span&gt; 插入的代码以下：123456789101112131415161718192021222324252627282930313233343536373839404142 &#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125; &amp;nbsp; | &amp;nbsp; &lt;div class="fb-like" data-layout="button_count" data-share="true"&gt;&lt;/div&gt; &#123;% endif %&#125;&lt;!--从这里插入代码，上边是Facebook的代码--&gt;&lt;!--leancloud文章阅读量统计（主题默认已经添加）参考：http://www.joryhe.com/2016-05-29-how_to_create_leancloud_read_Counter.html--&gt; &#123;# LeanCould PageView #&#125; &#123;% if theme.leancloud_visitors.enable %&#125; &lt;span id="&#123;&#123; url_for(post.path) &#125;&#125;" class="leancloud_visitors" data-flag-title="&#123;&#123; post.title &#125;&#125;"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-eye"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;&#123;&#123;__('post.visitors')&#125;&#125; &lt;/span&gt; &lt;span class="leancloud-visitors-count"&gt;&lt;/span&gt; &lt;/span&gt; &#123;% endif %&#125;&lt;!--字数、阅读时长统计--&gt; &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-calendar-o"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;字数统计:&lt;/span&gt; &lt;span class="post-count"&gt;&#123;&#123; wordcount(post.content) &#125;&#125;(字)&lt;/span&gt; &lt;/span&gt; &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-calendar-o"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;阅读时长:&lt;/span&gt; &lt;span class="post-count"&gt;&#123;&#123; min2read(post.content) &#125;&#125;(分)&lt;/span&gt; &lt;/span&gt;&lt;!--不蒜子网站访问量统计（主题默认已经添加），如果出现排班错位请忽略，下面用官网的方法实现--&gt; &#123;% if not is_index and theme.busuanzi_count.enable and theme.busuanzi_count.page_pv %&#125; &amp;nbsp; | &amp;nbsp; &lt;span class="page-pv"&gt;&#123;&#123; theme.busuanzi_count.page_pv_header &#125;&#125; &lt;span class="busuanzi-value" id="busuanzi_value_page_pv" &gt;&lt;/span&gt;&#123;&#123; theme.busuanzi_count.page_pv_footer &#125;&#125; &lt;/span&gt; &#123;% endif %&#125; 文章结语修改post.swig模板模板位置：themes\next\layout\_macro\post.swig 1234567891011121314151617181920212223242526272829303132333435 &#123;% if post.type === 'picture' %&#125; &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;"&gt;&#123;&#123; post.content &#125;&#125;&lt;/a&gt; &#123;% else %&#125; &#123;&#123; post.content &#125;&#125; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% else %&#125; &#123;&#123; post.content &#125;&#125;&lt;!--这里是每篇文章的尾巴，从这里开始插入代码--&gt;&lt;html&gt; &lt;body&gt; &lt;h2 id="结语"&gt;&lt;a href="#结语" class="headerlink" title="结语"&gt;&lt;/a&gt;结语&lt;/h2&gt; &lt;blockquote&gt;&lt;p&gt;如果您觉得本博客还不错，欢迎继续关注本博客，欢迎多提宝贵意见，非常感谢！&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt; &lt;div style="text-align:center;color:#ccc;font-size:14px;"&gt;------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢阅读------&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;&lt;!--下面这部分左边有框，但位置不够就会排班错乱&lt;html&gt; &lt;body&gt; &lt;h1&gt;结语&lt;/h1&gt; &lt;p&gt;&lt;h5&gt;&lt;a href="#" onclick="go_my_site()" rel="external"&gt;Leo Lan Blog Share For you!&lt;/a&gt;&lt;/h5&gt;&lt;/p&gt; &lt;p&gt;如果您觉得本博客还不错，欢迎继续关注Leo Lan的博客，欢迎多提宝贵意见，非常感谢！&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;&lt;html&gt; &lt;body&gt; &lt;h2 id="结语"&gt;&lt;a href="#结语" class="headerlink" title="结语"&gt;&lt;/a&gt;结语&lt;/h2&gt; &lt;blockquote&gt;&lt;p&gt;如果您觉得本博客还不错，欢迎收藏书签，欢迎多提宝贵意见，非常感谢！&lt;/p&gt; &lt;footer&gt;&lt;strong&gt;Welcome to LeoLan'S BLOG&lt;/strong&gt; &lt;cite&gt;&lt;a href="#" onclick="go_my_site()" rel="external"&gt;Leo Lan Blog Share For you!&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;--&gt; 文章底部的标签云锚点修改post.swig模板模板位置：themes\next\layout\_macro\post.swig 12345678910&lt;!--这是文章底部标签云锚点，不喜欢就注释掉 &lt;footer class="post-footer"&gt; &#123;% if post.tags and post.tags.length and not is_index %&#125; &lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125;--&gt; 不蒜子网站访问量统计、删除NEXT主题自带尾巴修改footer.swig模板模板位置：themes\next\layout\_partials\footer.swig官网：http://service.ibruce.infohttp://ibruce.info/2015/04/04/busuanzi/把代码改成这个样子，busuanzi_value_site_uv中，uv和pv功能是不一样的。12345678910&lt;div class="powered-by"&gt; &#123;&#123; __('footer.powered', '') &#125;&#125;&lt;/div&gt;&lt;div class="theme-info"&gt; &#123;&#123; __('footer.theme') &#125;&#125;&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;位小伙伴&lt;/div&gt;&lt;script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 同时更改语言文件中对应的名称编辑：themes\languages\zh_Hans.yml1234footer: powered: 本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt; theme: 您是第#&lt;a target="_blank" href="http://www.miitbeian.gov.cn/"&gt;粤ICP备16026009号-2&lt;/a&gt; 开源许可知识共享署名4.0 国际许可协议：https://creativecommons.org/choose 居中模块把要居中的模块、代码、文字、插件、外链等，放在下面代码的中间即可居中显示。123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt; &lt;blockquote class="blockquote-center"&gt;优秀的人，不是不合群，而是他们合群的人里面没有你&lt;/blockquote&gt;或者 &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;优秀的人，不是不合群，而是他们合群的人里面没有你&#123;% endcenterquote %&#125;或者 &lt;!-- 标签别名 --&gt;&#123;% cq %&#125; 优秀的人，不是不合群，而是他们合群的人里面没有你 &#123;% endcq %&#125; 留言板编辑：themes\languages\zh_Hans.yml12345title: #这里增加 guestbook: 留言板menu: #这里增加 guestbook: 给我留言 在站点source目录下新建guestbook文件夹，里面新建index.md文件，内容如下(其中调用HTML代码，插入了一个播放器)：12345678910111213141516171819---title: 留言板date: 2016-11-14 17:21:10---&lt;blockquote class="blockquote-center"&gt;&lt;!--网易云音乐的http地址，改为https，用https加载http资源会被屏蔽--&gt; &lt;h2&gt;Stay Hungry,Stay Foolish&lt;/h2&gt; &lt;!-- &lt;embed src="https://music.163.com/style/swf/widget.swf?sid=34971711&amp;type=1&amp;auto=1&amp;width=310&amp;height=90" width="330" height="110" allowNetworking="all"&gt;&lt;/embed&gt; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="https://music.163.com/outchain/player?type=1&amp;id=34971711&amp;auto=1&amp;height=90"&gt;&lt;/iframe&gt; &lt;embed src="https://music.163.com/style/swf/widget.swf?sid=32507038&amp;type=2&amp;auto=1&amp;width=320&amp;height=66" width="340" height="86" allowNetworking="all"&gt;&lt;/embed&gt; --&gt; &lt;!--这里是插入视频的方法 &lt;iframe src="//www.youtube.com/embed/JMl8cQjBfqk" width="560" height="315" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;--&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;span id="yu-2"&gt;最近访客&lt;/span&gt;&lt;div class="ds-recent-visitors" data-num-items="39" data-avatar-size="40" id="ds-recent-visitors"&gt;&lt;/div&gt;&lt;br/&gt; 编辑主题配置文件：_config.yml12menu: #在这里加上 guestbook: /guestbook 文章置顶修改 hexo-generator-index 插件修改文件前先备份文件：node_modules/hexo-generator-index/lib/generator.js把里面的内容替换为：12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 然后再每篇文章的yum头信息中增加top: XXX即可，值越大越靠前。 如果只置顶一两篇文章可以用简单的方法，把日期2016年改为2116年或其他远大于2016的数字，数字太小的话如2018年，到了2018年就不置顶了。 字体关于字体的修改开始时遇到很多问题，到后来才找到了原因，是因为引用的字体在www.google.com/fonts（默认是Google字体库）里找不到，或者是付费的字体。修改为免费的字体就正常使用了。打开Google Fonts，右上角查找你要的字体，能搜索到的话把全名复制下来，填写在配置文件中。 修改\themes\next_config.yml找到Font Settings12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# Font Settings# - Find fonts on Google Fonts (https://www.google.com/fonts)# - All fonts set here will have the following styles:# light, light italic, normal, normal intalic, bold, bold italic# - Be aware that setting too much fonts will cause site running slowly# - Introduce in 5.0.1# ---------------------------------------------------------------font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default) # 外链字体库地址，例如 //fonts.googleapis.com (默认值)加载慢的话搜索fonts.googleapis.com即可找到替换地址,这里注意使用的地址中包含了下面设置的字体，没有的话是默认字体。 host: #fonts.css.network # Global font settings used on &lt;body&gt; element. # 全局字体，应用在 &lt;body&gt; 元素上 global: # external: true will load this font family from host. external: true family: Lato #Monda # Font settings for Headlines (h1, h2, h3, h4, h5, h6) # Fallback to `global` font settings. # 标题字体 (h1, h2, h3, h4, h5, h6) headings: external: true family: # Font settings for posts # Fallback to `global` font settings. # 文章字体 posts: external: true family: Roboto # Font settings for Logo # Fallback to `global` font settings. # The `size` option use `px` as unit # Logo 字体 logo: external: true family: Georgia size: 24 # Font settings for &lt;code&gt; and code blocks. # 代码字体，应用于 &lt;code&gt; 以及代码块 codes: external: true family: size: 14#字体大小直接加个size: 写就行，单位是px，不填写则为默认大小。#"Source Code Pro", "PT Mono", "DejaVu Sans Mono", 参考：Next主题设置字体 | 如何引用google字体 如果要在文章中临时引用特殊的字体格式，可以直接在 Markdown 文档中使用 html 语法12&lt;font size=4 &gt; 这里输入文字，自定义大小 &lt;/font&gt;&lt;font color="#FF0000"&gt; 这里输入文字，自定义颜色的字体 &lt;/font&gt; 404页面404页面可以自己写，也可以引用腾讯公益404页面。这是嵌入到主题中的404页面而不是新开一个页面；在站点目录source目录下新建404.html文件，粘贴以下代码：1234567891011121314&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;404 - arao'blog&lt;/title&gt; &lt;meta name="description" content="404错误，页面不存在！"&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript" src="http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 打赏修改reward.swig模板模板位置：themes\next\layout\_macro\reward.swig 直接全部替换代码，这段代码是圆形的打赏按钮，二维码左右排列。12345678910111213141516171819202122&#123;% if theme.alipay or theme.wechatpay %&#125;&lt;div style="padding: 10px 0; margin: 20px auto; width: 90%; text-align: center"&gt; &lt;div style="margin-bottom: 10px;font-size: 16px;font-weight: 600;"&gt;您的支持将鼓励我继续创作,非常感谢！&lt;/div&gt; &lt;button id="rewardButton", disable="enable", onclick="var qr = document.getElementById('QR'); if (qr.style.display === 'none') &#123;qr.style.display='block';&#125; else &#123;qr.style.display='none'&#125;", style="cursor: pointer; border: 0; outline: 0; border-radius: 100%; padding: 0; margin: 0; letter-spacing: normal; text-transform: none; text-indent: 0px; text-shadow: none"&gt; &lt;span onmouseover="this.style.color='rgb(236,96,0)';this.style.background='rgb(204,204,204)'" onMouseOut="this.style.color='#fff';this.style.background='rgb(236,96,0)'" style="display: inline-block; width: 70px; height: 70px; border-radius: 100%; line-height: 81px; color: #fff; font: 400 35px/75px 'microsofty'; background: rgb(236,96,0)"&gt;赏&lt;/span&gt; &lt;/button&gt; &lt;div id="QR" style="display: none;"&gt; &#123;% if theme.alipay %&#125; &lt;div id="alipay" style="display: inline-block"&gt; &lt;img id="alipay_qr" src="&#123;&#123; theme.alipay &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; Alipay" style="width: 200px; max-width: 100%; display: inline-block"/&gt; &lt;p&gt;支付宝打赏&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.wechatpay %&#125; &lt;div id="wechat" style="display: inline-block"&gt; &lt;img id="wechat_qr" src="&#123;&#123; theme.wechatpay &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; WeChat Pay" style="width: 200px; max-width: 100%; display: inline-block"/&gt; &lt;p&gt;微信打赏&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;/div&gt;&#123;% endif %&#125; 最近访客模板位置：themes\next\layout\_macro\reward.swig在最后换行加上这段代码。1&lt;h3 id="最近访客"&gt;&lt;a href="#最近访客" class="headerlink" title="最近访客"&gt;&lt;/a&gt;最近访客&lt;/h3&gt;&lt;div class="ds-recent-visitors" data-num-items="28" data-avatar-size="42" id="ds-recent-visitors"&gt;&lt;/div&gt; 1234class=“ds-recent-visitors” //指定显示最近访客容器data-num-items=“28” //显示最近访客的数量data-avatar-size=“42” //显示最近访客头像尺寸大小id=“ds-recent-visitors” //为了调节最近访客样式加的 这样，每个页面都有最近访客了（只能看到注册了多说账户的用户） SEO网站地图安装hexo的sitemap网站地图生成插件12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在你的hexo站点的_config.yml添加下面的代码12345# hexo sitemap网站地图sitemap:path: sitemap.xmlbaidusitemap:path: baidusitemap.xml #如果报path错误就把前面增加baidu 配置成功后，hexo编译时会在hexo站点根目录生成sitemap.xml和baidusitemap.xml其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎。 蜘蛛协议在robots.txt中添加站点地图文件，如下（没有robots.txt就在站点目录source下新建）：12345678910111213# hexo robots.txtUser-agent: *Allow: /Allow: /archives/Disallow: /lib/ Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /fancybox/Sitemap: http://www.leolan.top/sitemap.xmlSitemap: http://www.leolan.top/baidusitemap.xml NexT主题，首页title的优化感谢arao的教程修改\themes\next\layout\index.swig文件，将下面代码1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 改为1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 这时候你的首页标题会更符合网站名称 - 网站描述这习惯。把关键词(在主题配置文件_config.yml中设置keywords:)也显示在Title标题里，可改成:123&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;或（排列顺序看自己喜欢）&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.keywords &#125;&#125; &#123;% endblock %&#125; 注意：别堆砌关键字，整个标题一般不超过80个字符，可以通过chinaz的seo综合查询检查。 限制出站链接网络爬虫会在当前页面搜索所有的链接，故有可能跳到别的网站。nofollow 标签是由谷歌领头创新的一个 “反垃圾链接” 的标签，并被各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。1npm install hexo-autonofollow --save 在 站点配置文件 中添加如下代码。12345nofollow: enable: true exclude: # 例外的链接，可将友情链接放置此处 - exclude1.com - exclude2.com 文章链接唯一化也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。安装此插件后，不要在 hexo s 模式下更改文章文件名，否则文章将成空白,需要重新hexo s才行。1npm install hexo-abbrlink --save 在 站点配置文件 中查找代码 permalink:，将其更改为:1permalink: posts/:abbrlink/ # “posts/” 可自行更换 在 站点配置文件 中添加如下代码：1234# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 永久链接有下面4种组合1234567891011crc16 &amp; hexhttps://post.zz173.com/posts/66c8.htmlcrc16 &amp; dechttps://post.zz173.com/posts/65535.htmlcrc32 &amp; hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dechttps://post.zz173.com/posts/1690090958.html 百度网址推送修改baidu-push.swig模板模板位置：themes\next\layout\_scripts\baidu-push.swig没有此文件就新建12345678910111213141516&#123;% if theme.baidu_push %&#125;&lt;script&gt;(function()&#123; var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') &#123; bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; &#125; else &#123; bp.src = 'http://push.zhanzhang.baidu.com/push.js'; &#125; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt;&#123;% endif %&#125; 编辑站点配置文件：_config.yml加上以下代码：12345baidu_url_submit: #百度链接推送，推送刚刚生成的永久链接 count: 5 ## 比如3，代表提交最新的三个链接 host: www.leolan.top ## 在百度站长平台中注册的域名 token: kZ5xboXBFPxQ0g7N ## 请注意这是您的秘钥， 请不要发布在公众仓库里! path: /baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 主动推送新链接解决百度爬虫被禁止访问的问题，提升网站收录质量和速度。1npm install hexo-baidu-url-submit --save 在 站点配置文件 中添加如下代码。12345baidu_url_submit: count: 5 ## 比如3，代表提交最新的三个链接 host: blog.tangxiaozhu.com ## 在百度站长平台中注册的域名 token: ## 请注意这是您的秘钥， 请不要发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 向百度提交所有链接这是LoveNight的脚本，先本地安装Python。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/usr/bin/env python# -*- coding: utf-8 -*-# @Author: LoveNight# @Date: 2015-11-16 20:45:59# @Last Modified by: lulee007# @Last Modified time: 2016-01-16 21:06:50import osimport sysimport jsonfrom bs4 import BeautifulSoup as BSimport requestsimport codecs"""hexo 博客专用，向百度站长平台提交所有网址本脚本必须放在 hexo 博客的根目录下执行！需要已安装生成百度站点地图的插件。百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。从中找到自己的接口调用地址"""url = 'http://data.zz.baidu.com/urls?site=leolan.top&amp;token=kZ5xboXBFPxQ0g7N' #这里是你的百度推送地址。baidu_sitemap = os.path.join(sys.path[0], 'public', 'baidusitemap.xml')google_sitemap = os.path.join(sys.path[0], 'public', 'baidusitemap_zhanwei.xml')# sitemap = [baidu_sitemap, google_sitemap]sitemap = [baidu_sitemap]# assert (os.path.exists(baidu_sitemap) or os.path.exists(# google_sitemap)), "没找到任何网站地图，请检查！"assert os.path.exists(baidu_sitemap) , "没找到任何网站地图，请检查！"# 从站点地图中读取网址列表def getUrls(): urls = [] for _ in sitemap: if os.path.exists(_): with codecs.open(_, "r", "utf-8") as f: xml = f.read() soup = BS(xml, "xml") tags = soup.find_all("loc") urls += [x.string for x in tags] if _ == baidu_sitemap: tags = soup.find_all("breadCrumb", url=True) print("") urls += [x["url"] for x in tags] return urls# POST提交网址列表def postUrls(urls): urls = set(urls) # 先去重 print("一共提取出 %s 个网址" % len(urls)) data = "\n".join(urls) return requests.post(url, data=data).textif __name__ == '__main__': urls = getUrls() result = postUrls(urls) print("提交结果：") print(result) 语法优化默认的语法无法添加角标（footnotes）以注明引用，这种可来回跳转的引用还是挺有用处的。1npm install hexo-footnotes --save 安装完毕请确认是否生效，如不生效，在 站点配置文件 中添加如下代码以手动启用：12plugins: - hexo-footnotes 页面留白(扩大显示范围)浏览器留白太多，代码块看起来比较麻烦，想让更多空间显示文章。NexT 对于内容的宽度的设定如下：700px，当屏幕宽度 &lt; 1600px900px，当屏幕宽度 &gt;= 1600px移动设备下，宽度自适应 如果你需要修改内容的宽度，同样需要编辑样式文件。 编辑主题的 source/css/_variables/custom.styl 文件，新增变量：1234// 修改成你期望的宽度，默认700px$content-desktop = 700px// 当视窗超过 1600px 后的宽度，默认900px$content-desktop-large = 900px 如果主题风格选择的是Pisces；那么同时还要修改header 的宽度、.main-inner 的宽度以及 .content-wrap 的宽度(如果没什么问题可以不修改custom.styl文件)。编辑文件：source/css/_schemes/Picses/_layout.styl1234567//可以使用百分比，也可以是像素，80%是比较合适的。//开头header中修改为80%header&#123; width: 80%; &#125;//.container中系应该为80%.main-inner &#123; width: 80%; &#125;//最后修改.content-wrap.content-wrap &#123; width: calc(100% - 260px); &#125; 多说评论框自定义css感谢arao的代码进入多说管理后台把下面代码粘贴进去保存1234567891011121314151617181920212223242526272829303132333435363738#ds-reset .ds-avatar img,#ds-recent-visitors .ds-avatar img &#123;width: 54px;height: 54px; /*设置图像的长和宽，这里要根据自己的评论框情况更改*/border-radius: 27px; /*设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了*/-webkit-border-radius: 27px; /*圆角效果：兼容webkit浏览器*/-moz-border-radius: 27px;box-shadow: inset 0 -1px 0 #3333sf; /*设置图像阴影效果*/-webkit-box-shadow: inset 0 -1px 0 #3333sf;-webkit-transition: 0.4s;-webkit-transition: -webkit-transform 0.4s ease-out;transition: transform 0.4s ease-out; /*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*/-moz-transition: -moz-transform 0.4s ease-out;&#125;#ds-reset .ds-avatar img:hover,#ds-recent-visitors .ds-avatar img:hover &#123;/*设置鼠标悬浮在头像时的CSS样式*/ box-shadow: 0 0 10px #fff;rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);-webkit-box-shadow: 0 0 10px #fff;rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);transform: rotateZ(360deg); /*图像旋转360度*/-webkit-transform: rotateZ(360deg);-moz-transform: rotateZ(360deg);&#125;#ds-thread #ds-reset .ds-textarea-wrapper textarea &#123;background: url(http://ww4.sinaimg.cn/small/649a4735gw1et7gnhy5fej20zk0m8q3q.jpg) right no-repeat;&#125;#ds-recent-visitors .ds-avatar &#123;float: left&#125;/*隐藏多说底部版权*/#ds-thread #ds-reset .ds-powered-by &#123;display: none;&#125; 解决多说评论不稳定、加载慢把多说评论依赖的embed.js放置底部，修改themes/next/layout/_scripts/third-party/comments/duoshuo.swig文件将1(document.getElementsByTagName('head')[0] 修改为1(document.getElementById('footer') 多说userid主题配置中需要用到user_id12345duoshuo_info: ua_enable: true admin_enable: ture user_id: 6343395544286626562 admin_nickname: 博主 动态背景修改_layout.swig模板模板位置：themes\next\layout\_layout.swig在末尾前加上下面一句12345&lt;!-- 背景动画 --&gt;#默认灰色线条&lt;script type="text/javascript" src="/js/src/particle.js"&gt;&lt;/script&gt;#浅蓝色线条&lt;script type="text/javascript" src="/js/src/particle.js" count="50" zindex="-2" opacity="1" color="0,104,183"&gt;&lt;/script&gt; 在themes\source\js\src\下新建文件particle.js写上以下代码（也可以自己下载其他js,修改方式差不多）1!function()&#123;function n(n,e,t)&#123;return n.getAttribute(e)||t&#125;function e(n)&#123;return document.getElementsByTagName(n)&#125;function t()&#123;var t=e("script"),o=t.length,i=t[o-1];return&#123;l:o,z:n(i,"zIndex",-1),o:n(i,"opacity",.5),c:n(i,"color","0,0,0"),n:n(i,"count",99)&#125;&#125;function o()&#123;c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight&#125;function i()&#123;l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i)&#123;for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;0?-1:1,i.ya*=i.y&gt;a||i.y&lt;0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;null!==n.x&amp;&amp;null!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/2&amp;&amp;(i.x-=.03*o,i.y-=.03*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle="rgba("+m.c+","+(t+.2)+")",l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)&#125;),r(i)&#125;var c,a,u=document.createElement("canvas"),m=t(),d="c_n"+m.l,l=u.getContext("2d"),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n)&#123;window.setTimeout(n,1e3/45)&#125;,x=Math.random,w=&#123;x:null,y:null,max:2e4&#125;;u.id=d,u.style.cssText="position:fixed;top:0;left:0;z-index:"+m.z+";opacity:"+m.o,e("body")[0].appendChild(u),o(),window.onresize=o,window.onmousemove=function(n)&#123;n=n||window.event,w.x=n.clientX,w.y=n.clientY&#125;,window.onmouseout=function()&#123;w.x=null,w.y=null&#125;;for(var y=[],s=0;m.n&gt;s;s++)&#123;var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push(&#123;x:f,y:h,xa:g,ya:p,max:6e3&#125;)&#125;setTimeout(function()&#123;i()&#125;,100)&#125;(); 背景透明在 \themes\next\source\css\_custom\custom.styl 中写上 .content-wrap {background: transparent;}custom.styl文件为用户自定义风格，卸载里面的内容会优先覆盖主题的设定，也可以定义其他的方法等。 背景放图片首先找到一个背景图片放到 \themes\next\source\images下；修改themes\next\source\css_schemes\Pisces（Mist和Muse也行）\index.styl文件，在文件的最上方加上一代码1body &#123; background:url(/images/backGround.jpg);&#125; 修改文章超链接样式将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。修改 themes\next\source\css\_custom\custom.styl ，添加如下 css 样式（颜色可以自己更改，百度html颜色代码即可找到）： 12345678.post-body p a &#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: #0477ab; text-decoration: underline; &#125;&#125; High一下第一种修改header.swig模板模板位置：themes\next\layout\_partials\header.swig在以下代码的结尾换行1234567891011121314&#123;% if hasSearch %&#125; &lt;li class="menu-item menu-item-search"&gt; &#123;% if theme.swiftype_key %&#125; &lt;a href="javascript:;" class="st-search-show-outputs"&gt; &#123;% elseif config.search %&#125; &lt;a href="javascript:;" class="popup-trigger"&gt; &#123;% endif %&#125; &#123;% if theme.menu_icons.enable %&#125; &lt;i class="menu-item-icon fa fa-search fa-fw"&gt;&lt;/i&gt; &lt;br /&gt; &#123;% endif %&#125; &#123;&#123; __('menu.search') &#125;&#125; &lt;/a&gt; &lt;/li&gt;&#123;% endif %&#125; 插入以下内容,感谢Neveryu修复了一些bug，以下是Neveryu的代码。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209&lt;!-- 自定义High一下的功能 --&gt; &lt;li class="menu-item"&gt; &lt;a title="把这个链接拖到你的工具栏中,任何网页都可以High" href='javascript:( /* * Copyright (C) 2016 Never_yu (Neveryu.github.io) &lt;React.dong.yu@gmail.com&gt; * Sina Weibo (http://weibo.com/Neveryu) * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ function go() &#123; var songs = [ "http://ofyfogrgx.bkt.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3", "http://ofyfogrgx.bkt.clouddn.com/Music-sunburst.mp3", "http://ofyfogrgx.bkt.clouddn.com/blog/20161115/150103346.mp3", "http://ofyfogrgx.bkt.clouddn.com/blog/20161115/150842689.mp3", "http://ofyfogrgx.bkt.clouddn.com//blog/Apple%20&amp;%20Stone%20-%20Lost.mp3" ]; function c() &#123; var e = document.createElement("link"); e.setAttribute("type", "text/css"); e.setAttribute("rel", "stylesheet"); e.setAttribute("href", f); e.setAttribute("class", l); document.body.appendChild(e) &#125; function h() &#123; var e = document.getElementsByClassName(l); for (var t = 0; t &lt; e.length; t++) &#123; document.body.removeChild(e[t]) &#125; &#125; function p() &#123; var e = document.createElement("div"); e.setAttribute("class", a); document.body.appendChild(e); setTimeout(function() &#123; document.body.removeChild(e) &#125;, 100) &#125; function d(e) &#123; return &#123; height : e.offsetHeight, width : e.offsetWidth &#125; &#125; function v(i) &#123; var s = d(i); return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r &#125; function m(e) &#123; var t = e; var n = 0; while (!!t) &#123; n += t.offsetTop; t = t.offsetParent &#125; return n &#125; function g() &#123; var e = document.documentElement; if (!!window.innerWidth) &#123; return window.innerHeight &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123; return e.clientHeight &#125; return 0 &#125; function y() &#123; if (window.pageYOffset) &#123; return window.pageYOffset &#125; return Math.max(document.documentElement.scrollTop, document.body.scrollTop) &#125; function E(e) &#123; var t = m(e); return t &gt;= w &amp;&amp; t &lt;= b + w &#125; function S() &#123; var e = document.getElementById("audio_element_id"); if(e != null)&#123; var index = parseInt(e.getAttribute("curSongIndex")); if(index &gt; songs.length - 2) &#123; index = 0; &#125; else &#123; index++; &#125; e.setAttribute("curSongIndex", index); N(); &#125; e.src = i; e.play() &#125; function x(e) &#123; e.className += " " + s + " " + o &#125; function T(e) &#123; e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)] &#125; function N() &#123; var e = document.getElementsByClassName(s); var t = new RegExp("\\b" + s + "\\b"); for (var n = 0; n &lt; e.length; ) &#123; e[n].className = e[n].className.replace(t, "") &#125; &#125; function initAudioEle() &#123; var e = document.getElementById("audio_element_id"); if(e === null)&#123; e = document.createElement("audio"); e.setAttribute("class", l); e.setAttribute("curSongIndex", 0); e.id = "audio_element_id"; e.loop = false; e.bgcolor = 0; e.addEventListener("canplay", function() &#123; setTimeout(function() &#123; x(k) &#125;, 500); setTimeout(function() &#123; N(); p(); for (var e = 0; e &lt; O.length; e++) &#123; T(O[e]) &#125; &#125;, 15500) &#125;, true); e.addEventListener("ended", function() &#123; N(); h(); go(); &#125;, true); e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"; document.body.appendChild(e); &#125; &#125; initAudioEle(); var e = 30; var t = 30; var n = 350; var r = 350; var curSongIndex = parseInt(document.getElementById("audio_element_id").getAttribute("curSongIndex")); var i = songs[curSongIndex]; var s = "mw-harlem_shake_me"; var o = "im_first"; var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"]; var a = "mw-strobe_light"; /* harlem-shake-style.css，替换成你的位置，也可以直接使用：//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css */ var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"; var l = "mw_added_css"; var b = g(); var w = y(); var C = document.getElementsByTagName("*"); var k = null; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; if (E(A)) &#123; k = A; break &#125; &#125; &#125; if (A === null) &#123; console.warn("Could not find a node of the right size. Please try a different page."); return &#125; c(); S(); var O = []; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; O.push(A) &#125; &#125; &#125;)()'&gt;&lt;i class="menu-item-icon fa fa-music fa-fw"&gt;&lt;/i&gt;High一下&lt;/a&gt; &lt;/li&gt; &lt;!-- end High一下 --&gt; 第二种 不修改themes\next\layout\_partials\header.swig文件而是修改themes\next\layout\_macro\sidebar.swig123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183 &#123;% if theme.rss %&#125; &lt;div class="feed-link motion-element"&gt; &lt;a href="&#123;&#123; url_for(theme.rss) &#125;&#125;" rel="alternate"&gt; &lt;i class="fa fa-rss"&gt;&lt;/i&gt; RSS &lt;/a&gt;&lt;!-- 在RSS的div内加入，引用相同的样式 --&gt;&lt;!-- 自定义High一下的功能 --&gt;&lt;a href='javascript:( function go() &#123; var songs = [ "http://ofyfogrgx.bkt.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3", "http://ofyfogrgx.bkt.clouddn.com/Music-sunburst.mp3", "http://ofyfogrgx.bkt.clouddn.com/blog/20161115/150103346.mp3", "http://ofyfogrgx.bkt.clouddn.com/blog/20161115/150842689.mp3", "http://ofyfogrgx.bkt.clouddn.com//blog/Apple%20&amp;%20Stone%20-%20Lost.mp3" ]; function c() &#123; var e = document.createElement("link"); e.setAttribute("type", "text/css"); e.setAttribute("rel", "stylesheet"); e.setAttribute("href", f); e.setAttribute("class", l); document.body.appendChild(e) &#125; function h() &#123; var e = document.getElementsByClassName(l); for (var t = 0; t &lt; e.length; t++) &#123; document.body.removeChild(e[t]) &#125; &#125; function p() &#123; var e = document.createElement("div"); e.setAttribute("class", a); document.body.appendChild(e); setTimeout(function() &#123; document.body.removeChild(e) &#125;, 100) &#125; function d(e) &#123; return &#123; height : e.offsetHeight, width : e.offsetWidth &#125; &#125; function v(i) &#123; var s = d(i); return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r &#125; function m(e) &#123; var t = e; var n = 0; while (!!t) &#123; n += t.offsetTop; t = t.offsetParent &#125; return n &#125; function g() &#123; var e = document.documentElement; if (!!window.innerWidth) &#123; return window.innerHeight &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123; return e.clientHeight &#125; return 0 &#125; function y() &#123; if (window.pageYOffset) &#123; return window.pageYOffset &#125; return Math.max(document.documentElement.scrollTop, document.body.scrollTop) &#125; function E(e) &#123; var t = m(e); return t &gt;= w &amp;&amp; t &lt;= b + w &#125; function S() &#123; var e = document.getElementById("audio_element_id"); if(e != null)&#123; var index = parseInt(e.getAttribute("curSongIndex")); if(index &gt; songs.length - 2) &#123; index = 0; &#125; else &#123; index++; &#125; e.setAttribute("curSongIndex", index); N(); &#125; e.src = i; e.play() &#125; function x(e) &#123; e.className += " " + s + " " + o &#125; function T(e) &#123; e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)] &#125; function N() &#123; var e = document.getElementsByClassName(s); var t = new RegExp("\\b" + s + "\\b"); for (var n = 0; n &lt; e.length; ) &#123; e[n].className = e[n].className.replace(t, "") &#125; &#125; function initAudioEle() &#123; var e = document.getElementById("audio_element_id"); if(e === null)&#123; e = document.createElement("audio"); e.setAttribute("class", l); e.setAttribute("curSongIndex", 0); e.id = "audio_element_id"; e.loop = false; e.bgcolor = 0; e.addEventListener("canplay", function() &#123; setTimeout(function() &#123; x(k) &#125;, 500); setTimeout(function() &#123; N(); p(); for (var e = 0; e &lt; O.length; e++) &#123; T(O[e]) &#125; &#125;, 15500) &#125;, true); e.addEventListener("ended", function() &#123; N(); h(); go(); &#125;, true); e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"; document.body.appendChild(e); &#125; &#125; initAudioEle(); var e = 30; var t = 30; var n = 350; var r = 350; var curSongIndex = parseInt(document.getElementById("audio_element_id").getAttribute("curSongIndex")); var i = songs[curSongIndex]; var s = "mw-harlem_shake_me"; var o = "im_first"; var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"]; var a = "mw-strobe_light"; /* harlem-shake-style.css，替换成你的位置，也可以直接使用：//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css */ var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"; var l = "mw_added_css"; var b = g(); var w = y(); var C = document.getElementsByTagName("*"); var k = null; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; if (E(A)) &#123; k = A; break &#125; &#125; &#125; if (A === null) &#123; console.warn("Could not find a node of the right size. Please try a different page."); return &#125; c(); S(); var O = []; for (var L = 0; L &lt; C.length; L++) &#123; var A = C[L]; if (v(A)) &#123; O.push(A) &#125; &#125; &#125;)()'&gt;&lt;i class="menu-item-icon fa fa-music fa-fw"&gt;&lt;/i&gt;High&lt;/a&gt;&lt;/div&gt; &lt;!-- end High一下 --&gt; &#123;% endif %&#125; 如果需要并排显示，像这样子：修改文件：\themes\source\css\_schemes\Pisces（主题风格对应的文件夹）_sidebar.styl找到这样一段，把display: block;改为display: inline-block;1234.feed-link a &#123; display: inline-block; //并行显示，block则为分行显示 color: $orange; border: none; 给 Github 添加 README默认情况下，Github中每一个项目，我们希望有一份README.md的文件来作为项目的说明，但是我们在项目根目录下的blog\source目录下创建一份README.md文件，写好说明介绍，部署的时候，这个README.md会被hexo解析掉，而不会被解析到Github中去的。正确的解决方法其实很简单： 把README.md文件的后缀名改成”MDOWN”然后扔到blog\source文件夹下即可，这样hexo不会解析，Github也会将其作为MD文件解析。 或者你还可以在站点配置文件中修改，以禁止编译文件。12skip_render: - README.md 更换来必力评论系统https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html 加入左上角「fork me on github」github官方教程 返回顶部按钮修改：themes/next5.0.1/source/css/_variables/base.styl找到以下这段代码123456789101112// Components// --------------------------------------------------// Back to top$b2t-opacity = 1$b2t-position-bottom = -100px$b2t-position-bottom-on = 19px//$b2t-position-right = 50px$b2t-position-left = 85px //这段代码是新增的，注释掉上面哪行代码。 $b2t-font-size = 12px$b2t-color = white$b2t-bg-color = $black-deep 接着修改themes/next5.0.1/source/css/_custom/custom.styl或themes/next5.0.1/source/css/_common/components/back-to-top.styl找到以下这段代码1234567891011//返回顶部按钮样式.back-to-top &#123; box-sizing: border-box; position: fixed; bottom: $b2t-position-bottom; //right: $b2t-position-right; left: $b2t-position-left; //这段代码是新增的，注释掉上面哪行代码。 z-index: $zindex-5; padding: 0 6px; width: 25px; background: $b2t-bg-color; 给 Blog 添加 LICENSE修改主题配置文件中的 160 行左右： 12345# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: by-nc-sa#creative_commons: 取消第 4 行的注释，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。 错误信息LF will be replacedWindows 提交命令的时候出现 warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX 的警告。输入命令：1git config --global core.autocrlf false 部署12345cd your_site/touch Staticfile #创建静态文件标识，用于Github识别，名字必须是Staticfilehexo clean #清除以前生成的旧文件hexo g #生成新的站点文件hexo d #部署到Github上 可参考：http://shomy.top/2016/03/03/hexo-in-coding-github/部署完成打开网址就能看到效果了。 Hexo的部署只会把生成的文件上传到仓库中，本地的设置，主题，*.md文件等等都不会上传，换一台电脑就没法干活了，一旦删除，那基本上所有的努力都白费了，这里介绍2种备份方法： 1.新建一个仓库专门用来存放这些文件（最安全最方便管理的办法） 2.和发布的网站使用同一个仓库，master用来存放这些文件，新建分支来发布网站（注意pages服务绑定该分支，不要合并分支，一旦合并就全部混乱了）两种方法都要在网站根目录设定好远程端仓库：git add remote XXXX每次发布完网页，就顺手执行以下代码，把文档也同步到仓库中。123git add .git commit -m "xxx"git push 本博客目前是源文件分为github和coding两个仓库，发布的博客也是部署在github和coding两个不同的仓库。域名做了国内外IP分流。 站点配置文件1234567891011121314# Deployment 自动部署到仓库## 官方文档Docs: https://hexo.io/docs/deployment.html 有部署到各种服务器的方法## 参考：http://www.lxway.com/240950852.htm#不管是github还是coding，type都填写gitdeploy:- type: git repo: git@git.coding.net:leolan/blog.git,master message: 'LeoLan updated：&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;' #这个是commit的说明，因为是发布站点，方便看到发布时间。- type: git repo: git@github.com:MyLeoLan/blog.git,master message: 'LeoLan updated：&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;'#- type: git# repo: git@git.oschina.net:leolan/leolan.git,master# message: 'LeoLan updated：&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;' git config文件12345678910111213[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote "origin"] url = git@git.coding.net:leolan/blogpost.git url = git@github.com:MyLeoLan/blogpost_backup.git[branch "master"] remote = origin merge = refs/heads/master Travis CITravis CI是一个类似于jenkins的一种持续构建工具Travis CI 持续集成自动部署Hexo：https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/ 绑定域名原理是域名提供商的域名指向github或coding的域名服务器，在项目内建立CNAME的域名指向文件后，会自动去自己的域名服务器github或coding上查找该域名，找到啦就绑定在一起，找不到就绑定不了；如果绑定不了，那么域名指向的github和coding（Pages绑定域名时）服务器会报404错误；域名指向的coding（Pages页面没有绑定域名时）域名服务器会把index当做普通超文本解析，不会加载js、cs等资源。 1· 在你的项目下新建一个CNAME文件，注意没有后缀名。在里面添加你的域名，一行一个，如我的就是 www.leolan.top和 leolan.top（github会自动绑定第一个，第二个也要绑定，不绑定访问报404错误），然后推送CNAME文件到远程仓库。（Github不建议在pages页上绑定设置，页面上是只能绑定一个的）；Coding的话要在CNAME文件里绑定两个，在Pages页面也绑定两个。 2· 到域名服务商那里增加你的CNAME记录。添加两条记录，@和www的主机记录，记录类型为CNAME，记录值为 username.github.io.，重要的是 io 后面还有一个原点（看官方帮助文档Coding的就不用加点），切记。过几分钟，刷新网页，就能直接用域名访问了，因为是在项目内建的CNAME文件，所以域名直接指向此项目文件夹，其他项目可以用其他域名设定。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Hexo 搭建博客</tag>
        <tag>Hexo github</tag>
        <tag>Hexo Coding</tag>
        <tag>Next 定制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jekyll 搭建博客]]></title>
    <url>%2Fposts%2F56436%2F</url>
    <content type="text"><![CDATA[安装JekyllJekyll用Ruby写的，jekyll是把原文上传github，可以直接生成博客，也可以用在线编辑器处理。 搭建ruby环境（ruby版本最好大于2.2.2），详见：Ruby开发环境搭建 安装kramdown（Markdown文档处理器）gem install kramdown 安装rouge（语法高亮）gem install rouge 动态处理插件execgem install execjs 安装ruby工具集管理工具Bundlergem install bundler 安装rails WEB框架（可选，不安装运行jekyll时可能报错）gem install rails7.安装Jekyll（“Mac的安装见错误解决”）gem install jekyll 之后需要添加功能，要安装其他gems插件时，进入该项目目录再安装，不然不会被包含，就不会生效。错误解决：Mac： 12mkdir -p /usr/local/Cellar/ruby/binsudo gem install jekyll -n /usr/local/Cellar/ruby/bin 关闭终端窗口再打开，输入jekyll看这个指令是否存在，如果提示不存在，那就再修改/Users/用户名/.bash_profile文件，把Jekyll的路径写进去。export PATH=/usr/local/Cellar/ruby/bin:$PATH再重新打开终端，这时候Jekyll指令应该ok了。注：whereis gem可以看到路径是/usr/bin/gem,当前的gem路径是系统默认的gem版本，这个版本用了是会报错的，用这个版本安装Jekyll默认安装Jekyll到相同目录下，所以同样会出现permission denied的报错信息。有人说可以用symlink，但即使用了sudo也会是permission denied的报错。所以直接安装Jekyll并同时指定安装路径了。 Windows：如果安装jekyll或bundle报错，则需要安装编译工具。打开：http://rubyinstaller.org/downloads/ 下载对应的DevKit-mingw，解压到没有中文、空格、特殊符号的文件夹， cmd进入该目录 命令行下运行ruby dk.rb init 编辑目录下的config.yml文件 最尾加上- C:\Ruby23-x64 #即ruby安装目录 运行ruby dk.rb review #（可选，一般不用运行） 运行ruby dk.rb install 如果上述步骤只有info输出而没有warning输出，则应该安装成功了 测试gem install json --platform=ruby如果安装成功，则表示devkit安装成功。 如果失败，可以重装ruby和ruby-devkit，或者选择2.0.0以上版本的ruby版本，或https://rubygems.org/pages/download 按提示更新gem版本。 ok,安装完成啦！ 建立站点1234jekyll new new-site #创建新站点cd new-site #进入站点目录下一步才能开启服务jekyll serve --watch #加--watch参数修改后会自动刷新页面，而不用手动重启jekylljekyll build #写了新文章后，编译文档 然后访问localhost:4000就能看到blog的页面了。 注：运行报Could not find a JavaScript runtime.错误答：在gemfile中加入12gem 'execjs' gem 'therubyracer' 然后安装gem install therubyracer 再运行就好了。 一个基本的 Jekyll 网站的目录结构一般是像这样的： 123456789101112131415161718├── _config.yml #配置文件 ├── _drafts #草稿目录| ├── begin-with-the-crazy-ideas.textile| └── on-simplicity-in-technology.markdown├── _includes #你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签 &#123;\% include file.ext \%&#125; 来把文件 _includes/file.ext 包含进来。| ├── footer.html #HTML尾| └── header.html #HTML头├── _layouts| ├── default.html #默认模板| └── post.html #文章模板├── _posts #文章目录| ├── XXXX.md| └── XXXXXX.md├── _data| └── members.yml├── _site #生成的站点文件存放目录└── index.html #入口index文件└──Other Files/Folders #其他一些未被提及的目录和文件如 css 还有 images 文件夹， favicon.ico 等文件都将被完全拷贝到生成的 site 中。 安装完成后，如果你要配置你自己的站点信息，那么你就要修改_config.yml这个文件。里面可以配置站点名称，描述，多说，统计，友链等等。参考：http://jekyll.com.cn/ 中文官网http://pwnny.cn/original/2016/06/26/MakeBlog.html 写文章在_posts里，文件名按YEAR-MONTH-DAY-title.md创建文件，在文章头部添加YAML头信息（YAML front- matter）： 123456789---layout: posttitle: "第一篇博客"date: 2016/10/26 13:03:42categories: 文章阅读tag: 第一篇博客,jekyll搭建博客---这里开始用Markdown的语法编写文章。 每次都自己写yml文件头太麻烦，配置中会说到用Rakefile脚本自动生成文件。注意：yml文件头不要有中文，.md文件名也不要有中文，否则网页会显示404错误（原因未知） 配置优化、美化站点主题部分可以在http://jekyllthemes.org/这个上面找找，Hux这个主题还是不错的，喜欢的直接下载，重新修改里面配置就行了。可以fork或下载回来，整个替换，把文章拷过去就行。一个很好的Hux模板：https://github.com/huxpro/huxpro.github.io/ 配置文件设置我用到的参数：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#不要在配置文件中使用 tab 制表符,用空格代替。#配置请参考：http://jekyllcn.com/docs/configuration/#front-matter-defaults# Site settingstitle: LeoLan的博客author: Leo Lanemail: 842632422@qq.comdescription: &gt; # this means to ignore newlines until "baseurl:" Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.#自定义站点标题#webrick:# headers:# My-Header: My-Value# My-Other-Header: My-Other-Value# Site URL NOTE: if your site is base on subdir /blog you should change base to "/blog"domain: "http://myleolan.github.io" #你的github网址 the domain URL for your sitebase: "" # the relative path that different with domain so you can test locally# Source URL NOTE: end with / cause it's [URL + FILE]w3c_url: "/w3c/" # the base url of css js and imagespostImage_url: "/w3c/images/" # the base url of post imagespostfile: "/db/Postfile" # the Databasesitefile: "/db/Sitefile" # the Database# 3rd URLduoshuo_short_name: "leolan" # 注册多说是填写的网址前缀 the user of user.domain.com duoshuo_user_uid: "a61c3f290749b621688a3f42c7e8e31c" #多说的uid the admin user uid duoshuo_user_name: "leolan" #多说的用户名 the admin user names duoshuo_max_depth: "2" # the max_depth setting in duoshuo commentsduoshuo_url: "/w3c/duoshuo/embed.min.js" # the local duoshuo comment plugin, you can change it to remote "http://static.duoshuo.com/"jquery_url: "http://cdn.bootcss.com/jquery/3.1.0/jquery.min.js" # use cdnbaiduTemplate_url: "/w3c/js/baiduTemplate.js" #use localgoogle_analytics_id: "UA-86334360-1" #Google分析# Build Settingsexcerpt_separator: "\n\n" # you can specify your own separator here, default is "\n\n" Stringpermalink: /:year/:month/:day/:title.html #生成html文件的命名方式highlighter: rouge #代码高亮markdown: kramdown #markdown文档处理器kramdown: input: GFM hard_wrap: true # a newline in markdown text would be changed to &lt;br&gt;#插件（需要包含的插件）gems: - jemojilsi: BOOL #建立文件索引####---------------------------------------------------------------------#以下为github的默认设置# Following is got in Github Help With Configuring Jekyll# Github Page Default Settings which you can override:# kramdown:# input: GFM# hard_wrap: false# gems:# - jekyll-coffeescript# - jekyll-paginate# Github Page override the following settings which you cannot change:# lsi: false# safe: true #安全方式，禁用所有插件# source: [your repo's top level directory]# incremental: false# highlighter: rouge# gist:# noscript: false# kramdown:# math_engine: mathjax 自动生成文件模板前面说到的带yml信息的文件头1234567---layout: posttitle: "第一篇博客"date: 2016/10/26 13:03:42categories: 文章阅读tag: 第一篇博客,jekyll搭建博客--- 文件头可以自动生成，而不用每次都手工码字，在网站根目录下创建Rakefile文件（ruby的一中脚本配置文件）里面填入代码： 1234567891011121314151617181920212223242526272829303132333435363738task :default =&gt; :newrequire 'fileutils'desc "创建新 post"task :new do puts "请输入要创建的.md文件名：" @url = STDIN.gets.chomp puts "请输入 文章 标题：" @name = STDIN.gets.chomp puts "请输入 文章 子标题：" @subtitle = STDIN.gets.chomp puts "请输入 文章 分类，以空格分隔：" @categories = STDIN.gets.chomp puts "请输入 博客分类 标签，以空格分隔：" @tag = STDIN.gets.chomp @slug = "#&#123;@url&#125;" @slug = @slug.downcase.strip.gsub(' ', '-') @date = Time.now.strftime("%F") @post_name = "_posts/#&#123;@date&#125;-#&#123;@slug&#125;.md" if File.exist?(@post_name) abort("文件名已经存在！创建失败") end FileUtils.touch(@post_name) open(@post_name, 'a') do |file| file.puts "---" file.puts "layout: post" file.puts "title: #&#123;@name&#125;" file.puts "subtitle: #&#123;@subtitle&#125;" file.puts "author: Leo Lan" file.puts "date: #&#123;Time.now&#125;" file.puts "categories: #&#123;@categories&#125;" file.puts "tag: #&#123;@tag&#125;" file.puts "published: true" file.puts "---" end exec "vim #&#123;@post_name&#125;"end layout表示使用的是post布局，title是文章标题，date是自动生成的日期，subtitle是副标题categories是该文章生成html文件后存放的目录（分类），可以去_site/jekyll/update下找到对应日期下面的html文档。当然你也可以只设置jekyll单一的目录，甚至是更多级别的目录，用空格分开即可。tag是文章的标签。published表示是否发布文章下次在命令行输入rake new按提示一步一步就能创建一个很好的文件啦，剩下的只需要专心写作就好了。 参考：http://www.liubaicai.net/articles/733/ 用Github Pages生成个人博客Github Pages生成网站的两种方式的基本原理 法一：在Github上有一个账号，名为 username （任意），有一个项目，名为 username.github.io （固定格式，username与账号名一致），项目分支名为 master （默认固定），这个分支有类似下面的目录结构：当你访问 http://username.github.io/ 时，Github会使用Jekyll解析用户 username 名下的 username.github.io 项目中，分支为 master 的源代码，为你构建一个静态网站，并将生成的 index.html 展示给你。 法二：在Github上有一个账号，名为 username （任意），有一个项目，名为 blog （任意），项目分支名为 gh-pages （固定），这个分支也有上面那种结构。那么当你访问 http://username.github.io/blog 时，Github会去解析 username 用户下，project 项目的 gh-pages 分支下的源代码，为你构建网站。 所以要搭建自己的博客你有两种选择： 建立名为 username.github.io 的项目，在 master 分支下存放网站源代码 建立名为 blog 的项目，在 gh-pages 分支下存放网站源代码考虑到第一种项目名复杂不方便同步等，这里用第二种方法，方便管理。新建一个仓库，名称随意，ReadMe.md文件随意，不懂的查看教程第4节“创建远程仓库”：git教程 翻到下面，选择Launch automatic page generator再接着编译一下内容，点Continue to layouts选好模板，点击Publish page，就生成了Github Pages，并且，分支自动设置为了gh-pages。 打开网站看看效果：https://myleolan.github.io/blog/以后本地写好的文章，jekyll bundle之后就可以推送到gh-pages分支即可。推送博客到github推荐用命令行，Windows版的客户端不熟悉容易误操作。 博客源码和发布的博客网页在同一个仓库中，可以共同存放。（Hexo是生成的网站和博客原文分开存放的） Github Pages环境本地化上面搭建的只是Jekyll的本地环境，当push到Github Pages后环境会有所变化，为了本地看到的效果和托管在Github Pages看到的效果一致，我们最好搭建本地的Github Pages环境。ruby要2.0.0以上版本，如果ruby --version查看版本低于2.0.0，那么需要升级ruby。安装ruby工具集管理工具Bundler （前面安装过了就不用安装了）12gem install bundlerbundler -v 进入jekyll创建的网站目录12git init #把当前目录加入版本库中git checkout -b gh-pages #创建gh-pages分支，用于推送到github上的gh-pages分支上。 创建Gemfile文件 如果本生有Gemfile和Gemfile.lock那就删除掉，内容如下：12345source 'https://ruby.taobao.org' #(淘宝源，国内比较快)gem 'github-pages', group: :jekyll_plugins或source 'https://rubygems.org' #(官方源)gem 'github-pages', group: :jekyll_plugins 执行下面的命令安装Github Pages的工具集（在网站根目录，就是Gemfile文件的路径）bundle install运行起来（一开始创建了网站就可以直接跑起来啦，如果没有创建网站，创建或fork别人的。）bundle exec jekyll serve 如果出现bundle exec jekyll serve能启动，而jekyll serve不能启动，则删除Gemfile和Gemfile.lock重新运行jekyll serve即可。更多Github Pages本地化环境搭建，可参考官方文档:https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/ 注意：如果是是下载了别人的模板进行修改，只把文件拷到自己项目中进行添加就可以了，不要全选把.git文件夹也拷过了，别人的分支和自己的不同时会出现各种问题。 调试好各种东西后就可以推送到Github了。 用markdown写文章，并按规定名称格式保存在_posts里。 用jekyll serve –watch或bundle exec jekyll server启动服务器，在浏览器里查看。(指定端口在_config.yml文件中增加port: xxxx) 用git客户端推送到远程仓库里。 通过域名访问。 绑定域名原理是域名提供商的域名指向github或coding的域名服务器，在项目内建立CNAME的域名指向文件后，会自动去自己的域名服务器github或coding上查找该域名，找到啦就绑定在一起，找不到就绑定不了；如果绑定不了，那么域名指向的github和coding（Pages绑定域名时）服务器会报404错误；域名指向的coding（Pages页面没有绑定域名时）域名服务器会把index当做普通超文本解析，不会加载js、cs等资源。 1· 在你的项目下新建一个CNAME文件，注意没有后缀名。在里面添加你的域名，一行一个，如我的就是 www.leolan.top和 leolan.top（github会自动绑定第一个，第二个也要绑定，不绑定访问报404错误），然后推送CNAME文件到远程仓库。（Github不建议在pages页上绑定设置，页面上是只能绑定一个的）；Coding的话要在CNAME文件里绑定两个，在Pages页面也绑定两个。 2· 到域名服务商那里增加你的CNAME记录。添加两条记录，@和www的主机记录，记录类型为CNAME，记录值为 username.github.io.，重要的是 io 后面还有一个原点（看官方帮助文档Coding的就不用加点），切记。过几分钟，刷新网页，就能直接用域名访问了，因为是在项目内建的CNAME文件，所以域名直接指向此项目文件夹，其他项目可以用其他域名设定。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Jekyll 搭建博客</tag>
        <tag>jekyll github</tag>
        <tag>jekyll Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix监控]]></title>
    <url>%2Fposts%2F27796%2F</url>
    <content type="text"><![CDATA[Zabbix 基础部分Zabbix 简介 Zabbix 是一个高度集成的网络监控解决方案，可以提供企业级的开源分布式监控解决方案，由一个国外的团队持续维护更新，软件可以自由下载使用，运作团队靠提供收费的技术支持赢利 zabbix是一个基于Web界面的，提供分布式系统监控以及网络监视功能的企业级的开源解决方案。 zabbix能监视各种网络参数，保证服务器系统的安全运营，并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题 zabbix主要由2部分构成zabbix server和zabbix agent，可选组建zabbix proxy zabbix server可以通过SNMP，zabbix agent，fping端口监视等方法对远程服务器或网络状态完成监视，数据收集等功能。同时支持Linux以及Unix平台，Windows平台只能安装客户端 Zabbix 功能 ①具备常见的商业监控软件所具备的功能（主机的性能监控、网络设备性能监控、数据库、性能监控、FTP 等通用协议监控、多种告警方式、详细的报表图表绘制） ②支持自动发现网络设备和服务器（可以通过配置自动发现服务器规则来实现） ③支持自动发现（low discovery）key 实现动态监控项的批量监控（需写脚本） ④支持分布式，能集中展示、管理分布式的监控点 ⑤扩展性强，server 提供通用接口（api 功能），可以自己开发完善各类监控（根据相关接口编写程序实现）编写插件容易，可以自定义监控项，报警级别的设置。 ⑥数据收集 1.可用和性能检测 ;支持snmp(包括trapping and polling)，IPMI，JMX，SSH，TELNET 2.自定义的检测,自定义收集数据的频率 3.服务器/代理和客户端模式 4.灵活的触发器 ;可以定义非常灵活的问题阈值，称为触发器，从后端数据库的参考值 5.高可定制的报警 ;发送通知，可定制的报警升级，收件人，媒体类型 ;通知可以使用宏变量有用的变量 6.自动操作包括远程命令 7.实时的绘图功能 ;监控项实时的将数据绘制在图形上面 8.WEB 监控能力 ;ZABBIX 可以模拟鼠标点击了一个网站，并检查返回值和响应时间 9.Api 功能 ;应用api功能，可以方便的和其他系统结合，包括手机客户端的使用。 更多功能请查看官网文档：http://www.zabbix.com/documentation.php Zabbix优缺点优点 1、开源，无软件成本投入 2、Server 对设备性能要求低 3、支持设备多，自带多种监控模板 4、支持分布式集中管理，有自动发现功能，可以实现自动化监控 5、开放式接口，扩展性强，插件编写容易 6、当监控的item 比较多服务器队列比较大时可以采用被动状态，被监控客户端主动从 7、server 端去下载需要监控的item 然后取数据上传到server 端。这种方式对服务器的负载比较小。 8、Api 的支持，方便与其他系统结合 缺点 需在被监控主机上安装agent，所有数据都存在数据库里，产生的数据很大,瓶颈主要在数据库。 Zabbix监控原理:Zabbix 通过C/S 模式采集数据，通过B/S模式在web 端展示和配置。 被监控端：主机通过安装agent 方式采集数据，网络设备通过SNMP 方式采集数据Server 端：通过收集SNMP 和agent 发送的数据，写入数据库（MySQL，ORACLE 等），再通过php+apache 在web 前端展示。 Zabbix 运行条件:Server：Zabbix Server 需运行在LAMP（Linux+Apache+Mysql+PHP）环境下（或者LNMP），对硬件要求低Agent：目前已有的agent 基本支持市面常见的OS，包含Linux、HPUX、Solaris、Sun、windowsSNMP：支持各类常见的网络设备 ;SNMP(Simple Network Management Protocol,简单网络管理协议 Zabbix监控过程逻辑图 监控类型硬件监控:适用于物理机、远程管理卡（iDRAC），IPMI（只能平台管理接口）ipmitools:，MegaCli（查看Raid磁盘）系统监控: 监控cpt：lscpu、uptime、top、vmstat 1 、mpstat 1、htop监控内存： free -m监控硬盘：df -h、iotop监控网络：iftop、netstat、ss应用服务监控：nfs、MySQL、nginx、apache、php、rsync更详细的监控类型可以参考：http://www.abcdocker.com/abcdocker/1376 所有监控范畴，都可以整合到Zabbix中 硬件监控：Zabbix、IPMI、lnterface 系统监控：Zabbix、Agent、Interface Java监控：Zabbix、JMX、lnterface 网络设备监控：Zabbix、SNMP、lnterface 应用服务监控：Zabbix、Agent、UserParameter MySQL数据库监控：percona-monitoring-plulgins URL监控：Zabbix Web监控 Zabbix 环境配置Centos 7 yum安装yum安装方式全部为默认位置，如果是已搭建了LANMP或LNMP环境，编译安装要指定位置。1、环境信息1234[root@localhost ~]# cat /etc/redhat-release CentOS Linux release 7.2.1511 (Core) [root@localhost ~]# uname -r3.10.0-327.28.3.el7.x86_64 2、yum安装使用阿里云yum源,官方yum源下载会比较慢。1234#Centos 7rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpm#Centos 6rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.2/rhel/6/x86_64/zabbix-release-3.2-1.el6.noarch.rpm 下载release版本，会在yum.repos.d下面生成一个zabbix.repo的文件 3、服务端安装相关软件包1yum install zabbix-server zabbix-web zabbix-server-mysql zabbix-web-mysql mariadb-server mariadb -y 注：如果Server端也需要监控则需要安装zabbix-agent;在Centos7中，mysql改名为mariadb 4、修改PHP时区设置1sed -i 's@# php_value date.timezone Europe/Riga@php_value date.timezone Asia/Shanghai@g' /etc/httpd/conf.d/zabbix.conf 注：要注意需要改的配置文件是/etc/httpd/conf.d/zabbix.conf而不是/etc/php.ini 数据库设置1.启动数据库systemctl start mariadb 2.创建zabbix数据库及用户1234mysqlcreate database zabbix character set utf8 collate utf8_bin;grant all on zabbix.* to zabbix@'localhost' identified by '123456';exit 3.导入数据123cd /usr/share/doc/zabbix-server-mysql-3.0.4/ll #可看到有create.sql.gz文件zcat create.sql.gz |mysql -uzabbix -p123456 zabbix 注：我们使用zcat，可以查看压缩包包，和cat基本相似；类似的还有：zgrep、zless、zdiff 等 4.修改zabbix配置文件12345vim /etc/zabbix/zabbix_server.conf DBHost=localhost #数据库所在主机DBName=zabbix #数据库名DBUser=zabbix #数据库用户DBPassword=123456 #数据库密码 5.启动zabbix及apache12systemctl start zabbix-serversystemctl start httpd 注：如果没有启动成功，要看一下是不是80端口被占用 6.Web管理界面的安装访问地址：http://IP/zabbix/setup.php点击Next step进行安装首先要确保没有no，如果时区没有改好会提示我们进行修改 账号密码都是我们刚刚在配置文件中设置的，端口默认就是3306 为我们的zabbix起个名字，一会在右上角会显示最后是展示我们的配置信息，可以查看到哪里有错误点击Finish提示：登录之后请立即修改密码 7.配置zabbix-agent端1234vim /etc/zabbix/zabbix_agentd.conf Server=127.0.0.1 #修改Server端的IP地址（被动模式IP地址）ServerActive=127.0.0.1 #主动模式，主动向server端报告systemctl start zabbix-agent 查看端口号:netstat -lntp10051为server端口，10050为agent端口 源码编译安装服务器已安装好一键LNMP,数据库用的是mariadb。 服务端基本环境安装，不安装组件在编译时会报各种错误。 12345678#zabbix yum源#Centos 7rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpm#Centos 6rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.2/rhel/6/x86_64/zabbix-release-3.2-1.el6.noarch.rpmyum install -y tar svn gcc automake make nmap traceroute iptstate wget net-snmp-devel net-snmp-libs net-snmp net-snmp-perl iksemel net-snmp-python net-snmp-utils java-1.8.0-openjdk python-pip java-1.8.0-openjdk-devel mariadb-devel libxml2-devel gettext libcurl-devel OpenIPMI-devel mysql iksemel-devel libssh2-devel unixODBC unixODBC-devel mysql-connector-odbc postgresql-odbc openldap openldap-devel telnet net-tools snmptt rubygems 1234567891011121314151617181920212223242526272829#新建用户groupadd zabbix -g 201 useradd -g zabbix -u 201 -m zabbix #下载安装包wget https://jaist.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.8/zabbix-3.0.8.tar.gztar zxvf zabbix-3.0.8.tar.gzcd zabbix-3.0.8#开启大多数常用功能，如果报错，出错原因，一步一步来，不要一次性粘贴代码。这里注意mysql_config的路径可能不是这个。./configure --prefix=/usr --sysconfdir=/etc/zabbix --with-mysql=/usr/local/mariadb/bin/mysql_config --with-net-snmp --with-libcurl --enable-server --enable-agent --enable-proxy --with-unixodbc --with-ldap --with-ssh2 --enable-Javamake install#安装出错找原因，安装成功启动就好了。#服务修改systemctl restart zabbix-serversystemctl restart zabbix-agentsystemctl enable zabbix-serversystemctl enable zabbix-agentvim /etc/sysconfig/selinuxSELINUX=disabledvim /etc/sysconfig/iptables#放行10050和10051端口或关闭防火墙systemctl disable firewalldreboot #重启SELinux才生效 客户端 AgentCentos123456789101112131415161718192021222324252627282930313233343536373839#下载安装包wget https://jaist.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.8/zabbix-3.0.8.tar.gztar zxvf zabbix-3.0.8.tar.gzcd zabbix-3.0.8#编译安装./configure --prefix=/usr --sysconfdir=/etc/zabbix --enable-agentmake install#设置mkdir /var/log/zabbix useradd zabbixchown zabbix.zabbix /var/log/zabbix cp misc/init.d/fedora/core/zabbix_agentd /etc/init.d/ chmod 755 /etc/init.d/zabbix_agentd sed -i "s#BASEDIR=/usr/local#BASEDIR=/usr/#g" /etc/init.d/zabbix_agentd#添加到系统服务vim /etc/services zabbix-agent 10050/tcp #ZabbixAgent zabbix-agent 10050/udp #ZabbixAgent zabbix-trapper 10051/tcp #ZabbixTrapper zabbix-trapper 10051/udp #ZabbixTrapper#修改配置vim /etc/zabbix/zabbix_agentd.conf#日志最大值，默认1M，超出会rotateLogFileSize=1#被动模式下服务器地址，可以是ip或者hostnameServer=192.168.0.1#主动模式下服务器地址，可以ip或者hostnameServerActive=192.168.0.1#被监控机的ip或hostname，注意的是该值必须和你在server的监控界面中定义的server name要保持一致Hostname=192.168.0.2#重启一下agent服务 批量安装：https://my.oschina.net/u/2316994/blog/376916agent配置文件详解： http://blog.chinaunix.net/uid-29155617-id-4668602.html Windows下载：http://www.zabbix.com/downloads/3.2.0/zabbix_agents_3.2.0.win.zip123456#设置成windows服务c:\zabbix_agents_3.2.0.win\bin\win64\zabbix_agentd.exe -c c:\zabbix_agents_3.0.4.win\conf\zabbix_agentd.win.conf -i#启动c:\zabbix_agents_3.2.0.win\bin\win64\zabbix_agentd.exe -s #停止c:\zabbix_agents_3.0.4.win\bin\win64\zabbix_agentd.exe -x 防火墙增加可通行程序或放行10050端口,服务自动启动查看端口：netstat -an | find &quot;10050&quot; 一键安装zabbix_agent：http://www.tuicool.com/articles/rUFjqm7 Zabbix-get1234567891011zabbix_get -h Zabbix get v2.2.1 (revision 40808) (09 December 2013)usage: zabbix_get [-hV] -s &lt;host name or IP&gt; [-p &lt;port&gt;] [-I &lt;IP address&gt;] -k &lt;key&gt;Options: -s --host &lt;host name or IP&gt; Specify host name or IP address of a host -p --port &lt;port number&gt; Specify port number of agent running on the host. Default is 10050 -I --source-address &lt;IP address&gt; Specify source IP address-k --key &lt;key of metric&gt; Specify key of item to retrieve value for-h --help Give this help -V --version Display version numberExample: zabbix_get -s 127.0.0.1 -p 10050 -k "system.cpu.load[all,avg1]" 测试服务器间的连接，123zabbix_get -s 127.0.0.1 -p 10050 -k "system.cpu.load[all,avg15]"zabbix_get -s 127.0.0.1 -p 10050 -I 127.0.0.1 -k "system.hostname"zabbix_get -s 192.168.30.131 -p 10050 -k "system.uptime" Web管理界面的安装复制/root/zabbix-3.0.8/frontends下的PHP文件夹到web服务器根目录，改名为zabbix。访问地址：http://IP/zabbix/setup.php 进行安装。 Web界面配置找到Configuration—-&gt;Hosts 添加一台监控主机 开启后，如果出现错误我们可以看一下zabbix的日志:ls /var/log/zabbix/zabbix_看这两个文件：zabbix_agentd.log zabbix_server.log 当ZBX变成绿色的时候，说明监控成功。因为我们没有配置SNMP、JMX、IPMI等。所以我发监控 因为我们现在只安装了一台服务器，所以只有一个主机。我们可以查看现在这台主机的CPU等及基本的信息 点击Monitoring—–Graphs，选择我们要监控的内容 我们选择可以随便选择一个进行查看信息例如：我们查看CPU的负载 某一段时间内，CPU正在处理以及等待CPU处理的进程数的之和。Load Average是从另一个角度来体现CPU的使用状态的。 这些监控其实就是zabbix在数据库查找数据，然后使用jd进行画图，所以Zabbix性能依赖于mysql数据库 Zabbix页面安全设置1、设置默认账号密码 设置完中文 Zabbix 菜单说明Zabbix 上方的菜单简单介绍说明 Doshboard下面可以设置你想设置的图形，添加方法如下： 这时，就可以找到你喜爱的了，直接打开 screens其实就是一个聚合图形，可以把多个图片合在一起。然后放在大屏幕上，供别人查看 maps就是一个架构图 Status of Zabbix就是一个状态栏 第一行：Server是否运行[yes]和后面的运行地址 第二行：监控的机器 （启用的/关闭的/模板） 第三行：监控项 （启用的/关闭的/不支持的） 第四行：触发器的状态 （启用的/关闭的/【故障/正常】） 第五行：当前用户数量 （在线数量） 第六行：zabbix每秒可以收到的一个新值 告警的级别 我们可以设置报警响铃，让他在前端响 我们首页的监控列表是可以随意拖动的 我们还可以将它关闭，并且设置刷新时间Zabbix 基础完! 参考：http://www.abcdocker.com/abcdocker/1402 Zabbix字符集乱码Centos补全安装软件包：yum install -y bash-completion 在c:\windows\fonts下找到“楷体常规”的字符包，上传到/web目录/zabbix/fonts目录下。1234567891011121314find / -type f -name "defines.inc.php"#defines.inc.php文件一般在/web目录/zabbix/include/defines.inc.php编辑配置文件/web目录/zabbix/include/defines.inc.php：#第一处define('ZBX_FONT_NAME', 'DejaVuSans')；#改为define('ZBX_FONT_NAME', 'simkai'); #去掉后缀#第二处define('ZBX_GRAPH_FONT_NAME', 'DejaVuSans'); #改为define('ZBX_GRAPH_FONT_NAME', 'SIMKAI');#去掉后缀其中simkai为字符包的名字，不包含tty后缀 保存退出刷新zabbix web界面就生效了。 Zabbix 进阶-未完- 参考：http://itnihao.blog.51cto.com]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Zabbix监控</tag>
        <tag>Zabbix Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用github写开源书籍]]></title>
    <url>%2Fposts%2F40647%2F</url>
    <content type="text"><![CDATA[创建新的仓库创建新文件，名为SUMMARY.md，里面填入： 12# Summary* [前言](README.md) 创建一本书首先进入gitbook的官网：https://www.gitbook.com/点红色部分，用github登录，登录之后，点+NewBook(或在右上角+NEW，页面稍有改版)这个页面目前是在同步，等同步完毕后，就可以看到自己的书了（不是什么原因这里会一直是这个界面不会跳转，但其实收到了通知邮件已经创建好了，打开主页刷新就可以看到）。点击edit，可以发现里面就1页，就是我们刚才SUMMARY.md写的内容 增加内容我们退回上一步，点edit可以看到如下界面我们点开可以同步显示编辑后的效果，预览效果。 现在我们就可以完成我们的书的录入了，在目录区点击右键，可以新建一个内容页然后点击一下，会提示创建一个文件然后你会发现在github上也多了一个文件，这就关联起来了。我们再看SUMMARY里面多了一个“第一页”我们双击一下，发现就是markdown的超链接，原来这就是gitbook的内容组织方式，通过超连接把内容和github上文件关联起来。我们修改一下名字，然后把他缩进一个tab，保存看看有什么变化可以发现目录结构变了，然后名字也变了通过修改SUMMARY.md你可以轻松的组织你的书 书的框架一般来说，你的书得有一个README.md和一个SUMMARY.md。其中SUMMARY.md是最重要的，它代表了整个书的框架，也是我们主要需要修改的地方。当你考虑好要写一本书，你可以先粗略的想好大概要分几部分，对这几部分弄一个文件夹。然后把对应的markdown文件放进去。然后push到github上，然后再在gitbook上修改SUMAARY使得新加的文件得以跟gitbook关联关于地址的获取有个小诀窍，就是点击文件，邮件，有个重命名，这里可以看到文件的完整地址，复制就好。最后，可以在自己的书的主页点击read看看效果 绑定域名原理和博客绑定域名是一样的 1· 在你的项目下新建一个CNAME文件，注意没有后缀名。在里面添加你的域名，如我的就是 leolan.top，然后推送CNAME文件到远程仓库。（方法二是直接在pages页上找到域名绑定设置，最好同时绑定如：leolan.top和www.leolan.top,少绑一个，没绑的那个打不开） 2· 到域名服务商那里增加你的CNAME记录。添加两条记录，@和www的主机记录，记录类型为CNAME，记录值为 username.github.io.，重要的是 io 后面还有一个原点（看官方帮助文档Coding的就不用加点），切记。过几分钟，刷新网页，就能直接用域名访问了，因为是在项目内建的CNAME文件，所以域名直接指向此项目文件夹，其他项目可以用其他域名设定。 参考：GitBook入门（用github做出第一本书）http://blog.csdn.net/hk2291976/article/details/51173850]]></content>
      <categories>
        <category>Dve</category>
      </categories>
      <tags>
        <tag>用github写开源书籍</tag>
        <tag>gitbook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[检查Linux服务器性能]]></title>
    <url>%2Fposts%2F64139%2F</url>
    <content type="text"><![CDATA[关于服务器负载load average值，参考：理解Linux系统中的load average（图文版） uptime123:51:26 up 21:31, 1 user, load average: 30.02, 26.43, 19.02 这个命令可以快速查看机器的负载情况。在Linux系统中，这些数据表示等待CPU资源的进程和阻塞在不可中断IO进程（进程状态为D）的数量。这些数据可以让我们对系统资源使用有一个宏观的了解。 命令的输出分别表示1分钟、5分钟、15分钟的平均负载情况。通过这三个数据，可以了解服务器负载是在趋于紧张还是区域缓解。如果1分钟平均负载很高，而15分钟平均负载很低，说明服务器正在命令高负载情况，需要进一步排查CPU资源都消耗在了哪里。反之，如果15分钟平均负载很高，1分钟平均负载较低，则有可能是CPU资源紧张时刻已经过去。 上面例子中的输出，可以看见最近1分钟的平均负载非常高，且远高于最近15分钟负载，因此我们需要继续排查当前系统中有什么进程消耗了大量的资源。可以通过下文将会介绍的vmstat、mpstat等命令进一步排查。 dmesg | tail12345[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0[...][1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request. Check SNMP counters. 该命令会输出系统日志的最后10行。示例中的输出，可以看见一次内核的oom kill和一次TCP丢包。这些日志可以帮助排查性能问题。千万不要忘了这一步。 vmstat 11234567procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st34 0 0 200889792 73708 591828 0 0 0 5 6 10 96 1 3 0 032 0 0 200889920 73708 591860 0 0 0 592 13284 4282 98 1 1 0 032 0 0 200890112 73708 591860 0 0 0 0 9501 2154 99 1 0 0 032 0 0 200889568 73712 591856 0 0 0 48 11900 2459 99 0 0 0 032 0 0 200890208 73712 591860 0 0 0 0 15898 4840 98 1 1 0 0 vmstat 命令，每行会输出一些系统核心指标，这些指标可以让我们更详细的了解系统状态。后面跟的参数1，表示每秒输出一次统计信息，表头提示了每一列的含义，这几介绍一些和性能调优相关的列： ● r：等待在CPU资源的进程数。这个数据比平均负载更加能够体现CPU负载情况，数据中不包含等待IO的进程。如果这个数值大于机器CPU核数，那么机器的CPU资源已经饱和。 ● free：系统可用内存数（以千字节为单位），如果剩余内存不足，也会导致系统性能问题。下文介绍到的free命令，可以更详细的了解系统内存的使用情况。 ● si, so：交换区写入和读取的数量。如果这个数据不为0，说明系统已经在使用交换区（swap），机器物理内存已经不足。 ● us, sy, id, wa, st：这些都代表了CPU时间的消耗，它们分别表示用户时间（user）、系统（内核）时间（sys）、空闲时间（idle）、IO等待时间（wait）和被偷走的时间（stolen），一般被其他虚拟机消耗）。上述这些CPU时间，可以让我们很快了解CPU是否出于繁忙状态。一般情况下，如果用户时间和系统时间相加非常大，CPU出于忙于执行指令。如果IO等待时间很长，那么系统的瓶颈可能在磁盘IO。示例命令的输出可以看见，大量CPU时间消耗在用户态，也就是用户应用程序消耗了CPU时间。这不一定是性能问题，需要结合r队列，一起分析。 mpstat -P ALL 11234567Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)07:38:49 PM CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle07:38:50 PM all 98.47 0.00 0.75 0.00 0.00 0.00 0.00 0.00 0.00 0.7807:38:50 PM 0 96.04 0.00 2.97 0.00 0.00 0.00 0.00 0.00 0.00 0.9907:38:50 PM 1 97.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 2.0007:38:50 PM 2 98.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 1.0007:38:50 PM 3 96.97 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 3.03 该命令可以显示每个CPU的占用情况，如果有一个CPU占用率特别高，那么有可能是一个单线程应用程序引起的。 netstat1234567891011121314151617181920212223[root@VM_163_167_centos ~]# netstatActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 10.104.163.xxx:noteit 10.xxx.30.181:http TIME_WAIT tcp 0 1 10.104.163.xxx:9409 202.xxx.210.:zabbix-trapper SYN_SENT tcp 0 64 10.104.163.xx:EtherNet/IP-1 119.xxx.171.169:53248 ESTABLISHED Active UNIX domain sockets (w/o servers)Proto RefCnt Flags Type State I-Node Pathunix 6 [ ] DGRAM 8198 /dev/logunix 2 [ ] DGRAM 7360 @/org/kernel/udev/udevdunix 2 [ ] DGRAM 20331950 unix 2 [ ] DGRAM 9274951 unix 2 [ ] STREAM CONNECTED 10014 unix 2 [ ] DGRAM 9494 unix 2 [ ] DGRAM 9459 unix 3 [ ] STREAM CONNECTED 9437 unix 3 [ ] STREAM CONNECTED 9436 unix 3 [ ] STREAM CONNECTED 8612 unix 3 [ ] STREAM CONNECTED 8611 unix 3 [ ] STREAM CONNECTED 8609 unix 3 [ ] STREAM CONNECTED 8608 unix 3 [ ] STREAM CONNECTED 8606 unix 3 [ ] STREAM CONNECTED 8605 pidstat 11234567891011121314Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)07:41:02 PM UID PID %usr %system %guest %CPU CPU Command07:41:03 PM 0 9 0.00 0.94 0.00 0.94 1 rcuos/007:41:03 PM 0 4214 5.66 5.66 0.00 11.32 15 mesos-slave07:41:03 PM 0 4354 0.94 0.94 0.00 1.89 8 java07:41:03 PM 0 6521 1596.23 1.89 0.00 1598.11 27 java07:41:03 PM 0 6564 1571.70 7.55 0.00 1579.25 28 java07:41:03 PM 60004 60154 0.94 4.72 0.00 5.66 9 pidstat07:41:03 PM UID PID %usr %system %guest %CPU CPU Command07:41:04 PM 0 4214 6.00 2.00 0.00 8.00 15 mesos-slave07:41:04 PM 0 6521 1590.00 1.00 0.00 1591.00 27 java07:41:04 PM 0 6564 1573.00 10.00 0.00 1583.00 28 java07:41:04 PM 108 6718 1.00 0.00 0.00 1.00 0 snmp-pass07:41:04 PM 60004 60154 1.00 4.00 0.00 5.00 9 pidstat pidstat命令输出进程的CPU占用率，该命令会持续输出，并且不会覆盖之前的数据，可以方便观察系统动态。如上的输出，可以看见两个JAVA进程占用了将近1600%的CPU时间，既消耗了大约16个CPU核心的运算资源。 iostat -xz 112345678910Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)avg-cpu: %user %nice %system %iowait %steal %idle 73.96 0.00 3.73 0.03 0.06 22.21Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %utilxvda 0.00 0.23 0.21 0.18 4.52 2.08 34.37 0.00 9.98 13.80 5.42 2.44 0.09xvdb 0.01 0.00 1.02 8.94 127.97 598.53 145.79 0.00 0.43 1.78 0.28 0.25 0.25xvdc 0.01 0.00 1.02 8.86 127.79 595.94 146.50 0.00 0.45 1.82 0.30 0.27 0.26dm-0 0.00 0.00 0.69 2.32 10.47 31.69 28.01 0.01 3.23 0.71 3.98 0.13 0.04dm-1 0.00 0.00 0.00 0.94 0.01 3.78 8.00 0.33 345.84 0.04 346.81 0.01 0.00dm-2 0.00 0.00 0.09 0.07 1.35 0.36 22.50 0.00 2.55 0.23 5.62 1.78 0.03 iostat命令主要用于查看机器磁盘IO情况。该命令输出的列，主要含义是： ● r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。 ● await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。 ● avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。 ● %util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。 free –m1234 total used free shared buffers cachedMem: 245998 24545 221453 83 59 541-/+ buffers/cache: 23944 222053Swap: 0 0 0 free命令可以查看系统内存的使用情况，-m参数表示按照兆字节展示。最后两列分别表示用于IO缓存的内存数，和用于文件系统页缓存的内存数。需要注意的是，第二行-/+ buffers/cache，看上去缓存占用了大量内存空间。这是Linux系统的内存使用策略，尽可能的利用内存，如果应用程序需要内存，这部分内存会立即被回收并分配给应用程序。因此，这部分内存一般也被当成是可用内存。如果可用内存非常少，系统可能会动用交换区（如果配置了的话），这样会增加IO开销（可以在iostat命令中提现），降低系统性能。 sar -n DEV 1123456789Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)12:16:48 AM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s %ifutil12:16:49 AM eth0 18763.00 5032.00 20686.42 478.30 0.00 0.00 0.00 0.0012:16:49 AM lo 14.00 14.00 1.36 1.36 0.00 0.00 0.00 0.0012:16:49 AM docker0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0012:16:49 AM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s %ifutil12:16:50 AM eth0 19763.00 5101.00 21999.10 482.56 0.00 0.00 0.00 0.0012:16:50 AM lo 20.00 20.00 3.25 3.25 0.00 0.00 0.00 0.0012:16:50 AM docker0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和。如示例输出中，eth0网卡设备，吞吐率大概在22 Mbytes/s，既176 Mbits/sec，没有达到1Gbit/sec的硬件上限。 sar -n TCP,ETCP 1123456789Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)12:17:19 AM active/s passive/s iseg/s oseg/s12:17:20 AM 1.00 0.00 10233.00 18846.0012:17:19 AM atmptf/s estres/s retrans/s isegerr/s orsts/s12:17:20 AM 0.00 0.00 0.00 0.00 0.0012:17:20 AM active/s passive/s iseg/s oseg/s12:17:21 AM 1.00 0.00 8359.00 6039.0012:17:20 AM atmptf/s estres/s retrans/s isegerr/s orsts/s12:17:21 AM 0.00 0.00 0.00 0.00 0.00 sar命令在这里用于查看TCP连接状态，其中包括： ● active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接； ● passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接； ● retrans/s：每秒TCP重传数量；TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包。 top 常用交互命令 解释 q 退出程序 I 切换显示平均负载和启动时间的信息 P 根据CPU使用百分比大小进行排序 M 根据驻留内存大小进行排序 i 忽略闲置和僵死的进程，这是一个开关式命令 k 终止一个进程，系统提示输入 PID 及发送的信号值。一般终止进程用15信号，不能正常结束则使用9信号。安全模式下该命令被屏蔽。 NICE 值叫做静态优先级，是用户空间的一个优先级值，其取值范围是-20至19。这个值越小，表示进程”优先级”越高，而值越大“优先级”越低。nice值中的 -20 到 19，中 -20 优先级最高， 0 是默认的值，而 19 优先级最低 PR 值表示 Priority 值叫动态优先级，是进程在内核中实际的优先级值，进程优先级的取值范围是通过一个宏定义的，这个宏的名称是MAX_PRIO，它的值为140。Linux实际上实现了140个优先级范围，取值范围是从0-139，这个值越小，优先级越高。而这其中的 0 - 99 是实时的值，而 100 - 139 是给用户的。 其中 PR 中的 100 to 139 值部分有这么一个对应 PR = 20 + (-20 to +19)，这里的 -20 to +19 便是nice值，所以说两个虽然都是优先级，而且有千丝万缕的关系，但是他们的值，他们的作用范围并不相同 VIRT 任务所使用的虚拟内存的总数，其中包含所有的代码，数据，共享库和被换出 swap空间的页面等所占据空间的总数 top命令包含了前面好几个命令的检查的内容。比如： 系统负载情况（uptime） 系统内存使用情况（free） 系统CPU使用情况（vmstat）等。 因此通过这个命令，可以相对全面的查看系统负载的来源。同时，top命令支持排序，可以按照不同的列排序，方便查找出诸如内存占用最多的进程、CPU占用率最高的进程等。但是，top命令相对于前面一些命令，输出是一个瞬间值，如果不持续盯着，可能会错过一些线索。这时可能需要暂停top命令刷新，来记录和比对数据。]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>检查Linux服务器性能</tag>
        <tag>top</tag>
        <tag>free</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常见面试题]]></title>
    <url>%2Fposts%2F21385%2F</url>
    <content type="text"><![CDATA[关于IT行业面试题和面试经验，推荐网站： 1.leetcode 2.牛客网 填空 1、在Linux系统中，以 文件 方式访问设备。 2、Linux内核引导时，从文件 /etc/fstab 中读取要加载的文件系统 3、Linux文件系统中每个文件用 i节点 来标识 4、全部磁盘块由四个部分组成，分别为: 引导块、专用块、i节点块、数据存储块 5、前台起动的进程使用: ctrl+c 禁止 6、安装Linux系统对硬盘分区时，必须有两种分区类型：文件系统 和 交换分区。 7、网络管理的重要任务是 监控 和 控制 8、内核分为 文件管理系统、I/O管理系统 、内存管理系统 和进程管理系统 等四个子系统。 系统1、Linux开机启动过程？ 1）主机加电自检，加载BOLS硬件信息 2）读取MBR的引导文件（grub，lilo） 3）引导linux内核 4）运行第一个进程init（进程号永远为1） 5）进入相应的运行级别 6）运行终端，输入用户名和密码 2、Linux系统缺省的运行级别12345670.关机1.单机用户模式 2.字符界面的多用户模式（不支持网络）3.字符界面的多用户模式4.未分配使用 5.图形界面的多用户模式 6.重启 3、Linux系统是由那些部分组成？Linux系统内核，shell，文件系统和应用程序四部分组成 4、硬链接和软链接有什么区别？ 1）硬链接不可以跨分区，软件链可以跨分区 2）硬链接指向一个i节点，而软链接则是创建一个新的i节点 3）删除硬链接文件，不会删除原文件，删除软链接文件，会把原文件删除 5、如何规划一台Linux主机，步骤是怎样？ 1、确定机器是做什么用的，比如是做web、db、还是游戏服务器 2、确定好之后，就要定系统需要怎么安装，默认安装哪些系统、分区怎么做 3、需要优化系统的哪些参数，需要创建哪些用户等等的 6、查看系统当前进程连接数？1netstat -an | grep ESTABLISHED | wc -l 7、如何在/usr目录下找出大小超过10MB的文件?1find /usr -type f -size +10240k 8、添加一条到192.168.3.0/24的路由，网关为192.168.1.254？1route add -net 192.168.3.0/24 netmask 255.255.255.0 gw 192.168.1.254 9、如何在/var目录下找出90天之内未被访问过的文件?1find /var \! -atime -90 10、如何在/home目录下找出120天之前被修改过的文件?1find /home -mtime +120 11、在整个目录树下查找文件“core”，如发现则无需提示直接删除它们。1find / -name core -exec rm &#123;&#125; \; 12、有一普通用户想在每周日凌晨零点零分定期备份/user/backup到/tmp目录下，该用户应如何做?12crontab -e0 0 * * 7 /bin/cp /user/backup /tmp 13、每周一下午三点将/tmp/logs目录下面的后缀为*.log的所有文件rsync同步到备份服务器192.168.1.100中同样的目录下面，crontab配置项该如何写：100 15 * * 1 rsync -avzP /tmp/logs/*.log root@192.168.1.100:/tmp/logs 14、找到/tmp/目录下面的所有名称以”_s1.jpg”结尾的普通文件，如果其修改日期在一天内，则将其打包到/tmp/back.tar.gz文件中1find /tmp -type f -name ".*_sj.jpg" -mtime 1|xarges tar zxf /tmp/back.tar.gz 15、配置mysql服务器的时候，配置了auto_increment_increment=3，请问这里的3意味着什么？auto_increment是用于主键自动增长的，从3开始增长，3表示自增的起始值 16、详细说明keepalived的故障切换工作原理这种故障切换是通过VRRP协议来实现的，主节点会按一定的时间间隔发送心跳信息的广播包，告诉备节点自己的存活状态信息，当主节点发生故障时，备节点在一段时间内就收到广播包，从而判断主节点出现故障，因此会调用自身的接管程序来接管主节点的IP资源及服务，当主节点恢复时，备节点会主动释放资源，恢复到接管前的状态，从而来实现主备故障切换 安全1、防火墙有几张表几条链？4张表，5条链 2、一台Linux系统初始化环境后需要做一些什么安全工作？ 1、添加普通用户登陆，禁止root用户登陆，更改SSH端口号 2、服务器使用密钥登陆，禁止密码登陆 3、开启防火墙，关闭SElinux，根据业务需求设置相应的防火墙规则 4、装fail2ban这种防止SSH暴力破击的软件 5、设置只允许公司办公网出口IP能登陆服务器（看公司实际需要） 6、设置nginx_waf模块防止SQL注入 7、把Web服务使用www用户启动，更改网站目录的所有者和所属组为www 8、修改历史命令记录的条数为10条 3、什么叫CC攻击？什么叫DDOS攻击？怎么预防CC攻击和DDOS攻击？ 简介： CC攻击主要是用来攻击页面的，模拟多个用户不停的对你的页面进行访问，从而使你的系统资源消耗殆尽 DDOS攻击中文名叫分布式拒绝服务攻击，指借助服务器技术将多个计算机联合起来作为攻击平台，来对一个或多个目标发动DDOS攻击，攻击即是通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的预防： 防CC/DDOS攻击这些只能是用硬件防火墙做流量清洗，将攻击流量引入黑洞流量清洗这一块，主要是买ISP服务商的防攻击的服务就可以，机房一般有空余流量，我们一般是买服务，毕竟攻击不会是持续长时间 4、什么是网站数据库注入？怎么过滤与预防网站数据库注入？简介： 由于程序员的水平及经验参差不齐，大部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断， 应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的SQL注入。 SQL注入是从正常的WWW端口访问，而且表面看起来跟一般的Web页面访问没什么区别，如果管理员没查看日志的习惯，可能被入侵很长时间都不会发觉。过滤与预防：数据库网页端注入这种，可以考虑使用nginx_waf做过滤与预防 网络写出如何给apache增加virtualhost，让访问http://www.test.com和http://www.test.cn的时候，都打开/var/www/html目录下面的文件：12345678&lt;VirtualHost *:80&gt; ServerAdmin admini@abc.com DocumentRoot "/var/www/html" ServerName www.test.com ServerAlias test.cn ErrorLog "logs/bbs-error_log" CustomLog "logs/bbs-access_log" common&lt;/VirtualHost&gt; 用一条命令显示本机eth0网卡的IP地址，不显示其它字符123456789101112#方法一：ifconfig eth0|grep inet|awk -F ':' '&#123;print $2&#125;'|awk '&#123;print $1&#125;'#方法二ifconfig eth0|grep "inet addr"|awk -F '[ :]+' '&#123;print $4&#125;' #方法三：ifconfig eth0|awk -F '[ :]+' 'NR==2 &#123;print $4&#125;' #方法四：ifconfig eth0|sed -n '2p'|sed 's#^.*addr:##g'|sed 's# Bc.*$##g'#方法五：ifconfig eth0|sed -n '2p'|sed -r 's#^.*addr:(.*) Bc.*$#\1#g'#方法六(centos7也适用)：ip addr|grep eth0|grep inet|awk '&#123;print $2&#125;'|awk -F '/' '&#123;print $1&#125;' 写出一个curl命令，访问指定服务器61.135.169.121上的如下URL：http://www.baidu.com/s?wd=test，访问的超时时间是20秒：1curl --connect-timeout 20 http://61.135.169.121/s?wd=test` 用netstat命令配合其他shell命令，按照源IP统计所有到80端口的ESTABLISHED状态链接的个数，输出结果类似（第一列为连接数，第二列为IP）：12345[root@ ~]# netstat -an|grep ESTABLISHEDtcp 0 52 139.224.199.85:22 101.47.33.86:51763 ESTABLISHED tcp 0 0 139.224.199.85:45368 106.11.68.13:80 ESTABLISHED [root@ ~]# netstat -an|grep ESTABLISHED|grep ":80"tcp 0 0 139.224.199.85:45368 106.11.68.13:80 ESTABLISHED 1netstat -an|grep ESTABLISHED|grep ":80"|awk 'BEGIN&#123;FS="[[:space:]:]+"&#125;&#123;print $4&#125;' 说明：FS 是字段分隔符,简单的可以用多个awk过滤。 如果需要进行整理并排序的话，完整命令如下1netstat -an|grep ESTABLISHED|grep ":80"|awk 'BEGIN&#123;FS="[[:space:]:]+"&#125;&#123;print $4&#125;'|sort|uniq -c|sort -nr shell编程用Shell编程，判断一文件是不是字符设备文件，如果是将其拷贝到 /dev 目录下。12345#!/bin/bashread -p "Input file name: " FILENAMEif [ -c "$FILENAME" ];then cp $FILENAME /devfi 设计一个shell程序，添加一个新组为class1，然后添加属于这个组的30个用户，用户名的形式为stdxx，其中xx从01到30。12345678910#!/bin/bashgroupadd class1for((i=1;i&lt;31;i++))do if [ $i -le 10 ];then useradd -g class1 std0$i else useradd -g class1 std$i fidone 编写shell程序，实现自动删除50个账号的功能。账号名为stud1至stud50。12345#!/bin/bashfor((i=1;i&lt;51;i++))do userdel -r stud$idone 写一个sed命令，修改/tmp/input.txt文件的内容。要求：(1) 删除所有空行；(2) 一行中，如果包含”11111”，则在”11111”前面插入”AAA”，在”11111”后面插入”BBB”，比如：将内容为0000111112222的一行改为：0000AAA11111BBB2222123456789101112131415161718192021222324252627282930[root@~]# cat -n /tmp/input.txt 1 000011111222 2 3 000011111222222 4 11111000000222 5 6 7 111111111111122222222222 8 2211111111 9 112222222 10 1122 11#删除所有空行命令[root@~]# sed &apos;/^$/d&apos; /tmp/input.txt0000111112220000111112222221111100000022211111111111112222222222222111111111122222221122插入指定的字符[root@~]# sed &apos;s#\(11111\)#AAA\1BBB#g&apos; /tmp/input.txt0000AAA11111BBB2220000AAA11111BBB222222AAA11111BBB000000222AAA11111BBBAAA11111BBB1112222222222222AAA11111BBB1111122222221122]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Linux常见面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 发行版汇总]]></title>
    <url>%2Fposts%2F51445%2F</url>
    <content type="text"><![CDATA[前言本文是在开源中国看到的，觉得还不错，说的很详细，特地摘录下来。 Linux入门UbuntuUbuntu是一款基于Debian发行版，以Unity作为默认桌面环境的Linux操作系统。他是世界上最流行的发行版之一，每次发行，它都有提升。最新发行版为桌面、移动及其桌面移动混合版的优化。 现在依然有Ubuntu移动平台，它专用于一些合作的智能手机及少数致力于Ubuntu触屏手持设备。较新的设备集成了汇集软件（Convergence software），使你可以通过无线HDMI连接器将你的智能手机转到PC上。 KubuntuKubuntu是Ubuntu的衍生版，使用KDE而不是Unity作为默认桌面环境. 在此情况下，Kubuntu与Ubuntu大同小异，其发行时间也与Ubuntu保持一致。 MintMint是优雅、现代Linux发行版，它易于使用且功能强大。它基于Ubuntu开发，可靠而安全，是最好用的管理软件之一。最近，它又成为了最为流行的Linux发行版之一，声称为Windows及Mac OS后最为流行的家用操作系统。 Mint有着丰富的桌面选项，默认为Cinnamon桌面, 你还可以使用MATE, KDE或Xfce.。Mint的Debian版也可用，定位为有经验的Linux用户。 DeepinDeepin 是一个基于 Ubuntu 的发行版，它带有时尚美观的深度桌面环境(Deepin Desktop Environment，DDE), 旨在吸引新的 Linux 用户。它的界面简单直观，系统设置面板的是所有发行版中最好看的一个。 DMusic, DPlayer 和 DTalk 是其专有的应用程序。 有许多的基于 Ubuntu 的衍生版本都在视图用它们自己的方式来解决一些问题，而其中特别受关注的一个就是 Deepin。 Deepin 还具备易于使用的软件中心，远胜于其它具备类似功能的发行版。 PCLinuxOSPCLinuxOS 是专为普通 PC 用户设计的，它默认使用的是 KDE Plasma 桌面。这个发行版在安装驱动，获取办公软件，编辑照片，上网以及使用多媒体等操作上使用非常方便，还能快速创建快照备份。 Linux Lite基于 Ubuntu LTS 发行版, Linux Lite 是一个最小化的省空间型发行版, 它拥有一个干净简单的 Xfce 桌面，而且是 Windows 风格的。 Linux Lite 的目标是将 Windows 用户引向 Linux。它对资源的节省意味这你可以在一台 CPU 只有 700Mhz 而且内存只有 512M 的 PC 上安装它。这就是我们所说的轻便（light）! Zorin OSZorin OS 是专门为 Linux 新手设计的，便于人们从Windows 向 Linux 过渡。它拥有 Windows 用户比较熟悉的基于 Ubuntu 发行版的功能以及应用，也能让用户方便的使用他们仍然需要的 Windows 应用。Zorin OS 9 看起来很像 Windows 7，这样做只是单纯为了赢得一些从 Windows 到 Linux 的转化。 震撼的视觉Elementary OS另外一个基于 Ubuntu 的发行版 Elementary OS ，自从其 Elementary OS Luna 版本发行依赖，已经拥有了属于它自己的不通表现。它拥有漂亮简介的默认应用，它们遵循这操作系统的美感诉求，例如电子邮件程序 Geary，网页浏览器 Midori, 日历程序 Maya, 电影播放器 Totem , 以及音乐播放器 Noise。 Apricity OS为了“最性感的 Linux 发行版”这个非正式的头衔而向 Elementary OS 发起挑战，就是 Apricity, 它采取了一种类似的方法。没有采用 Windows 式样的 Cinnamon 和 MATE 风格, Apricity 提供了一个令人惊叹的桌面换进，比起微软的那一套，它更能让人联想其 Android或者 iOS。 普通版OpenSUSEOpenSUSE 发行版是 Linux 的一个普通发行版，由 OpenSUSE 项目构建，目标是在成为一个不错面向新手的发行版的同时，也能满足有经验的 Linux 用户的需求。OpenSUSE 附带有 YAST, 它是一个管理员程序，能对安装，包管理以及其它一些东西进行控制。 FedoraFedora 默认使用 GNOME 桌面环境，但是用户可以轻松的将其切换到 KDE， XFce， MATE 以及 Cinnamon。Fedora 的自定义变体, 被称作 Fedora 扩展，它们能满足用户的一些特殊需求。 DebianDebian 是一个比较老的 Linux 发行版，是跟着 GNOME 桌面环境一起出现的。不过，这个桌面环境也能用于 FreeBSD，并且对于其它内核的支持工作也在进行中， 比如Hurd。 Debian 以其预装的超过 37500 的程序包为荣，并且带有简单的功能使得其能轻松的获取到更多的包。 KororaKorora 最初基于 Gentoo Linux，并且投身于让 Linux 对新手来说使用起来更轻松，但同时能让专家使用起来感到实用。它在桌面环境方面由多种选择，包括 Cinnamon, GNOME, KDE, MATE 以及 Xfce 桌面。 Slackware LinuxSlackware 是专注于安全和简单得发行版, 旨在成为最像 Unix 的 Linux 发行版。它在服务器管理方面特别有用，因为它拥有 FTP， email 以及 web 服务器，能立即投入使用。 MageiaMageia起初是一个由社区驱动的，非营利的法国Mandriva Linux分支，它包括了所有主要的桌面环境，它主要使用KDE和GNOME作为其默认桌面。 SparkyLinuxSparkyLinux发行版是从Debian的“测试”分支演变而来的。主版本配备了定制版的轻量级的LXDE桌面，同时还可以使用其它一些定制桌面。 Gentoo LinuxGentoo Linux几乎可以满足你任何的需求。它的通用性和优异的性能正是它区别于其他发行版的。Gentoo Linux还配备了先进的软件包管理系统，称为Portage。 CentOSCentOS（社区企业操作系统）是一个由社区重建的Red Hat企业版Linux。它是专为那些想免费使用一个企业标准发行版的人而设计的。 PinGuy OSPinGuyOS很漂亮，从一开始我就想使用它。这个基于Ubuntu的发行版预装了所有常用的以及用于网络设置的最好软件，这使得它非常适合初学者。它具有一个修改过的GNOME用户界面。 多媒体创作Fedora设计套件如果要节省时间，向Fedora中安装一些艺术工具和程序的话，你只需要安装来自Fedora艺术设计团队的spin版本。它重点关注的是绘画和桌面出版，你可以找到其中预安装的 Inkscape和GIMP等工具，还有其它很多的工具。 Ubuntu StudioUbuntu Studio于2007年首次发布，它可能是那些具有创意天分的Linux用户的默认选择。有了XFCE桌面环境和低内核延迟，一切都是面向媒体制作。 KXStudio这里列举的所有用于创作的发行版都提供了优秀的工具集，然而KXStudio却不同，它侧重于音频制作。当你沉浸在KDE桌面中时，你就拥有了一个性能相当出色的数字工作室。 ArtistXArtistX专门面向所有类型的艺术家，从音乐到图形设计。它基于Ubuntu，并且预装了所有最好的2D和3D图形设计、视频制作，和GNU / Linux音频制作软件。 Iro如果动画、3D建模、合成、数字绘画和图像编辑是您首选的多媒体技术，你就需要Iro。没有大量的工具库（例如，像Ubuntu Studio）满足每个人的需要，而是提供了一组专门的应用程序。它们被集成在精简的用户界面中，如果你有一个发行版，就可以安装并开始工作，一点也不麻烦。 教育DouDouDouDou Linux是为小孩子设计的，其目的是教他们如何探索计算机并使用计算机学习。它提供了一些适合2-12岁孩子玩的游戏和教育节目，它是一个安全的环境，家长不必整天看着。 EdubuntuEdubuntu被开发成了一个（感谢Ubuntu给予的合作）尽可能方便教师设置的版本，并且可以供所有年龄的儿童使用。它预装了所有最好的免费教育软件。 UberstudentUberstudent是专门为大专院校和高级中学的学生而设计的。它预装的软件可以使做作业和管理任务变得更加容易。 树莓派发行Raspbian Jessie流行的Raspberry Pi默认的操作系统是Raspbian Jessie，由树莓派基金会内部生产，它基于Debian。这款ARM发行版配备了大量编程工具，如Scratch，旨在帮助新手学习编程。 Kano OS和Raspbian类似的操作系统是Kano OS，它也是基于Debian，但更多地是侧重编程，不过这次针对的是儿童。它在一个更直观的用户界面中提供了儿童进行编程需要的所有工具，目的是让他们尽量少点麻烦。 轻量级/小型化LubuntuLubuntu 是一个基于 Ubuntu 的轻量级发行版，非常适合在笔记本电脑上使用。它使用的是小型化的 LXDE（轻量级 X11桌面环境 Lightweight X11 Desktop Environment)，附带拥有一些针对能效和速度方面进行过优化设计的轻量级应用程序。因为它对 RAM 和 系统资源需求不高，因此非常适合那些古老的计算机、网络以及移动设备。 XubuntuXubuntu 是 Ubuntu 的一个衍生版本，使用 Xfce (XForms Common Environment) 桌面环境，因此它是优雅和轻量级的。它非常适合于笔记本和上网本，当然还有台式机。它比较轻巧，对系统资源的耗费不多，因此在比较古老的计算机上使用是比较理想的。 Puppy LinuxPuppy Linux 是一个非常小巧的发行版，它可以整个放到 RAM 上面运行。因此 Puppy Linux 非常适合比较古老的计算机，即时计算机没有安装硬盘驱动器也是可以的! 它在删除恶意软件方面使用起来也比较轻松。 Manjaro LinuxManjaro Linux 基于 Arch Linux， 它是一个运行快速，容易使用，轻量级的发行版。它的目标是 Arch Linux 的好处都能提供，此外对用户更加友好和易于使用，使得新手能轻松上手。它默认使用的是 Xfce 桌面，不过也可以选择其它的桌面环境。 Arch LinuxArch Linux是一个为经验丰富的用户而设计的发行版。这个轻量级的最小化的发行版旨在使事情变得简单，更新时使用滚动发布模型。它具有一个定制的软件包管理器称为“Pacman”，这使得它易于编译、修改和共享软件包。 Tiny CoreTiny Core Linux是一个非常轻便的，模块化的发行版，特别要指出的是其小尺寸（目前有15MB）。它基于Linux内核，并且使用了BusyBox和FLTK（快速、轻便的工具包）。 Bodhi这个基于Ubuntu的Bodhi Linux发行版具有轻量级而且漂亮的Enlightenment桌面。Bodhi尤其具有可定制性，可以使用主题和应用程序扩展开始的轻量级桌面环境。 视频游戏Steam OSLinux上的游戏变得越来越受欢迎，虽然你可以在Ubuntu上轻松的安装Steam数字版下载服务，但你可能更喜欢一步到位安装Steam OS。这是一个以游戏为中心的发行版，针对游戏性能进行了优化，内置了专有的图形和声音驱动程序，以及Steam客户端。 Steam OS是Steam 机器使用的发行版，所以如果你正安装自己的系统，你肯定想使用这个版本。 Ubuntu Game Pack能让你玩差不多6000种游戏，Ubuntu游戏包配有内置Steam，以及PlayOnLinux和Windows游戏模拟器。这个游戏包基于Ubuntu 14.04，如果你只想安装新操作系统并且想马上开始游戏，那么这是一个绝佳的选择！ Play LinuxPlay Linux基于Ubuntu 15.10，是一个优化的发行版，由于自动GPU安装程序工具可以使你的Linux当作游戏机来使用。这基本上简化了安装合适的显卡驱动程序的问题，满足你只玩游戏的需求。 SparkyLinux – Game Over Edition各种版本的SparkyLinux都是可选用的，但拥有游戏为中心的这个版本可能是最有用的。配备LXDE桌面和大量的预装游戏，而且你还会发现Steam，PlayOnLinux和预装的windows游戏模拟器。这是一个免费且又高端的巨大的游戏库！ 安全和恢复Kali LinuxKali Linux以前被称为BackTrack，是一个渗透测试发行版，被广泛应用于在线安全社区。这种基于Debian的Linux发行版可以轻松地执行数字取证任务。 Parted MagicParted Magic本质上是一个磁盘管理工具，作为硬盘分区和复制的主要工具，它还能轻松完成数据恢复和安全清理。 GPartedGParted是一个用途单一的发行版，旨在使用图形界面对硬盘驱动器变的更加轻松。 众多发行版中的标准版本将被Linux用户熟知。这个版本是一个独立的专用操作系统，然而，它准备作为一张自启动光盘运行。你需要执行一些磁盘管理而不引导到您的计算机的操作系统么？那么就使用GParted吧。 TAILSTAILS是一个完全围绕隐私和安全概念的发行版。它是一个实时操作系统，您可以移植从DVD，USB棒或SD卡中，这样你就可以在任何的计算机上安全的使用，并使用完成后不会被行为追踪。为了最好的匿名性，所有的互联网连接都通过TOR（The Onion Router）路由，并且加密工具全程保护您的通信方法不会被窥视。 商业版本Red Hat Enterprise Linux红帽企业版Linux是Fedora的商业衍生产品，专为企业客户设计。 它提供诸多变体、插件以及认证可供管理员和应用程序使用。 SUSE Linux EnterpriseSUSE Linux Enterprise桌面版专为企业使用而设计，它是可供企业安装使用的，这使其易于使用各种办公程序。 它具有足够的灵活性，可以在各种设备上运行，但对于极为关键的进程来说是足够可靠的。 同时还提供SUSE Linux Enterprise Server版本。]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>最佳 Linux 发行版汇总</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git教程]]></title>
    <url>%2Fposts%2F41310%2F</url>
    <content type="text"><![CDATA[安装GitDebian/Ubuntuapt-get install git Centos/RedHatyum install git Windows安装包下载：https://git-for-windows.github.io/https://git-scm.com/ Mac安装包下载：https://sourceforge.net/projects/git-osx-installer/ git --version 查看版本 Git配置ls -a 或 ls -ah 方便查看隐藏文件执行git config命令就是调用此文件/etc/gitconfig 全部用户生效 --system调用的文件～/.gitcinfig 当前用户有效 --global调用的文件.git/config 当前项目的配置文件.git/config的配置会覆盖/etc/gitconfig 中的同名变量。win中配置文件一般在主目录下的对应用户文件夹里C:\Documents and Settings\$USERwin中/etc/gitconfig是在安装目录中。 用户信息配置12345678910git config --global user.name "leolan" #leolan为用户名git config --global user.email 842632422@qq.com #邮箱(用了global选项后当前用户的所有项目默认使用此用户信息，某一项目若使用其它的用户信息。把--global去掉重新配置，会在该项目.git/config中重新生成配置就行了。)以下可选：git config --global color.ui true #让Git显示颜色，会让命令输出看起来更醒目git config --global core.editor emace #指定emace为默认编辑器，不指定默认为vimgit config --global merge.tool vimdiff #差异化分析工具（冲突合并），git可以理解kdiff3 ,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,opendiff等工具的输出信息。git config user.name #查看配置的用户名，改为user.email则为邮箱。git config --list #查看已配置的用户信息 基本使用方法一般进入某项目的目录后再执行以下命令。123456789101112git init #设置当前目录为Git仓库git init 目录名 #指定目录为Git仓库git clone ［源］ #从源拷贝项目到本地的当前目录git clone ［源］［目录］ #指定源下载到某个目录例：git clone git://github.com/schacon/grit.git mygritgit status #查看当前目录文件的状态，加 -s 显示简短信息。"A"是已添加到缓存、"M"为文件有改动、"空格"为未缓存的文件，组合显示如："AM"代表已缓存的文件有改动，"空格M"代表未缓存的文件有改动。git add 文件名 #添加文件到项目缓存中，没有添加的文件不属于项目文件，也不会痛不到服务器。git add . #添加当前目录到项目缓存中，如果添加多个文件，此命令更方便。git commit -m "项目的版本或简短说明" #可以指定版本号及简单说明改动了哪些内容，同时会把所有改动同步到服务器上。git commit -am "项目的版本或简短说明" #改动了多个文件又不想一个个添加，此命令自动添加所有改动的文件并同步到服务器。 Git的所有工作都是现在本地缓存的，只有执行git commit -m “简短说明” 后才会向服务器提交。1234567git diff #未缓存的改动git diff --cached #已缓存的改动git diff HEAD #已缓存和未缓存的所有改动git diff --stat #显示摘要而非整个diffgit reset -- HEAD 文件 #取消文件已缓存的内容，--很重要，没有加--表示切换到另一个分支。git rm 文件 #从项目中及本地删除文件,可不用执行。git mv 文件 #从项目中及本地重命名文件,可不用执行。 创建远程仓库在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置： 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：ssh-keygen -t rsa -C &quot;842632422@qq.com&quot;你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub（公钥）文件的内容： 点“Add Key”，你就应该看到已经添加的Key： 为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。`ssh -T git@github.com提示：Hi MyLeoLan! You’ve successfully authenticated, but GitHub does not provide shell access. 则成功添加sshkey 在右上角找到“Create a new repo”按钮，创建一个新的仓库：目前，在GitHub上的这个仓库还是空的，会提示你创建README.md文件。 可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或下载了别人的项目想要推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的.git文件夹因为.git文件夹包含了别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。 从远程库克隆仓库远程库已经准备好了，下一步是用命令git clone克隆一个本地库：git clone git@github.com:MyLeoLan/testgit.git实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。 本地仓库推送到远程仓库把本地仓库的内容推送到远程（GitHub）仓库。在本地的XXX仓库下运行命令： git remote add origin git@github.com:myleolan/learngit.git表示把本地的XXX仓库与远程learngit.git库绑定(添加远程库)，以后推送都推送到这个库中。地址换成自己的库地址。你的SSH Key公钥不在我的账户列表中是推不上去的。 关联后，使用命令git push -u origin master完成第一次推送master分支的所有内容（一般远程的master分支会自动命名为origin用于区分，而本地的master还是master分支，-u会关联分支，下次推送默认推送到此分支。） 推送时git push origin XXXX （xxxx可以指定本地某分支推送到远程的origin分支）此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；简化命令为：git pull(从远程仓库提取数据并尝试合并到当前分支)和git push 从远程库下载分支和数据的更新到当前项目（不会合并，pull等同于fetch+merge）：git fetch origin 查看当前项目的远程库：1234git remote 或 git remote -vorigin git@github.com:myleolan/learngit.git (fetch)origin git@github.com:myleolan/learngit.git (push) 上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。 绑定多个远程仓库先创建一个远程仓库，然后编辑项目目录中的.git文件夹下的config文件（不要编辑全局配置文件，并不是所有项目都要推送到两个仓库中）删掉fetch那一行，只保留地址，然后再添加一个地址，像下面这样子。注意，刚刚删掉了fetch,所以第一个地址是默认fetch 另一种方法：加入要添加的第二个地址是： git@github.com:MyLeoLan/blogpost_backup.git那么输入：1git remote set-url --add (别名) git@github.com:MyLeoLan/blogpost_backup.git 不过这种方法有时候不是特别灵，可能会把原来的第一个地址替换掉，大家有机会多测试反馈哈。 之后每次提交时用 git push --all 就可以同时提交到绑定的仓库啦。 删除远程仓库：git remote rm ［别名或仓库名］ pull：本地 &lt;-- 远程 (如果你本地落后远程，必然要pull) push：本地 --&gt; 远程 (如果你本地超前远程，必然要push) 本质上都是同步commit 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步！ 管理修改第一次修改 -&gt; git add（放入暂存区）-&gt; 第二次修改 -&gt;git commit（提交暂存区，准备推送到远程） Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。 提交后，用git diff HEAD命令可以查看工作区和版本库里面最新版本的区别。 怎么提交第二次修改呢？你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了： 第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit好啦，把第二次修改提交了。 删除文件一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了,此时文件删除了但版本库里还有记录，文件可能恢复不了。这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会提示你哪些文件被删除了。 要从版本库中删除该文件，那就用命令git rm删掉，并且git commit （git rm会同时删除版本库及文件） 另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- filename git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 提交代码分两步: 1.从工作目录，提交到stage。 从工作目录提交到stage，需要用add或者rm命令，只提交到stage，而没有提交到master，是不会自动同步到master的。 2.从stage提交到master。 从stage提交到master用commit命令。 工作区--&gt;--add,rm--&gt;--stage--&gt;--commit--&gt;--master 退回也是要分两步: 1.从master退回到stage对于还没有提交到stage的，可以从stage用checkout命令退回，这一步会取stage中的文件状态，覆盖掉工作目录中文件的状态，跟master完全没关系。 2.从stage退回到工作目录 对于已经到达stage的，想把state中的文件状态用master中的覆盖掉，就用reset命令，这样就把stage中修改用master的状态覆盖掉了，完全跟工作目录没关系 工作区--&lt;--checkout--&lt;--stage--&lt;--reset--&lt;--master 要删除某些文件，不能简单用rm删除，远程仓库依然会保留文件（因为它不知道你什么时候就进行版本回退了，需要用到那些文件），要彻底删除，本地git rm filename命令删除文件再git push上去，或者进入github管理界面手动一个一个删除文件。 版本回退12345git status #查看当前状态git diff #查看做了哪些修改git add file #添加到缓存git commit -m "xxx"#提交到本地版本库git log #可查看所有的历史版本，信息太多加--pretty=oneline参数简化 首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交过commit的这个版本，HEAD^是上一个版本，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 此节实验当我没有保存下来，所以引用廖雪峰老师的数据，实验是通过修改readme.txt文件进行的，假设我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：git reset --hard HEAD^ (退回上一个版本) cat readme.txt看看readme.txt的内容是不是版本add distributed： Git is a distributed version control system.Git is free software. 果然,还可以继续回退到上一个版本wrote a readme file，不过且慢，我们用git log再看看现在版本库的状态：1234567891011commit ea34578d5496d7dd233c827ed32a8cd576c5ee85Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Tue Aug 20 14:53:12 2013 +0800 add distributedcommit cb926e7ea50ad11b8f9e909c05226233bf755030Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date: Mon Aug 19 17:51:55 2013 +0800 wrote a readme file 最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是3628164…，于是就可以指定回到未来的某个版本：git reset --hard 3628164 (退回指定版本）。 如果已经关掉了命令行，找不到新版本的commit id怎么办？Git提供了一个命令git reflog用来记录你的每一次命令(历史命令，类似日志)，其中就包含了commit id：12345git reflog 查询历史版本号ea34578 HEAD@&#123;0&#125;: reset: moving to HEAD^3628164 HEAD@&#123;1&#125;: commit: append GPLea34578 HEAD@&#123;2&#125;: commit: add distributedcb926e7 HEAD@&#123;3&#125;: commit (initial): wrote a readme file 第二行显示append GPL的commit id是3628164，现在，你又可以乘坐时光机回到未来了。 版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位,一般7-8位就行了，因为Git可能会找到多个版本号，就无法确定是哪一个了。Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL： 改为指向add distributed： 然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。 撤销修改当发现某部分代码需要撤销时git checkout -- filename可以丢弃工作区的修改：git checkout -- readme.txt（把readme.txt文件在工作区的修改全部撤销） 这里有两种情况： 1.readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。 2.readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。 现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了,庆幸的是，在commit之前，你发现了这个问题。用git status查看一下，修改只是添加到了暂存区，还没有提交。用命令git reset HEAD file(可以把暂存区的修改撤销掉（unstage），不带file则撤销所有文件的更改，重新放回工作区，此时就相当于没有git add的状态，但文件是改动过的） git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。再用git status查看一下，现在暂存区是干净的，工作区有修改。丢弃工作区的修改：git checkout -- readme.txt 可直接恢复文件并恢复版本库的内容（丢弃所有未git add的内容，回到最近一个最新版本）注意：要完全撤回修改的代码，要git reset HEAD file后执行git checkout -- file才会完全包括工作区的内容也删除。 现在，假设你不但改错了东西，还把暂存区提交到了版本库（执行了git commit），怎么办呢？还可以版本回退到上一个版本。如果还没有把自己的本地版本库推送到远程，可以用：git reset --hard HEAD 恢复到当前版本（改动了但没有commit的那个版本，如果进行了commit，此次commit就是一个新版本，只能通过git reset --hard HEAD^回到上一个commit）。如果已经提交到了远程，只能通过git reset --hard HEAD^版本回退了。 标签管理发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。 Git有commit，为什么还要引入tag？ “请把上周一的那个版本打包发布，commit号是6a5819e…” ;“一串乱七八糟的数字不好找！” 如果换一个办法： “请把上周一的那个版本打包发布，版本号是v1.2” ;“按照tag v1.2查找commit就行！”tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。 创建标签在Git中打标签非常简单，首先，切换到需要打标签的分支上：12git branch #查看有哪些分支git checkout master #切换到要打标签的分支上 然后，敲命令git tag &lt;name&gt;就可以在当前分支的最新已提交的状态(HEAD)打一个新标签：git tag v1.0 默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？ 方法是找到历史提交的commit id，然后打上就可以了：123456789101112git log --pretty=oneline --abbrev-commit6a5819e merged bug fix 101cc17032 fix bug 1017825a50 merge with no-ff6224937 add merge59bc1cb conflict fixed400b400 &amp; simple75a857c AND simplefec145a branch testd17efd8 remove test.txt... 比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：git tag v0.9 6224937 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164 查看所有标签：git tag 注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show &lt;tagname&gt;查看标签详细信息。 还可以通过-s用私钥签名一个标签：git tag -s v0.2 -m &quot;signed version 0.2 released&quot; fec145a(原来的-a换为-s) 签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：123gpg: signing failed: secret key not availableerror: gpg failed to sign the dataerror: unable to sign the tag 如果报错，请参考GnuPG帮助文档配置Key。如果签名不成功可以加-u 参数，详见：http://airk000.github.io/git/2013/09/30/git-tag-with-gpg-key git show &lt;tagname&gt;也可以看到PGP的签名信息：12345-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.12 (Darwin)iQEcBAABAgAGBQJSGpMhAAoJEPUxHyDAhBpT4QQIAKeHfR3bo...-----END PGP SIGNATURE----- 用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了。 操作标签git tag -d &lt;tagname&gt;可以删除一个本地标签。git push origin &lt;tagname&gt;可以推送一个本地标签到远程库。git push origin --tags可以推送全部未推送过的本地标签到远程库。 删除时先删除本地对应的标签，再运行命令git push origin :refs/tags/&lt;tagname&gt;删除一个远程标签。 分支创建分支可以在分支上工作而不影响master分支，当分支工作完成时再合并到master分支上。 一般流程： 1.先查看分支：git branch 2.创建+切换分支：git checkout -b &lt;分支name&gt;等价于：创建分支：git branch &lt;分支name&gt;+切换分支：git checkout &lt;分支name&gt; 3.查看当前分支：git branch 4.在新建分支上进行工作，工作完成时。切换回主分支：git checkout master 5.合并某分支到当前分支（当前已切换回master分支了）：git merge &lt;分支name&gt; 6.删除无用分支：git branch -d &lt;分支name&gt; 7.查看当前分支：git branch 只剩master分支啦。 想要深入了解，参考： 猴子Git Pro Git 廖雪峰Git 分支策略在实际开发中，我们应该按照几个基本原则进行分支管理： 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；平时干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。所以，团队合作的分支看起来就像这样：Git分支十分强大，在团队开发中应该充分应用。合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 分支管理策略合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式(加参数--no-ff)，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。 下面来测试一下--no-ff方式的git merge： 创建分支、修改文件，提交缓存，切换回master分支，准备合并dev分支，因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。git merge --no-ff -m &quot;merge with no-ff&quot; dev 用git log看看分支历史：12345678git log --graph --pretty=oneline --abbrev-commit* 7825a50 merge with no-ff|\| * 6224937 add merge|/* 59bc1cb conflict fixed... 冲突解决当合并出现冲突时，一般要手动解决。直接查看master分支的readme.txt（冲突文件）的内容并修改：123456789Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1 修改完毕，再次提交即可。 Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容。 用带参数的git log也可以看到分支的合并情况：git log --graph --pretty=oneline --abbrev-commit用git log --graph命令可以看到分支合并图。 详见：廖雪峰Git解决冲突 错误解决 1.error: src refspec master does not match any.答：目录中没有文件，空目录是不能提交上去的 执行:git commit -m “xxx” 2.error: insufficient permission for adding an object to repository database ./objects答：服务端没有可写目录的权限［可能不是你的库，或sshkey不对］ 3.error：fatal: remote origin already exists.答：git remote rm origin 4.error: failed to push som refs to ……..解决办法：git pull origin master答：先pull 下来 再push上去。 5.error: failed to push some refs to ‘git@github.com:myleolan/learnpython.git’To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again. See the ‘Note aboutfast-forwards’ section of ‘git push --help’ for details.答：是因为远程用web创建的的库和本地不一样。git pull origin master (先pull 下来 再push 上去) 6.git push时报错：The requested URL returned error: 403 Forbidden while accessing答：vim /.git/config把[remote “origin”]项中https://github.com 改为https://myleolan@github.com就是加上用户名@之后再次执行git push 输入密码即可，一般用git协议不会报此错误，地址改为git@github.com:myleolan/XXXX.git Bug分支当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交；并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？ Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：git stash现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。 修复Bug一般流程首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支并切换分支：12git checkout mastergit checkout -b issue-101 #创建并切换分支 现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：12git add readme.txt git commit -m "fix bug 101" 修复完成后，切换到master分支，并完成分支合并，最后删除issue-101分支： 123git checkout mastergit merge --no-ff -m "merged bug fix 101" issue-101 #合并分支git branch -d issue-101 #删除分支 bug修复了，现在，可以接着回到dev分支干活了！12345git checkout devgit status #此时可以看到工作区是干净的git stash list #查看已储藏的工作现场stash@&#123;0&#125;: WIP on dev: 6224937 add merge 工作现场还在，Git把stash内容存在某个地方了，需要恢复，有两个办法： 1.用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除(stash只是临时封存区，建议删除)。 2.用git stash pop恢复的同时把stash内容也删了。 执行git stash pop恢复，再用git stash list查看，就看不到任何stash内容了可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：git stash apply stash@{0} (stash@{0}是封存的标识) Feature分支软件开发中，总有无穷无尽的新的功能要不断添加进来。添加一个新功能时，不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。1234567891011#当前在工作分支dev上。git checkout -b feature-vulcan(name) #创建并切换到该分支#修改代码完成之后git add vulcan.pygit statusgit commit -m "add feature vulcan"git checkout dev #切回dev，准备合并#一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。执行以下两句就可以完成任务了：git merge --no-ff -m "merged feature-vulcan" feature-vulcan #合并分支git branch -d feature-vulcan #删除分支 但是，就在此时，接到上级命令，因经费不足，新功能必须取消！虽然白干了，但是这个分支还是必须就地销毁：1234git branch -d feature-vulcanerror: The branch 'feature-vulcan' is not fully merged.If you are sure you want to delete it, run 'git branch -D feature-vulcan'. Git提示销毁失败：feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan 现在我们强行删除：git branch -D feature-vulcan OK，现在我们切换回dev分支继续工作。 自定义Git配置(高级)我们已经配置了user.name和user.email，实际上，Git还有很多可配置项。 忽略特殊文件有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files …，有强迫症的童鞋心里肯定不爽。好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。 不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore 已经配置好了要忽略的文件，下载回来要文件名要改为.gitignore放在项目根目录下。 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 举个例子： 假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有Desktop.ini文件，因此你需要忽略Windows自动生成的垃圾文件；然后，继续忽略Python编译产生的.pyc、.pyo、dist等文件或目录(忽略文件夹在文件夹名后加/) 加上你自己定义的文件，最终得到一个完整的.gitignore文件，内容如下：1234567891011121314151617# Windows:Thumbs.dbehthumbs.dbDesktop.ini# Python:*.py[cod]*.so*.egg*.egg-infodistbuild# My configurations:db.inideploy_key_rsa新建文件夹/ 最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore是否生效的标准是git status命令是不是说working directory clean。 使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，在第三方文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。 有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：12345git add App.classThe following paths are ignored by one of your .gitignore files:App.classUse -f if you really want to add them. 如果你确实想添加该文件，可以用-f强制添加到Git：git add -f App.class 或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：12git check-ignore -v App.class.gitignore:3:*.class App.class Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。 配置命令别名有没有经常敲错命令？比如git status？status这个单词真心不好记。如果敲git st就表示git status那就简单多了。1234git config --global alias.st status #st表示statusgit config --global alias.co checkout #co表示checkoutgit config --global alias.ci commit #ci表示commitgit config --global alias.br branch #br表示branch --global参数是全局参数，这些命令在这台电脑的所有Git仓库下都有用。在”撤销修改“一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：git config --global alias.unstage &#39;reset HEAD&#39; 当你敲入命令：git unstage test.py实际上Git执行的是：git reset HEAD test.py 配置一个git last，让其显示最后一次提交信息：git config --global alias.last &#39;log -3&#39; (数字代表最近的几次提交);这样，用git last就能显示最近3次的提交： 甚至还有人丧心病狂地把lg配置成了：1git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit" 来看看git lg的效果： 关于配置文件配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。 每个仓库（每个项目）独立的Git配置文件都放在.git/config文件中： 12345678910111213141516cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true[remote "origin"] url = git@github.com:myleolan/learngit.git fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"] remote = origin merge = refs/heads/master[alias] #命令别名，要删除别名，直接删掉对应的行即可。 last = log -1 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中： 123456789cat .gitconfig[alias] co = checkout ci = commit br = branch st = status[user] name = Your Name email = your@email.com 配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置(参考第2节 “Git配置”)。 团队协作抓取分支多人协作时，大家都会往master和dev分支上推送各自的修改。现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：git clone git@github.com:myleolan/learngit.git 当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。可以用git branch命令看看；现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用命令创建本地dev分支：git checkout -b dev origin/dev (在origin上创建dev，-b切换到dev分支;如果本地已经有dev分支了，直接切换就好) 现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：git commit -m &quot;add /usr/bin/env&quot; 本地已经有dev分支了就不用创建了，直接执行下面的命令会自动在远程服务器新建dev分支。git push origin dev (把本地dev推到远程origin上，会自动寻找origin的dev分支) 你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：1234567891011git add hello.pygit commit -m "add coding: utf-8"git push origin devTo git@github.com:myleolan/learngit.git ! [rejected] dev -&gt; dev (non-fast-forward)error: failed to push some refs to 'git@github.com:myleolan/learngit.git'hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')hint: before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details. 推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：1234567891011121314git pullremote: Counting objects: 5, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 3 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:myleolan/learngit fc38031..291bea8 dev -&gt; origin/devThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with: git branch --set-upstream dev origin/&lt;branch&gt; git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接(绑定这两个分支)：123git branch --set-upstream dev origin/dev 如果git pull还是失败，说明绑定不了。试试官方更改的命令：git branch --set-upstream-to=origin/dev dev git pull -f origin master 强制覆盖也行，但很危险。 再次git pull成功，但是合并有冲突，需要手动解决，解决的方法和第12节“解决冲突”完全一样。解决后，提交，再push：12git commit -m "merge &amp; fix hello.py"git push origin dev 多人协作的工作模式通常是这样： 首先，可以试图用git push origin branch-name推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令:git branch --set-upstream branch-name origin/branch-name这就是多人协作的工作模式，一旦熟悉了，就非常简单。 F&amp;Q签出远程分支，出现以下错误：fatal: Cannot update paths and switch to branch ‘develop’ at the same time.解决方法：先git fetch再git checkout -b develop origin/develop因为本地还没有”develop”分支信息，需要先fetch或者pull 假设有人往服务器上推送了一个新的分支，但是我不知道分支的名称是什么，我如何能获取到服务器上的分支列表呢？ a. 你直接去问他 b. 如果用GitHub，直接去网站看 c. git ls-remote --heads origin 推送分支推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：git push origin master 如果要推送其他分支，比如dev，就改成：git push origin dev 但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？ ● master分支是主分支，因此要时刻与远程同步； ● dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； ● bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug； ● feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！ 参与开源项目如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的GitHub项目主页，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：git clone git@github.com:**your_username**/bootstrap.git 一定要从自己的账号下clone仓库，这样你才能推送修改(在第4节 “创建远程仓库”中结尾就提到了另一种克隆方式)。如果从bootstrap的作者的仓库地址，采用git clone git@github.com:twbs/bootstrap.git的方式克隆，因为没有权限，你将不能推送修改（见第4节 “创建远程仓库”结尾处，删除.git文件夹的方法）。 Bootstrap的官方仓库twbs/bootstrap、你在GitHub上克隆的仓库your_username/bootstrap，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样： 如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。 如果你希望bootstrap的官方库能接受你的修改，你就可以在你的GitHub该项目页上发起一个pull request。当然，对方是否接受你的pull request就不一定了。 自己搭建Git服务器GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。搭建Git服务器需要准备一台运行Linux的机器，强烈用Ubuntu、Debian或者Centos、redhat，这样，通过几条简单的apt命令就可以完成安装。root登录 第一步，安装git：sudo apt-get install git 或 yum install git 第二步，创建一个git用户，用来运行git服务：sudo adduser git 第三步，初始化Git仓库：先选定一个目录作为Git仓库，假定是/data/git/learngit.git在/data/git/目录下输入命令：sudo git init --bare learngit.git Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。sudo chown -R git:git learngit.git Git服务器就已经搭得差不多了。下面我们在客户端clone一下远程仓库git clone git@IP:/data/git/learngit.gitCloning into ‘learngit’…The authenticity of host ‘192.168.8.34 (192.168.8.34)’ can’t be established.RSA key fingerprint is 2b:55:45:e7:4c:29:cc:05:33:78:03:bd:a8:cd:08:9d.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘192.168.8.34’ (RSA) to the list of known hosts.git@192.168.8.34’s password:能连接但要密码，接着下一步。 第四步，创建证书登录（Git服务器打开RSA认证）：然后就可以去Git服务器上添加你的公钥用来验证你的信息了。vim /etc/ssh/sshd_config中将RSA认证打开，即：123RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 这里我们可以看到公钥存放在.ssh/authorized_keys文件中。所以我们在/home/git下创建.ssh目录，然后创建authorized_keys文件，收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。此时再次连接已经可以免密钥登录啦。 第五步，禁用shell登录：出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：git:x:1001:1001:,,,:/home/git:/bin/bash改为：git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。 第六步，克隆远程仓库：现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：git clone git@IP:/data/git/learngit.gitCloning into ‘sample’…warning: You appear to have cloned an empty repository.剩下的推送就简单了。 管理公钥 如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。管理公钥也可用Gitolite管理权限有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。 搭建服务器的同时采用Gitolite来管理权限，参考：https://my.oschina.net/u/2351685/blog/509322 Gitolite的使用，参考：http://www.uml.org.cn/pzgl/201404092.asp 参考资料：连猴子都会的git：http://backlogtool.com/git-guide/cn/ Pro Git：http://iissnan.com/progit/廖雪峰git： http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 外国友人git手册:https://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit10个迅速提升你 Git 水平的提示:http://www.oschina.net/translate/10-tips-git-next-level]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Git教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim常用命令]]></title>
    <url>%2Fposts%2F22091%2F</url>
    <content type="text"><![CDATA[插入模式按「i」切换进入插入模式「insert mode」，按”i”进入插入模式后是从光标当前位置开始输入文件； 按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。 : w filename （输入 「w filename」将文章以指定的文件名filename保存） : wq (输入「wq」，存盘并退出vim) : q! (输入q!， 不存盘强制退出vim) :ZZ (输入「ZZ」，存盘并退出vim) 移动光标vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。 按数字「0」或「^(shift+6)」：移到行首。在行首第一个字符是空白字符时有点区别。 按「shift+$」：移到行尾。 按「G」：移动到文章的开头。 按「w」：光标跳到下个字符串的开头 按「e」：光标跳到下个字符串的字尾 按「b」：光标回到上个字符串的开头 按「#」：光标移到某个字符串后，按#会高亮所有的这个字符串。 删除文字 「x」：每按一次，删除光标所在位置的”后面”一个字符。 「*x」：例如，「6x」表示删除光标所在位置的”后面”6个字符。 「X」：大写的X，每按一次，删除光标所在位置的”前面”一个字符。 「*X」：例如，「20X」表示删除光标所在位置的”前面”20个字符。 「dd」：删除光标所在行。 「*dd」：从光标所在行开始删除#行 复制 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。 「*yw」：复制#个字到缓冲区 「yy」：复制光标所在行到缓冲区。 「*yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。 替换 「r」：替换光标所在处的字符。 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。 撤销 「u」：如果您误执行一个命令，可以马上按下「u」撤销，回到上一个操作。按多次”u”可以执行多次回复。 更改 「cw」：更改光标所在处的字到字尾处更改某个字符串 「c*w」：例如，「c3w」表示更改3个字 跳至指定的行 「ctrl」+「g」列出光标所在行的行号，及总行数。 「*G」：例如，「15G」，表示移动光标至文章的第15行行首。 先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。 列出行号 :set nu 会在文件中的每一行前面列出行号。 跳到文件中的某一行 :行号 在冒号后输入一个数字，再按回车键就会跳到该行了。 查找字符 :/关键字 可以一直按「n」会往后寻找到您要的关键字为止。]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>vim常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具集]]></title>
    <url>%2Fposts%2F13710%2F</url>
    <content type="text"><![CDATA[备份软件 ● Amanda -客户端-服务器模型备份工具 ● Bacula – 另一个客户端-服务器模型备份工具 ● Backupninja -轻量级，可扩展的元数据备份系统 ● Backuppc -客户端-服务器模型备份工具和文件共享方案。 ● Burp -网络备份和还原程序 ● Duplicity -使用rsync算法加密的带宽-效率备份 ● Lsyncd -监控一个本地目录树的变化,然后产生一个进程去同步变化。默认使用rsync。 ● Rsnapshot -文件系统快照工具 ● SafeKeep -使用rdiff-backup，集中的，基于pull的备份 ● TarSnap – 具有一个开源客户端的安全备份服务 ● UrBackup -另一个客户端-服务器备份系统 ● DREBS – AWS EBS支持策略的备份脚本 克隆软件 ● Clonezilla -分区和磁盘镜像/克隆程序 ● Fog – 另一个计算机克隆解决方案 ● Redo Backup -简单的备份，恢复和还原 云计算 ● AppScale – 兼容Google App引擎的开源云计算软件. ● Archipel -使用Libvirt管理和监视虚拟机 ● CloudStack -创建，管理和部署基础云服务的云计算软件 ● Cobbler -Cobbler是一个Linux安装服务器，允许快速地构网络安装环境 ● Eucalyptus -兼容AWS的开源私有云软件 ● Mesos -开发和运行能效高的分布式系统。 ● OpenNebula -一个用于系统管理员和研发运维的用户驱动的云管理平台 ● OpenStack -构建私有和开放云的开源软件 ● The Foreman -Foreman是一个用于物理和虚拟服务器的全生命周期管理工具.FOSS. ● Openstack Juno 云计算平台（类似阿里云，腾讯云这样的管理平台）云业务流程 ● BOSH -IaaS业务流程平台，最初用于部署和管理云计算平台PaaS,但也用于通用的分布式系统。 ● Cloudify -使用Python和YAML编写的开源TOSCA-based云业务流程软件平台。 ● Juju -云业务流程工具用于管理服务，比如charms，YAML配置和部署脚本集 ● MCollective -来自Puppet实验室的管理服务器业务流程和开发的Ruby框架 ● Overcast -在不同的云提供商上部署VMs，并在任何或所有（VM）上通过SSH并行运行命令行和脚本 ● Rundeck – 简单的业务流程工具 ● Salt -Python编写云存储 ● git-annex assistant -在你的每一个OSX和Linux电脑，Android设备，可移动驱动，NAS电器和云服务上一个同步文件夹 ● ownCloud -提供你的文件的统一访问，通过web，你的电脑和你的移动设备 ● Seafile -另一个开源的云存储解决方案 ● SparkleShare -提供云存储和文件同步服务。它默认使用Git作为存储后端 ● Swift -一个高可用，分布式，最终一致的对象/大数据存储 ● Syncthing -一个用于私有，加密和身份认证数据的开源系统代码审查基于Web的协作式代码审查系统 ● Gerrit -基于Git版本控制，它促进软件开发人员审查源代码修改和批准或拒绝这些变更。 ● Review Board – 基于MIT License的可用自由软件协作软件协作软件和群件套件 ● Citadel/UX -协同套件（消息和群件）继承于Citadel家族程序 ● EGroupware -PHP编写的群件软件 ● Horde Groupware -基于PHP的协作软件套件，包括邮件，日历，wiki，时间跟踪和文件管理 ● Kolab – 另一个群件套件 ● SOGo – 协作软件服务器，专注简单性和可伸缩性 ● Zimbra -协作软件套件，包括邮件服务和web客户端 配置管理数据库（CMDB）软件 ● i-doit – 开源的IT文档管理和CMDB ● iTop -一个完全开源的，ITIL,基于web的服务管理工具 ● Ralph -用于大型数据中心或较小本地网络的资产管理，DICM和CMDB系统 ● Clusto -帮助跟踪你的库存，在哪，如何连接，同时提供一个和基础架构元素交互的抽象接口 配置管理工具 ● Ansible -Python编写的，通过SSH管理节点 ● Jenkins+Ansible+Gitlab自动化部署三剑客http://www.showerlee.com/archives/1880 ● CFEngine -轻量级代理系统。通过申明语言配置状态。 ● Chef -Rbuy和Erlang编写，使用纯RubyDSL ● Fabric – Python库和cli工具，为应用程序部署或系统管理任务简化使用SSH。 ● Pallet -通过Clojure DSL进行架构定义，配置和管理 ● Puppet – Ruby编写，使用Puppet声明语言或Rbuy DSL ● Salt – Python编写 ● Slaughter – Perl编写 持续集成/部署软件 ● Buildbot – 基于Python的持续集成工具 ● Drone – 构建在Docker，使用YAML文件配置的的持续集成服务器 ● GitLab CI -基于rbuy。他们也提供GitLab用于管理git存储库 ● Go – 开源的持续交付服务器 ● Jenkins – 一个可扩展的开源持续集成服务器 ● Vlad the Deployer -自动化部署 网络分布式文件系统 ● Ceph -分布式对象存储和文件系统 ● DRBD -分布式块设备复制 ● LeoFS -非结构化对象/数据存储和高可用性,分布,最终一致的存储系统。 ● GlusterFS – 可扩展，网络附加存储文件系统。 ● HDFS – Java编写的，用于Hadoop框架的分布式、可伸缩、可移植文件系统 ● Lustre -一种并行分布式文件系统,一般用于大规模集群计算。 ● MooseFS – 容错、网络分布式文件系统。 ● MogileFS -应用程序级别、网络分布式文件系统。 ● OpenAFS -只读副本和多操作系统支持的分布式网络文件系统 ● TahoeLAFS -安全、分散、容错、点对点分布式数据存储和分布式文件系统。 ● XtreemFS -XtreemFS是一个用于存储需求的容错式分布式文件系统。 开源在线调查工具LimeSurveyLimeSurvey 拥有一个调查工具必要的所有功能，可以做一些简单的调查和投票，如果想要做更复杂一点的就需要分开多个页面。LimeSurvey 支持 80 种语言，提供 29 种类型的问卷模板，支持离线调查，支持匿名回复，可以把调查结果导出成 Microsoft Excel®, Microsoft Word®, SPSS®, R, Stata®, PDF 或者 csv 格式。LimeSurvey 可以通过 JavaScript、图片和视频来个性定制调查问卷，甚至可以直接修改 HTML 代码。LimeSurvey 可以直接部署在自己的服务器上。 JD Esurvey如果 LimeSurvey 还不能满足你的要求，或者你使用的是基于 Java 的 web 应用，那么可以试试 JD Esurvey。JD Esurvey 被称为“一款开源的企业调查问卷 Web 应用” ，功能非常强大，容量极大，也极其健壮。JD Esurvey 可以收集很多类型的信息：是/否问卷、产品或服务星级评价等。JD Esurvey 支持使用平板和智能手机来创建或者管理调查问卷，发布出去的问卷对移动端非常友好。JD Esurvey 还支持无障碍模式，适合残疾人士使用。JD Esurvey 是使用 Java 编写的，基于 Spring 框架，遵循 AGPLv3 开源授权协议，GitHub 地址：https://github.com/JD-Software/JDeSurvey。 Quick Survey对于大多数人，LimeSurvey 和 JD Esurvey 太难掌控了，我们只是需要一个快速并且简单的方式来收集各种意见和反馈。那么 Quick Survey 是个更合适的选择。Quick Survey 只允许创建问答类型或者多选列表类型的调查问卷。用户可以创建问题或者列表，然后发布并分享 URL。Quick Survey 的调查结果也可以导出成 CSV 文件。Quick Survey 遵循 MIT 开源授权协议，GitHub 地址：https://github.com/simonv3/quick-survey/。 TellForm在功能方面，TellForm 是介于 LimeSurvey 和 Quick Survey 中间的，适合需要一部分功能而又不需要大而全需求的用户。TellForm 提供 11 种不同类型的调查问卷;支持多种语言;拥有良好的调查分析功能;可以轻松定制调查问卷的外观和感觉;支持 Native Analytics 和 Google Analytics;可嵌入表单;提供表单 API。TellForm 应用接口也是非常简单和整洁的。TellForm 后期会实现数据加密、集成 Typeform API、集成第三方/插件(比如：Slack)等功能。TellForm 是 TypeForm 和 Google Forms 的开源替代品，遵循 MIT 开源授权协议，GitHub 地址：https://github.com/whitef0x0/tellform。 DNS服务器 ● Bind -最广泛使用的域名服务软件 ● djbdns -DNS应用集合，包括tinydns ● Designate – DNS REST API,支持多种DNS服务器的后端 ● dnsmasq -为小规模网络提供DNS,DHCP和TFTP服务的轻量级服务 ● Knot – 高性能，权威的DNS服务器 ● NSD – 权威的、高性能的、简单的域名服务器。 ● PowerDNS -具有各种数据存储后端和负载平衡功能的DNS服务器。 ● Unbound – 验证、递归和缓存DNS解析器。 ● Yadifa – 具有DNSSEC兼容的轻量级的权威域名服务器，支持.eu的顶级域名。 Web主机控制面板 ● Ajenti -Linux和BSD控制面板 ● Feathur – VPS供应和管理软件 ● ISPConfig -Linux主机控制面板 ● VestaCP -用于Linux和Nginx的主机面板 ● Virtualmin -基于webmin的Linux控制面板 ● ZPanel -Linux BSD和Windows控制面板 IMAP/POP3邮件服务器 ● Courier IMAP/POP3 -快速，可伸缩，企业级IMAP和POP3服务器 ● Cyrus IMAP/POP3 -运行在密封服务器上,普通用户不允许登录。 ● Dovecot -主要考虑安全而编写的IMAP和POP3服务器 ● Qpopper – 一个古老且流行的POP3服务器实现 IT资产管理软件 ● GLPI -带有额外管理接口的信息资源管理器 ● OCS Inventory NG -允许用户清算IT资产 ● RackTables -数据中心和服务器房间资产，比如将硬件资产,网络地址,在货架空间,网络配置文档化。 ● Ralph – 针对大型数据中心系统以及小型局域网网络的资产管理、DCIM和CMDB。 ● Snipe IT -资产和许可证管理软件 LDAP服务器 ● 389 Directory Server – 通过Red Hat部署 ● Apache Directory Server -用Java编写的Apache软件基金会项目 ● Fusion Directory -基于OpenLDAP改善服务和公司目录的管理 ● OpenDJ – OpenDS分支 ● OpenDS -另一个用Java编写的目录服务器 ● OpenLDAP -由OpenLDAP项目开发 日志管理工具：收集，解析，可视化 ● Elasticsearch – 一个基于Lucene的文档存储，主要用于日志索引、存储和分析。 ● Fluentd – 日志收集和发出 ● Flume -分布式日志收集和聚合系统 ● Graylog2 -具有报警选项的可插入日志和事件分析服务器 ● Heka -流处理系统，可用于日志聚合 ● Kibana – 可视化日志和时间戳数据 ● Logstash -管理事件和日志的工具 ● Octopussy -日志管理解决方案（可视化/报警/报告） 监控软件 ● Cacti -基于Web的网络监控和图形工具 ● Cabot – 监控和报警，类似PagerDuty ● check_mk -Nagios的扩展集合 ● Dash -一个用于GNU/Linux机器的低开销web仪表板监控。 ● Icinga – Nagios分支 ● LibreNMS – Observium分支 ● Monit – 管理和监控Unix系统的小型开源工具 ● Munin -网络资源监控工具 ● Naemon -基于Nagios4内核的网络监控工具，具有性能加强和新功能 ● Nagios -计算机系统，网络和基础架构监控软件 ● Observium -服务器和网络设备的SNMP监控，运行在linux ● OMD -开放的监控分布 ● Opsview -基于Nagios4，Opsview核心，用于小型IT和测试环境 ● Riemann -灵活和快速的事件处理器，允许负责时间和度量分析 ● Sensu -开源的监控框架 ● Sentry – 应用监控，事件记录和聚合 ● Shinken – 另一个监控框架 ● Thruk – 多后台监控的web接口，支持Naemon，Nagios，Icinga和Shinken ● Xymon -灵感来自Big Brother的网络监控 ● Zabbix – Enterprise-class software for monitoring of networks and applications. ● Zabbix – 监控网络和应用的企业级软件 ● Zenoss -基于Zope的应用，服务器和网络管理平台 度量收集和显示软件 ● Collectd -系统统计收集守护进程 ● Collectl -高精度系统性能指标收集工具。 ● Dashing -Ruby gem,允许快速统计仪表板的开发。基于HTML5，允许在数据中心或会议室进行大屏幕显示。 ● Diamond -基于Python的统计收集守护进程 ● Ganglia – 基于RRD用于网格和/或集群的服务器的高性能、可伸缩监控设备。兼容Graphite，使用一个单一的收集进程。 ● Grafana -一个Graphite或InfluxDB仪表盘和图形编辑器 ● 开源的可伸缩绘图服务器 ● InfluxDB -开源的分布式时间序列数据库，没有外部依赖。 ● KairosDB -快速分布式可扩展的时间序列数据库,OpenTSDB 1. x的分支。 ● OpenTSDB -存储和服务大量的时间序列数据，不丢失粒度。 ● RRDtool – 开源企业标准，用于时间序列数据的高性能数据记录和绘图系统 ● Statsd -应用统计监听 网络配置管理工具 ● GestióIP -一个自动的基于web的IPV4/IPV6地址管理工具 ● RANCID -监控网络设备配置和维护历史变更 ● rConfig -另一个网络配置管理工具 时事通讯软件 ● DadaMail -Perl编写的邮件列表管理器 ● phpList -PHP编写的时事通讯管理器 NOSQL数据库列族 ○ Apache HBase – Hadoop数据库，一个分布式的大数据存储 ○ Cassandra -分布式数据库管理系统，设计用于处理大量数据跨多个服务器。 ○ Hypertable -基于c++的bigtable DBMS,节省通信，可独立或在Hadoop类似的分布式FS上运行。 文档存储 ○ CouchDB -易于使用,多主机复制的面向文档的数据库系统。 ○ ElasticSearch – 基于Java的数据库,受欢迎的日志聚合,和电子邮件归档项目。 ○ MongoDB – 另一个面向文档的数据库系统 ○ RavenDB – 具有ACID/事物功能的基于文档的数据库 ○ RethinkDB -开源分布式文档存储数据库，关注JSON 图 ○ FlockDB -Twitter分布式，容错图数据库 ○ Neo4j – 开源图数据库 键值 ○ LevelDB -Google高性能键值数据库 ○ Redis – 支持网络，基于内存，键值，亦可持久化数据库 ○ Riak -另一个容错的键值NoSQL数据库NoSQL服务器比较: https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis 打包 ● fpm – 万能的多格式包创建器 ● omnibus-ruby – 全栈，跨发行版的包管理软件（Ruby） ● packman -全栈，跨发行版的包管理软件（Python） ● tito – 为git项目构建RPM 队列 ● BeanstalkD – A simple, fast work queue. ● BeanstalkD – 一个简单快速的工作队列 ● Gearman -快速的多语言队列或任务处理平台 ● NSQ – 实时分发的消息平台 ● RabbitMQ -健壮的，全功能，跨发行版的队列系统 ● ZeroMQ -轻量级队列系统 RDBMS关系数据库管理系统 ● Firebird – 真正的全球开源数据库 ● Galera -Galera MySQL集群是一个易于使用的高可用性解决方案，具有很高的系统正常运行时间,没有数据丢失,为未来的增长提供可伸缩性。 ● MariaDB -MySQL的社区开发分支 ● MySQL – 非常流行的RDBMS服务器 ● Percona Server -增强的，可替换MySQL ● PostgreSQL – 对象关系数据库管理系统（ORDBMS) ● PostgreSQL-XL – 基于PostgreSQL的可伸缩开源数据库集群 ● SQLite -自包容，弱服务器，零配置，支持事务的SQL DBS实现库 安全工具 ● Denyhosts -阻止SSH字典攻击和暴力攻击 ● Fail2Ban – 扫描日志文件，并对具有恶意行为显示的IP采取措施 ● SpamAssassin -一个强大的和受欢迎的垃圾邮件过滤器，它采用多种检测技术。服务发现 ● Consul – Consule是伊戈尔服务发现，监控和配置的工具 ● Doozerd – Doozer是一个高可用，完全一致的存储，用于少量非常重要的数据 ● ZooKeeper – ZooKeeper是一个集中的服务，用于维护配置信息，命名，提供分布式同步和组服务 SMTP服务器 ● Exim -由剑桥大学开发的消息传输代理（MTA) ● Haraka – 用JavaScirpt编写的高性能，可插入的SMTP服务器 ● MailCatcher -Ruby gem部署一个简单的SMTP MTA网关，接收所有邮件并在web接口显示。对调试和开发有用。 ● Maildrop -开源的一次性邮件服务器，对开发也很有用 ● OpenSMTPD -从OpenBSD项目实现的安全的SMTP服务器 ● Postfix – 快速，易于管理和安全的Sendmail替代品 ● Qmail – 安全的Sendmail替代品 ● Sendmail -消息传输代理（MTA) 操作系统级别的虚拟化 ● Bitnami -为web应用，开发栈和虚拟设备生产开源软件安装器或软件包 ● Docker – 给开发者和系统管理员构建，发布和运行分布式应用程序的开放平台 ● OpenVZ -Linux平台基于容器的虚拟化 SSH工具 ● autossh -网络中断后自动复位ssh会话。 ● Cluster SSH -通过一个图形化控制台控制多个xterm窗口。 ● DSH -Dancer的shell/分布式shell-从一个命令行包装执行多个远程shell命令。 ● Mosh – 移动shell ● parallel-ssh -提供并行的OpenSSH版本和相关工具 ● SSH Power Tool -不使用pre-shared钥匙的情况下对多个服务器同时执行命令和上传文件 分析软件 ● Analog – 世界上最流行的日志分析工具 ● GoAccess -在终端运行的开源的实时web日志分析和交互视图 ● Piwik -免费和开源的web分析应用 ● Webalizer – F快速免费的web服务器日志文件分析程序 基于web的工单系统 ● Bugzilla -由Mozilla项目开发和使用过的通用缺陷跟踪和测试工具 ● Cerb – 基于商业开源许可的基于组的邮件管理项目 ● Flyspray – 使用PHP编写的缺陷跟踪系统 ● MantisBT -另一个基于web的缺陷跟踪系统 ● osTicket -开源的技术支持工单系统 ● Otrs -免费和开源故障通知单系统软件包,公司,组织,或其他实体可以使用它来基于询问分配工单并跟踪进一步的沟通。 ● Request Tracker -使用Perl编写的工单跟踪系统 ● TheBugGenie -开源的工单系统，具有非常完备的用户权限分配 故障排除工具 ● mitmproxy -ython工具，用于拦截,查看和修改网络流量。在排除某些问题是非常重要的。 ● Sysdig -从一个运行的linux实例上捕获系统状态和活动，之后保存，过滤和分析 ● Wireshark -世界上著名的网络协议分析工具 基于web的项目管理和缺陷跟踪系统 ● ChiliProject – Redmine分支 ● GitBucket 用Scala编写的GitHub的克隆，单独jar安装 ● GitLab -用Rbuy编写的GitHub的克隆 ● Gogs -用Go编写 ● OpenProject -开源的项目协作项目 ● Phabricator PHP编写 ● Redmine – 基于rails在rbuy编写 ● The Bug Genie -PHP编写 ● Trac -python编写 ● 阿里云持续交付https://crp.aliyun.com/#page6redmine项目管理系统https://bitnami.com/stack/redmine/installer 软件版本和版本控制 ● Fossil -分布式版本控制，内建wiki和缺陷跟踪 ● Git -速度很快的分布式版本控制和源代码管理 ● GNU Bazaar -由Cannoicalzi赞助的分布式版本控制系统 ● Mercurial -另一个版本控制 ● Subversion -客户端-服务器版本控制系统 ● Coding ● 码云 ● 阿里云 code.aliyun.com 虚拟化软件 ● Ganeti -在KVM和Xen上构建的集群虚拟服务器管理软件 ● KVM -Linux内核虚拟化架构 ● oVirt -管理虚拟机，存储和虚拟网络 ● Packer – 从单个源配置为多个平台创建相同的机器镜像 ● Vagrant – 创建完整开发环境的工具 ● VirtualBox -来自Oracle公司的虚拟化产品 ● Xen -用于32/64位Intel/AMD(IA 64）和PowerPC 970架构的虚拟机监控器 ● Docker ● cockpit (图形化管理Docker容器) VPN软件 ● OpenVPN -使用一个定制的安全密钥交换协议,利用SSL / TLS。 ● Pritunl -基于OpenVPN的方案，易于设置 ● SoftEther – 具有高级特性的多协议VPN软件 ● sshuttle -穷人的VPN ● strongSwan – Linux下完整的IPsec实现 ● tinc -分布式点对点VPN 物联网● contiki 一开源物联网系统，支持tcp,vnc等协议● yeelink 物联网在线平台 15款顶级开源人工智能工具推荐https://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>工具集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集群、自动化链接更新页]]></title>
    <url>%2Fposts%2F36339%2F</url>
    <content type="text"><![CDATA[jumpserver官网：http://www.jumpserver.org/https://github.com/jumpserver/jumpserver 堡垒机集群搭建http://www.tuicool.com/articles/vI7VzyB]]></content>
      <categories>
        <category>集群自动化</category>
      </categories>
      <tags>
        <tag>集群</tag>
        <tag>自动化</tag>
        <tag>堡垒机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tomcat单机多实例]]></title>
    <url>%2Fposts%2F20879%2F</url>
    <content type="text"><![CDATA[运用了一个镜像启动多个容器，一个容器可以启动多个示例的原理，具体请搜索本博客：Docker常用命令 此篇博客是学习“烂泥”大神分享的笔记写的！ 主机IP：192.168.8.33容器IP：192.168.8.188从docker仓库下载最新的tomcat容器，然后使用这个tomcat容器，就可以启动多个tomcat实例，而我们只需要在192.168.0.100上通过端口进行区分就行了。 启动第一个实例：1docker run -dit --name tomcat8282 -v /root/:/root/ -p 8282:8080 192.168.8.188:5000/ilanni:160922-03-12 /bin/bash docker exec -it tomcat8282 /bin/bash cat webapps/ilanni/index.html 启动第二个实例：1docker run -dit --name tomcat8383 -v /root/:/root/ -p 8383:8080 192.168.8.188:5000/ilanni:160922-03-12 /bin/bash docker exec -it tomcat8383 /bin/bash cat webapps/ilanni/index.html]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Docker常用命令]]></title>
    <url>%2Fposts%2F7569%2F</url>
    <content type="text"><![CDATA[Docker是基于容器的，直接用带有相应功能的镜像就行，而不必运行Docker容器来自己搭建环境那么麻烦。Docker 中文网 http://www.docker.org.cn 常用操作12docker pull url #下载镜像docker images #查看镜像ID 运行并交互方式进入容器的bash，同时暴露端口把80映射到4000上这条命令是在启动容器之前运行的docker run -i -p 4000:80 -t imagesID /bin/bash docker ps 查看正在运行的容器及容器ID 交互进入正在运行的容器02这条命令是在启动容器之后需要修改配置运行的，变更的数据会被保存下来。容器不会退出后台运行。docker ps 查看正在运行的容器及容器ID，容器名。 12345docker exec -it Nginx01 /bin/sh #Nginx01是容器名或者docker exec -it d48b21a7e439 /bin/sh #d48b21a7e439是CONTAINER ID退出直接用exit命令退出即可。 交互进入正在运行的容器03和上面的docker exec命令语法是一样的；但这条命令有一个缺点，只要这个连接终止，或者使用了exit命令，容器就会退出后台运行123docker attach Nginx01或者docker attach d48b21a7e439 提交当前版本制作新的镜像docker commit xxx(容器ID) new_images_name 查看docker信息查看docker版本docker version 显示docker系统的信息docker info 对image的操作检索、搜索imagedocker search image_name 下载imagedocker pull image_name 列出镜像列表docker images参数： -a, –all=false Show all images; –no-trunc=false Don’t truncate output; -q, –quiet=false Only show numeric IDs 删除一个或者多个镜像docker rmi image_name（第六节是删除容器，注意两者区别）参数:-f, –force=false Force;–no-prune=false Do not delete untagged parents 显示一个镜像的历史docker history image_name参数：–no-trunc=false Don’t truncate output;-q, –quiet=false Only show numeric IDs 启动容器docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。 在容器中运行”echo”命令，输出”hello word”docker run image_name echo &quot;hello word&quot; 交互式进入容器中docker run -i -t image_name /bin/bash 在容器中安装新的程序docker run image_name apt-get install -y app_name Note： Ubuntu在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。 查看容器（ps）列出当前所有正在运行的containerdocker ps 列出所有的containerdocker ps -a 列出最近一次启动的containerdocker ps -l 保存对容器的修改（commit）当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。 保存对容器的修改docker commit ID new_image_name参数： -a, –author=”” Author; -m, –message=”” Commit message Note： image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。 对容器的操作删除所有容器docker rm `docker ps -a -q` （删除的是容器，而不是镜像；注意容器和镜像的区别，一个镜像可以创建多个容器。删除镜像用rmi命令） 删除单个容器参数：docker rm Name/ID参数： -f, –force=false -l, –link=false Remove the specified link and not the underlying container; -v, –volumes=false Remove the volumes associated to the container 停止、启动、杀死一个容器123docker stop Name/ID docker start Name/ID docker kill Name/ID 从一个容器中取日志docker logs Name/ID参数： -f, –follow=false Follow log output; -t, –timestamps=false Show timestamps 列出一个容器里面被改变的文件或者目录docker diff Name/ID（list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的） 显示一个运行的容器里面的进程信息docker top Name/ID 从容器里面拷贝文件/目录到本地一个路径docker cp Name:/container_path to_path或者：docker cp ID:/container_path to_path 重启一个正在运行的容器docker restart Name/ID参数： -t, –time=10 Number of seconds to try to stop for before killing the container, Default=10 附加到一个运行的容器上面docker attach ID参数： –no-stdin=false Do not attach stdin; –sig-proxy=true Proxify all received signal to the process Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。 保存和加载镜像（save、load）当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。 保存镜像到一个tar包docker save image_name -o file_path参数： -o, –output=”” Write to an file 加载一个tar包格式的镜像docker load -i file_path参数： -i, –input=”” Read from a tar archive file A、B机器间拷贝数据机器adocker save image_name &gt; /home/save.tar使用scp将save.tar拷到机器b上，然后：docker load &lt; /home/save.tar 登录registry server（login）登陆registry serverdocker login参数： -e, –email=”” Email; -p, –password=”” Password; -u, –username=”” Username 发布image（push）发布docker镜像docker push new_image_name 根据Dockerfile 构建出一个容器builddocker build -t image_name Dockerfile_path参数： –no-cache=false Do not use cache when building the image -q, –quiet=false Suppress the verbose output generated by the containers –rm=true Remove intermediate containers after a successful build -t, –tag=”” Repository name (and optionally a tag) to be applied to the resulting image in case of success 参考资料：搭建Docker环境:搭建Java Web环境：http://www.open-open.com/lib/view/open1422413794439.htmlDocker搭建私有仓库：http://blog.csdn.net/wangtaoking1/article/details/44180901搭建WordPress站点：https://linux.cn/article-5560-1.html docker常用命令:http://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker安装、管理]]></title>
    <url>%2Fposts%2F41070%2F</url>
    <content type="text"><![CDATA[Docker官网下载：https://www.docker.com/products/overview 官方文档：https://docs.docker.com/ 官方安装文档：https://docs.docker.com/engine/installation/ Centos 7Centos 6的内核版本太低，需要升级内核及整个系统的依赖库，比较复杂，不建议使用。 root用户登录，uname -r确保内核版本大于等于3.10yum update更新系统 加入Docker源12345678tee /etc/yum.repos.d/docker.repo &lt;&lt;-'EOF'[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 安装123yum install docker-engine -ysystemctl enable docker.servicesystemctl start docker Windows下载最新exe安装包进行安装。安装后看能否正常运行Docker，出现闪退，报错等等，先打开virtual虚拟机看虚拟机是否正常，虚拟机报错很可能是3个Windows字体的.dll文件被破解了，下载原版替换，C:\Program Files\Oracle\VirtualBox\drivers\vboxdrv\VBoxDrv.inf文件右键安装，然后重启。 Windows 10以下Boot2docker：https://github.com/boot2docker/windows-installer/releases Toolbox：https://github.com/docker/toolbox/releases Windows 10以上官网下载：https://docs.docker.com/docker-for-windows/ Ubuntu 14 &amp;&amp; Ubuntu 16root用户登录，uname -r确保内核版本大于等于3.10 法一：apt-get install docker docker.io -y 法二：安装最新版1.增加GPG密钥 123apt-get updateapt-get install apt-transport-https ca-certificatesapt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D 2.新增或编辑source列表里的docker.list文件vim /etc/apt/sources.list.d/docker.list 如果不存在就新增,填入下面一个地址。保存退出Trusty 14.04 (LTS) deb https://apt.dockerproject.org/repo ubuntu-trusty mainXenial 16.04 (LTS) deb https://apt.dockerproject.org/repo ubuntu-xenial main 12apt-get purge lxc-docker #清理以前安装过的docker源，没有安装的话，跳过apt-cache policy docker-engine #查看是否有正确的可用版本 3.安装Docker 123456apt-get updateapt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual#从14.04版本以上开始docker推荐安装linux-image-extraapt-get install docker-engineservice docker startdocker run hello-world Mac安装包安装下载最新pkg格式安装包：Boot2Docker-1.3.2.pkg进行安装。https://github.com/boot2docker/osx-installer/releases/latest 或者手动初始化Boot2Docker，打开终端并运行:123boot2docker initboot2docker startexport DOCKER_HOST=tcp://$(boot2docker ip 2&gt;/dev/null):2375 一旦你初始化化好了一个虚拟机，你就能用boot2docker stop和boot2docker start来进行控制。安装好后带有virtualBox虚拟机。 更新 1.下载最新版的Docker for OS X Installer 2.运行安装程序, 更新VirtualBox和Boot2Docker管理工具。 3.更新现有虚拟机，打开终端并运行: 123boot2docker stopboot2docker downloadboot2docker start Brew方式安装1234brew updatebrew install dockerbrew link dockerbrew link boot2docker 当用brew安装某个应用后，但没有成功创建brew link（比如，link的目录已经存在相同的老版本文件导致link创建失败），此时可以将老版本删除，然后再次执行brew link xxx就可以创建link了，之后就可以使用brew安装的新版本了。 注：ls -lh /usr/local/bin/*docker* 就可以看到Docker安装的位置。 Boot2Docker的缺省用户名为docker，密码为tcuser。 运行Docker在终端上跑一个“hello world” 的示例来测试Docker。启动虚拟机然后运行：docker run ubuntu echo hello world这样应该会下载ubuntu镜像并打印hello world。 容器端口跳转最新版的boot2docker建立了一个仅有网络适配器的主机提供可以接入容器的端口。如果你运行一个有公开端口的容器， docker run --rm -i -t -p 80:80 nginx然后你应该能用IP地址接入Nginx服务器: boot2docker ip 显示当前IP这个IP地址可能被VirtualBox启用的DHCP修改。 Boot2Docker管理工具提供了很多命令:./boot2docker [&lt;options&gt;] [&lt;args&gt;] 参数：{help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete|download|version} 用cSphere希云管理DockercSphere希云安装：http://csphere.cn/product/cspherehttp://csphere.cn/hub/csphere 微镜像：http://csphere.cn/hub 教程：http://csphere.cn/training]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库]]></title>
    <url>%2Fposts%2F37198%2F</url>
    <content type="text"><![CDATA[安装、配置源码安装下载源码包：https://dev.mysql.com/downloads/mysql 安装编译工具：1yum install ncurses-devel bison openssl-devel bison-devel libaio libaio-devel gcc gcc-c++ cmake -y 安装脚本这里以mysql-5.5.47.tar.gz为例，指定安装目录是/usr/local/mysql，指定data目录是/usr/local/mysql/data。123456789101112131415161718192021groupadd mysqluseradd -r -g mysql mysqlcd /rootwget http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.47.tar.gz/from/http://mysql.he.net/tar xvf mysql-5.5.47.tar.gzcd mysql-5.5.47/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \-DDEFAULT_CHARSET=utf8 \-DDEFAULT_COLLATION=utf8_general_ci \-DWITH_EXTRA_CHARSETS=all \-DWITH_MYISAM_STORAGE_ENGINE=1 \-DWITH_INNOBASE_STORAGE_ENGINE=1 \-DWITH_MEMORY_STORAGE_ENGINE=1 \-DWITH_READLINE=1 \-DENABLED_LOCAL_INFILE=1 \-DMYSQL_DATADIR=/usr/local/mysql/data \-DMYSQL_USER=mysqlmake -j2 #-j2是指定用2个CPU核进行makemake install 配置1234567891011121314chmod +w /usr/local/mysqlchown -R mysql:mysql /usr/local/mysqlln -s /usr/local/mysql/lib/libmysqlclient.so.16 /usr/lib/libmysqlclient.so.16chown -R mysql:mysql /usr/local/mysql/cd /usr/local/mysql/support-files/cp my-large.cnf /etc/my.cnf #一般只要运行这台命令cp mysql.server /etc/rc.d/init.d/mysqldchmod +x /etc/rc.d/init.d/mysqldvim /etc/rc.d/init.d/mysqld#确保有以下两行basedir=/usr/local/mysqldatadir=/usr/local/mysql/data 开机启动123456# Centos 6chkconfig --add mysqldchkconfig --level 345 mysqld on# Centos 7systemctl enable mysqld 第一次运行设置密码启动数据库后用mysql -u root -p然后直接回车，密码不用输直接回车。然后用以下语句修改密码(只有root用户登录才能看到mysql用户表)，如果无法连接数据库，先停止数据库，再按下面的方法初始化数据库后重新启动数据库。或者尝试：mysql -uroot -S /usr/local/mysql/mysql.sock -p进行登录。12345show databases;use mysql;grant all on *.* to root@'%' identified by 'password';grant all on *.* to mysql@'%' identified by 'password';flush privileges; 修改好后，在第三方客户端登陆，本机命令行登录依然不用密码，要断开连接后重连才会生效。 初始化数据库（用于sock文件丢失无法登陆时）（貌似数据不会丢）12345/usr/local/mysql/scripts/mysql_install_db \--defaults-file=/etc/my.cnf \--basedir=/usr/local/mysql \--datadir=/usr/local/mysql/data \--user=mysql 初始化的MySQL5.7.6+与MySQL5.6.xx不同之处初始化工具不同MySQL5.6.xx使用的是mysql_install_db，MySQL5.7.6+官方推荐使用mysqld –initialize。 初始化数据库不同MySQL5.6.xx初始化之后存在mysql,information_schema,performance_schema,test四个数据库，MySQL5.7.6+初始化之后存在mysql,information_schema,performance_schema,sys四个数据库。 初始化用户不同MySQL5.6.xx初始化之后存在root@localhost,root@’::1’,root@’hostname’,’’@’localhost’,’’@’hostname’五个用户，MySQL5.7.6+初始化之后存在mysql.sys,root@localhost用户 初始化root密码MySQL5.6.xx初始化之后root用户密码为空，MySQL5.7.6+初始化之后会为root@localhost用户生成随机密码。 参考：http://www.jb51.net/article/99965.htmhttp://www.cnblogs.com/qq78292959/archive/2012/11/21/2780917.htmlhttp://blog.csdn.net/daydreamingboy/article/details/8125700 关于my.cnf文件位置默认情况下，MySQL会依次按顺序查找如下几个路径来获取MySQL配置问文件：/etc/my.cnf/etc/mysql/my.cnf/etc/my.cnf/my.cnf/usr/local/mysql/my.cnf~/.my.cnf 关于安全模式/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;慎用安全模式，会清除sock文件，必须重新初始化数据库才能使用 常用操作查看库，表类型（存储引擎）123456show databases;use weixin888;show tables; #只能显示表名，不能得到表类型的信息SHOW TABLE STATUS FROM `weixin888`; #weixin888是库名,显示的（所有表的信息）第二项type即是表的类型describe `rediscache`; #rediscache是表名，就能看到Type的类型SHOW CREATE TABLE `rediscache`; #显示的是表创建时的信息，其中有TYPE或ENGINE一项，指定了表的类型 修改表类型（修改存储引擎）创建时指定存储引擎12345678910CREATE TABLE `rediscache` (`id` int(11) NOT NULL auto_increment,`sender` varchar(255) default NULL,`receiver` varchar(255) default NULL,`content` longtext,`is_read` char(1) default 'N',`send_time` datetime default NULL,`del_flag` tinyint(4) default '0',PRIMARY KEY (`id`)) ENGINE=MYISAM; 创建后修改存储引擎1ALTER TABLE `rediscache` ENGINE = INNODB; #rediscache是表名，修改存储引擎为INNODB 修改字段长度123456describe `rediscache`; #rediscache是表名，就能看到Type的类型SHOW CREATE TABLE `rediscache`; #能看到存储引擎格式：alter table 表名 modify column 字段名 类型;alter table rediscache modify column data varchar(500);alter table rediscache modify column data longtext; mysql max_allowed_packet 设置过小导致记录写入失败mysql根据配置文件会限制server接受的数据包大小。有时候大的插入和更新会受max_allowed_packet 参数限制，导致写入或者更新失败。 查看目前配置：show VARIABLES like &#39;%max_allowed_packet%&#39;;看到的是以B为单位，除以1024转换为KB，再除以1024装换为MB。修改配置:my.cnf（windows下是my.ini ）；把max_allowed_packet = 20M 改为你需要的值。找不到配置文件可以用：mysql --help | grep my.cnf 法二：在mysql命令行中修改 在mysql 命令行中运行：set global max_allowed_packet = 20*1024*1024(这里改为20M)然后退出命令行，重启mysql服务，再进入。 show VARIABLES like &#39;%max_allowed_packet%&#39;;查看下max_allowed_packet是否编辑成功 max_connection 关于最大连接数1MySQL&gt; show status like '%connect%'; connections:试图连接到MySQL服务器的连接数（不管成功与否）。max_used_connections:每个数据库用户的最大连接数。threads_connected:当前的连接数。 1mysql&gt; show variables like '%connect%'; max_connections:数据库服务器最大连接数。 1mysql&gt; show processlist; 显示当前正在执行的MySQL连接。 修改连接数直接修改配置文件，加上对应的语句就行，如：在配置文件（my.cnf或my.ini）在最下面，填加一句：max_connections=32000然后，用命令重启：/etc/init.d/mysqld restart虽然这里写的32000，实际MySQL服务器允许的最大连接数16384；添加了最大允许连接数，对系统消耗增加不大。 关于设置及优化，参考：https://yq.aliyun.com/articles/50273 备份（导出）、恢复数据库备份一个数据库通用方法：mysqldump -u user_name -p db_name &gt; file_name.sql或mysqldump db_name &gt; file_name.sql -u root -p windows：进到MySQL的安装目录（bin下），运行：1mysqldump --opt -h192.168.0.156 -uusername -ppassword --skip-lock-tables database_name&gt;database.sql IP改为localhost也行。 导出数据库中的一个表mysqldump -u user_name -p db_name table_name&gt; file_name.sql 导入恢复123source /root/mydb123.sql#mysql -u用户名 -p 数据库名 &lt; 数据库名.sqlmysql -uuser_name -p mydb123 &lt; /root/mydb123.sql 密码新安装默认密码为空mysql -u root 即可进入，不要mysql -u root -p进不去的大于5.7的版本默认有随机密码，执行cat /var/log/mysqld.log | grep password | grep &#39;root@localhost&#39; | awk -F &#39;root@localhost: &#39; &#39;{print $2}&#39;查看随机生成的密码。 设置密码 1.用root 进入mysql后mysql&gt;set password =password(&#39;你的密码&#39;);mysql&gt;flush privileges; 2.使用GRANT语句mysql&gt;grant all on *.* to &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的密码&#39;with grant option ;mysql&gt;flush privileges; 3.进入mysql库修改user表mysql&gt;use mysql;mysql&gt;update user set password=&#39;你的密码&#39; where user=&#39;root&#39;;mysql&gt;flush privileges; 设置某个数据库的独立密码123456mysql -u root -p&gt; （输入密码）&gt; create user '用户名'@'localhost' identified by '密码';&gt; grant all privileges on 库名.* to '用户名'@'localhost';&gt; flush privileges;&gt; exit; 修改Mysql密码 方法一：使用phpmyadmin，直接修改Mysql库的user 表。或者使用Navicat for Mysql 直接修改连接属性。【据说可以用直接修改user表文件的方法：法一：关闭MySQL，Windows下打开Mysql\data\mysql，有三个文件user.frm,user.MYD,user.MYI找个知道密码的MySQL，替换相应的这三个文件，如果user表结构没改过，一般也没人去改，替换user.MYD就可以了。法二：也可以直接编辑user.MYD，找个十六进制编辑器，UltraEdit就有这个功能。关闭MySQL，打开user.MYD。将用户名root后面的八个字符改为565491d704013245，新密码就是123456。或者将它们对应的十六进制数字，（左边那里，一个字符对应两个数字），改为 00 02 02 02 02 02 02 02,这就是空密码，在编辑器右边看到的都是星号*，看起来很象小数点。重开MySQL，输入root和你的新密码。】 方法二：使用mysqladmincd到mysql的bin文件夹，然后执行如下D:\Mysql\bin&gt;mysqladmin -u root -p password 新密码Enter password:(在此输入原密码)格式：mysqladmin -u用户名 -p旧密码 password 新密码。 忘记密码 1.用root或者运行mysqld的用户登录系统； 2．利用kill命令结束掉mysqld的进程； 3．使用–skip-grant-tables参数启动MySQL Server shell&gt;mysqld_safe --skip-grant-tables &amp; UPDATE user SET password=PASSWORD(“new password”) WHERE user=’root’; 4.为root@localhost设置新密码 shell&gt;mysqladmin -u root flush-privileges password &quot;newpassword&quot; 5．重启MySQL Server MySQL特性MySQL 数据类型下面的可使用的各种 MySQL 数据类型： 数值类型 描述 int(size) 仅支持整数。在 size 参数中规定数字的最大值。 smallint(size) 仅支持整数。在 size 参数中规定数字的最大值。 tinyint(size) 仅支持整数。在 size 参数中规定数字的最大值。 mediumint(size) 仅支持整数。在 size 参数中规定数字的最大值。 bigint(size) 仅支持整数。在 size 参数中规定数字的最大值。 — — decimal(size,d) 支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。 double(size,d) 支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。 float(size,d) 支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。 文本数据类型 描述 char(size) 支持固定长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定固定长度。 varchar(size) 支持可变长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定最大长度。 tinytext 支持可变长度的字符串，最大长度是 255 个字符。 text blob 支持可变长度的字符串，最大长度是 65535 个字符。 mediumtext mediumblob 支持可变长度的字符串，最大长度是 16777215 个字符。 longtext longblob 支持可变长度的字符串，最大长度是 4294967295 个字符。 日期数据类型 描述 date(yyyy-mm-dd) 支持日期或时间 datetime(yyyy-mm-dd hh:mm:ss) 支持日期或时间 timestamp(yyyymmddhhmmss) 支持日期或时间 time(hh:mm:ss) 支持日期或时间 杂项数据类型 描述 enum(value1,value2,ect) ENUM 是 ENUMERATED 列表的缩写。可以在括号中存放最多 65535 个值。 set SET 与 ENUM 相似。但是，SET 可拥有最多 64 个列表项目，并可存放不止一个 choice 主键和自动递增字段每个表都应有一个主键字段。主键用于对表中的行进行唯一标识。每个主键值在表中必须是唯一的。此外，主键字段不能为空，这是由于数据库引擎需要一个值来对记录进行定位。主键字段永远要被编入索引。这条规则没有例外。你必须对主键字段进行索引，这样数据库引擎才能快速定位给予该键值的行。下面的例子把 personID 字段设置为主键字段。主键字段通常是 ID 号，且通常使用 AUTO_INCREMENT 设置。AUTO_INCREMENT 会在新记录被添加时逐一增加该字段的值。要确保主键字段不为空，我们必须向该字段添加 NOT NULL 设置。例：12345678910$sql = &quot;CREATE TABLE Persons (personID int NOT NULL AUTO_INCREMENT, PRIMARY KEY(personID),FirstName varchar(15),LastName varchar(15),Age int)&quot;;mysql_query($sql,$con); 增创建数据库123mysql&gt; CREATE DATABASE 库名;mysql&gt; USE 库名;mysql&gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1)); 创建表123456789use demo;create table pet( name varchar(20), #名字 owner varchar(20), #主人 species varchar(20), #种类 sex char(1), #性别 birth date, #出生日期 death date #死亡日期) 为了验证你的表是按你期望的方式创建，使用一个DESCRIBE语句： 创建表(复杂形式)：创建customer表：123456789create table customers( id int not null auto_increment, name char(20) not null, address char(50) null, city char(50) null, age int not null, love char(50) not null default 'No habbit', primary key(id))engine=InnoDB; SELECT last_insert_id();这个函数可以获得返回最后一个auto_increment值。默认值为：default ‘No habbit’,引擎类型，多为engine = InnoDB，如果省略了engine=语句，则使用默认的引擎(MyISAM) 删删除数据库mysql&gt; DROP DATABASE 库名; 删除数据表mysql&gt; DROP TABLE 表名； 将表中记录清空mysql&gt; DELETE FROM 表名; 删除数据库中的数据DELETE FROM 语句用于从数据库表中删除记录。语法12DELETE FROM table_nameWHERE column_name = some_value 注释：SQL 对大小写不敏感。DELETE FROM 与 delete from 等效。为了让 PHP 执行上面的语句，我们必须使用 mysql_query( 函数。该函数用于向 SQL 连接发送查询和命令。例子稍早时，我们在本教程中创建了一个名为 “Persons” 的表。它看起来类似这样： FirstName LastName Age Peter Griffin 35 Glenn Quagmire 33 下面的例子删除 “Persons” 表中所有 LastName=’Griffin’ 的记录：12345678910111213&lt;?php$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125;mysql_select_db("my_db", $con);mysql_query("DELETE FROM Persons WHERE LastName='Griffin'");mysql_close($con);?&gt; 在这次删除之后，表是这样的： FirstName LastName Age Glenn Quagmire 33 改修改UPDATE 语句用于修改数据库表中的数据。语法1234mysqlUPDATE table_nameSET column_name = new_valueWHERE column_name = some_value 注释：SQL 对大小写不敏感。UPDATE 与 update 等效。为了让 PHP 执行上面的语句，我们必须使用 mysql_query( 函数。该函数用于向 SQL 连接发送查询和命令。例子稍早时，我们在本教程中创建了一个名为 “Persons” 的表。它看起来类似这样： FirstName LastName Age Peter Griffin 35 Glenn Quagmire 33 下面的例子更新 “Persons” 表的一些数据：1234567891011121314&lt;?php$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125;mysql_select_db("my_db", $con);mysql_query("UPDATE Persons SET Age = '36'WHERE FirstName = 'Peter' AND LastName = 'Griffin'");mysql_close($con);?&gt; 在这次更新后，”Persons” 表格是这样的： FirstName LastName Age Peter Griffin 36 Glenn Quagmire 33 插入12INSERT INTO table_nameVALUES (value1, value2,....) 您还可以规定希望在其中插入数据的列：12INSERT INTO table_name (column1, column2,...)VALUES (value1, value2,....) 注释：SQL 语句对大小写不敏感。INSERT INTO 与 insert into 相同。 为了让 PHP 执行该语句，我们必须使用 mysql_query() 函数。该函数用于向 MySQL 连接发送查询或命令。例子在前面的章节，我们创建了一个名为 “Persons” 的表，有三个列：”Firstname”, “Lastname” 以及 “Age”。我们将在本例中使用同样的表。下面的例子向 “Persons” 表添加了两个新记录：1234567891011121314151617&lt;?php$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125;mysql_select_db("my_db", $con);mysql_query("INSERT INTO Persons (FirstName, LastName, Age) VALUES ('Peter', 'Griffin', '35')");mysql_query("INSERT INTO Persons (FirstName, LastName, Age) VALUES ('Glenn', 'Quagmire', '33')");mysql_close($con);?&gt; 更改表结构 增加一列： alter table pet add des char(100) null; 删除： alter table pet drop column des; 重命名表： rename table pet to animals; 添加id字段：12alter table pet add id int not nullprimary key auto_increment first; 详见：http://www.cnblogs.com/beginman/p/3249472.html 把来自表单的数据插入数据库现在，我们创建一个 HTML 表单，这个表单可把新记录插入 “Persons” 表。这是这个 HTML 表单：123456789101112&lt;html&gt;&lt;body&gt;&lt;form action="insert.php" method="post"&gt;Firstname: &lt;input type="text" name="firstname" /&gt;Lastname: &lt;input type="text" name="lastname" /&gt;Age: &lt;input type="text" name="age" /&gt;&lt;input type="submit" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 当用户点击上例中 HTML 表单中的提交按钮时，表单数据被发送到 “insert.php”。”insert.php” 文件连接数据库，并通过 $_POST 变量从表单取回值。然后，mysql_query() 函数执行 INSERT INTO 语句，一条新的记录会添加到数据库表中。下面是 “insert.php” 页面的代码：123456789101112131415161718192021&lt;?php$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125;mysql_select_db("my_db", $con);$sql="INSERT INTO Persons (FirstName, LastName, Age)VALUES('$_POST[firstname]','$_POST[lastname]','$_POST[age]')";if (!mysql_query($sql,$con)) &#123; die('Error: ' . mysql_error()); &#125;echo "1 record added";mysql_close($con)?&gt; 查查看数据库SHOW DATABASES; 查看表12USE blog;SHOW TABLES; 查看表中的列、类型123SHOW COLUMNS FROM auth_user; 或DESCRIBE auth_user; describe 表名 是 show columns from 表名 的一种快捷方式。 查询SELECT 语句用于从数据库中选取数据。语法SELECT column_name(s) FROM table_name注释：SQL 语句对大小写不敏感。SELECT 与 select 等效。为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。该函数用于向 MySQL 发送查询或命令。例子下面的例子选取存储在 “Persons” 表中的所有数据（* 字符选取表中所有数据）：12345678910111213141516171819&lt;?php$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125;mysql_select_db("my_db", $con);$result = mysql_query("SELECT * FROM Persons");while($row = mysql_fetch_array($result)) &#123; echo $row['FirstName'] . " " . $row['LastName']; echo "&lt;br /&gt;"; &#125;mysql_close($con);?&gt; 上面这个例子在 $result变量中存放由 mysql_query() 函数返回的数据。接下来，我们使用 mysql_fetch_array()函数以数组的形式从记录集返回第一行。每个随后对 mysql_fetch_array() 函数的调用都会返回记录集中的下一行。 while loop语句会循环记录集中的所有记录。为了输出每行的值，我们使用了 PHP 的 $row变量( $row[&#39;FirstName&#39;] 和 $row[&#39;LastName&#39;])。以上代码的输出：Peter GriffinGlenn Quagmire 其他情况在 HTML 表格中显示结果下面的例子选取的数据与上面的例子相同，但是将把数据显示在一个 HTML 表格中：12345678910111213141516171819202122232425262728&lt;?php$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125;mysql_select_db("my_db", $con);$result = mysql_query("SELECT * FROM Persons");echo "&lt;table border='1'&gt;&lt;tr&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;";while($row = mysql_fetch_array($result)) &#123; echo "&lt;tr&gt;"; echo "&lt;td&gt;" . $row['FirstName'] . "&lt;/td&gt;"; echo "&lt;td&gt;" . $row['LastName'] . "&lt;/td&gt;"; echo "&lt;/tr&gt;"; &#125;echo "&lt;/table&gt;";mysql_close($con);?&gt; 以上代码的输出： FirstName LastName Peter Griffin Glenn Quagmire 连接数据库失败看提示，PHP执行时看错误，是用mysql还是mysqli语法mysql_connect(servername,username,password); 参数描述servername可选。规定要连接的服务器。默认是 “localhost:3306”。username可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。password可选。规定登录所用的密码。默认是 “”。 语法CREATE DATABASE database_name 参数 描述 servername 可选。规定要连接的服务器。默认是 “localhost:3306”。 username 可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。 passwd 可选。规定登录所用的密码。默认是 “”。 为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。此函数用于向 MySQL 连接发送查询或命令。连接：例子:12345678php&lt;?php//在一个变量中 ($con) 存放了在脚本中供稍后使用的连接。如果连接失败，将执行 "die" 部分：$con = mysql_connect("localhost","peter","abc123");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125; 创建：123456789101112131415161718192021222324252627mysql// Create database//创建了一个名为 "my_db" 的数据库：if (mysql_query("CREATE DATABASE my_db",$con)) &#123; echo "Database created"; &#125;else &#123; echo "Error creating database: " . mysql_error(); &#125;// Create table in my_db database//创建一个名为 "Persons" 的表，此表有三列。列名是 "FirstName", "LastName" 以及 "Age"：//重要事项：在创建表之前，必须首先选择数据库。通过 mysql_select_db() 函数选取数据库。//注释：当您创建 varchar 类型的数据库字段时，必须规定该字段的最大长度，例如：varchar(15)。mysql_select_db("my_db", $con);$sql = "CREATE TABLE Persons (FirstName varchar(15),LastName varchar(15),Age int)";mysql_query($sql,$con);mysql_close($con); //提前关闭连接，请使用 mysql_close() 函数,不加此句则脚本结束后关闭。?&gt;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KVM虚拟化]]></title>
    <url>%2Fposts%2F7260%2F</url>
    <content type="text"><![CDATA[KVM特点KVM必须在具备Intel VT或AMD-V功能的x86平台上运行。KVM包含一个为处理器提供底层虚拟化，可加载的核心模块kvm.ko（kvm-intel.ko或kvm-AMD.ko）。使用一个经过修改的QEMU（qemu-kvm），作为虚拟机上层控制和界面。 由于KVM仅是一个简单的虚拟化模块，所以它的内存管理没有自我实现，需借助于Linux内核实现内存管理。KVM能够使用Linux所支持的任何存储，在驱动程序的实现上，直接借助于Linux内核来驱动任何硬件。在性能上KVM继承了Linux很好的性能和伸缩性，在虚拟化性能方面，已经达到非虚拟化原生环境95%左右的性能（官方数据）。KVM拓展性也非常好，客户机和宿主机都可以支持非常多的CPU数量和非常大的内存，可以过载使用CPU和内存，还可借助KSM技术实现对内存的过量使用，且保证性能依旧非常不错。KVM的架构非常简单，就是内核的一个模块，用户空间通过qemu模拟硬件提供给虚拟机使用，一个虚拟机就是一个普通的Linux进程，通过对这个进程的管理，就可以完成对虚拟机的管理。 KVM虚拟化是通过内核来控制虚机运行的，在Linux中，内核版本在2.6之后的都已经集成了KVM内核驱动，只需要安装我们所需要的管理接口和管理软件就可以正常使用了。 安装检测12345678egrep --color '(vmx|svm)' /proc/cpuinfo#如果含有vmx或者svm字样，则表示硬件支持虚拟化，vmx代表Intel，svm代表AMD#在虚拟机中运行的Linux或是已经经过虚拟化运行的Linux不支持第二次虚拟化#装载模块，在某些高度精简和定制的系统中（如：群晖）执行以下命令可能没有什么反应，但是不影响使用的。modprobe kvmmodprobe kvm_intellsmod | grep kvm 安装 KVM根据管理软件的不同可以分为两种，一种是原生管理软件qemu-kvm，另一种是Redhat开源项目Libvirt，virt-manager；第一种是完全命令行来管理；第二种是用 python编写的虚拟机管理图形界面，管理方式很像VM。 KVM的原生管理软件qemu-kvm12yum install qemu-kvm qemu-kvm-tools -yln -s /usr/libexec/qemu-kvm /usr/sbin/ qemu-kvm的标准选项qemu-kvm的标准选项主要涉及指定主机类型、CPU模式、NUMA、软驱设备、光驱设备及硬件设备等等。1234567891011121314151617181920212223242526272829-name name：设定虚拟机名称；-M machine：指定要模拟的主机类型，如Standard PC、ISA-only PC或Intel-Mac等-m megs：设定虚拟机的RAM大小；-cpu model：设定CPU模型，如coreduo、qemu64等-smp n[,cores=cores][,threads=threads][,sockets=sockets][,maxcpus=maxcpus]：设定模拟的SMP架构中CPU的个数等、每个CPU的核心数及CPU的socket数目等；PC机上最多可以模拟255颗CPU；maxcpus用于指定热插入的CPU个数上限；-numa opts：指定模拟多节点的numa设备；-fda file：-fdb file：使用指定文件(file)作为软盘镜像，file为/dev/fd0表示使用物理软驱；-hda file-hdb file-hdc file-hdd file：使用指定file作为硬盘镜像；-cdrom file：使用指定file作为CD-ROM镜像，需要注意的是-cdrom和-hdc不能同时使用；将file指定为/dev/cdrom可以直接使用物理光驱；-drive option[,option[,option[,...]]]：定义一个硬盘设备；可用子选项有很多。 file=/path/to/somefile：硬件映像文件路径； if=interface：指定硬盘设备所连接的接口类型，即控制器类型，如ide、scsi、sd、mtd、floppy、pflash及virtio等； index=index：设定同一种控制器类型中不同设备的索引号，即标识号； media=media：定义介质类型为硬盘(disk)还是光盘(cdrom)； snapshot=snapshot：指定当前硬盘设备是否支持快照功能：on或off； cache=cache：定义如何使用物理机缓存来访问块数据，其可用值有none、writeback、unsafe和writethrough四个； format=format：指定映像文件的格式，具体格式可参见qemu-img命令；-boot [order=drives][,once=drives][,menu=on|off]：定义启动设备的引导次序，每种设备使用一个字符表示；不同的架构所支持的设备及其表示字符不尽相同，在x86 PC架构上，a、b表示软驱、c表示第一块硬盘，d表示第一个光驱设备，n-p表示网络适配器；默认为硬盘设备；-boot order=dc,once=d 网络选项123456789101112131415161718-net nic[,vlan=n][,macaddr=mac][,model=type][,name=name][,addr=addr][,vectors=v]：创建一个新的网卡设备并连接至vlan n中；macaddr用于为其指定MAC地址，name用于指定一个在监控时显示的网上设备名称；emu可以模拟多个类型的网卡设备-net tap[,vlan=n][,name=name][,fd=h][,ifname=name][,script=file][,downscript=dfile]：通过物理机的TAP网络接口连接至vlan n中，使用script=file指定的脚本(默认为/etc/qemu-ifup)来配置当前网络接口，并使用downscript=file指定的脚本(默认为/etc/qemu-ifdown)来撤消接口配置；使用script=no和downscript=no可分别用来禁止执行脚本；-net user[,option][,option][,...]：在用户模式配置网络栈，其不依赖于管理权限；有效选项有： vlan=n：连接至vlan n，默认n=0； name=name：指定接口的显示名称，常用于监控模式中； net=addr[/mask]：设定GuestOS可见的IP网络，掩码可选，默认为10.0.2.0/8； host=addr：指定GuestOS中看到的物理机的IP地址，默认为指定网络中的第二个，即x.x.x.2； dhcpstart=addr：指定DHCP服务地址池中16个地址的起始IP，默认为第16个至第31个，即x.x.x.16-x.x.x.31； dns=addr：指定GuestOS可见的dns服务器地址；默认为GuestOS网络中的第三个地址，即x.x.x.3； tftp=dir：激活内置的tftp服务器，并使用指定的dir作为tftp服务器的默认根目录； bootfile=file：BOOTP文件名称，用于实现网络引导GuestOS；如：qemu -hda linux.img -bootn -net user,tftp=/tftpserver/pub,bootfile=/pxelinux.0 通过qemu-kvm安装系统创建磁盘映像文件qcow2格式性能低一点，但是支持快照等高级操作，空间用多少分配多少；ram格式性能高一点，不支持高级操作，分配多少空间就立刻使用多少空间。12qemu-img create -f qcow2 -o size=50G,preallocation="metadata" /kvm/images/centos6.qcow2ll -h /kvm/images/ 配置桥设备新建桥接网卡配置文件：vim /etc/sysconfig/network-scripts/ifcfg-br0123456789DEVICE=br0TYPE=BridgeONBOOT=yesNM_CONTROLLED=noBOOTPROTO=noneIPADDR=172.16.0.124PREFIX=16GATEWAY=172.16.0.1DNS1=172.16.0.1 修改要桥接的网卡配置文件：·vim /etc/sysconfig/network-scripts/ifcfg-eth0123456DEVICE=eth0TYPE=EthernetONBOOT=yesNM_CONTROLLED=noBOOTPROTO=noneBRIDGE=br0 #这一行是新加的 重启网络服务：service network restart 加入网卡设备，则需要使系统启动后桥接网络到br0上，我们通过脚本实现启动和停止系统时桥接网络和删除桥接的自动执行操作 开启桥接脚本：mkdir /kvm/script &amp;&amp; vim /kvm/script/qemu-ifup12345678910111213#!/bin/bashswitch=br0 if [ -n "$1" ]; then ip link set $1 up sleep 1 brctl addif $switch $1 exit 0else echo "Error: No Interface." exit 1fi 关闭桥接脚本：vim /kvm/script/qemu-ifdown123456789101112#!/bin/bashswitch=br0 if [ -n "$1" ];then brctl delif $switch $1 ip link set $1 down exit 0else echo "Error: No Interface." exit 1fi 赋予执行权限：chmod -R +x /kvm/script/ 安装虚拟机12345678910111213yum install tigervnc -yqemu-kvm -name "centos6.8" \-m 512 -smp 2 \-drive file=/kvm/images/centos6.qcow2,media=disk,format=qcow2 \-drive file=CentOS-6.8-x86_64-bin-DVD1.iso,media=cdrom \-net nic -net tap,ifname=vnet0,script=/kvm/script/qemu-ifup,downscript=/kvm/script/qemu-ifdown \-boot order=dc,once=d#然后应该会看到下面这个提示，VNC映射到了本机（宿主机）的5900端口VNC server running on `::1:5900'#启动VNCvncviewer :5900 现在就可以安装系统了，我们看一下脚本有没有生效ifconfig vnet0 基于Libvirt实现虚拟机管理Libvirt是一个通用的API，可以提供给KVM，EXSI，Xen等调用。 安装安装包介绍：1234567891011libvirt-client # libvirt的客户端,最重要的功能之一就是在宿主机关机时可以通知虚拟机也关机 gpxe-roms-qemu # 虚拟机 iPXE 的启动固件,支持虚拟机从网络启动libvirt-python # libvirt 为 python 提供的 APIpython-virtinst # 一套 Python 的虚拟机安装工具qemu-kvm # KVM 在用户空间运行的程序libvirt # 用于管理虚拟机,它提供了一套虚拟机操作 APIvirt-manager # 基于 libvirt 的图像化虚拟机管理软件 virt-viewer # 显示虚拟机的控制台 Consolevirt-top # 类似于 top 命令,查看虚拟机的资源使用情况virt-what # 在虚拟机内部执行,查看虚拟机运行的虚拟化平台qemu-img # 用于操作虚拟机硬盘镜像的创建、查看和格式转化 根据需要进行安装1234567yum install -y kvm python-virtinst libvirt bridge-utils virt-manager gemu-kvm-tools virt-viewer virt-v2v libguestfs-tools#启动服务service libvirtd start#使用libvirt创建网桥无需再手动修改配置文件，一条命令即可解决virsh iface-bridge eth0 br0 命令行管理virt-install是一个命令行工具，它能够为KVM、Xen或其它支持libvrit API的hypervisor创建虚拟机并完成GuestOS安装；此外，它能够基于串行控制台、VNC或SDL支持文本或图形安装界面。12345678910111213141516171819202122232425262728293031323334353637383940414243444546#一般选项：指定虚拟机的名称、内存大小、VCPU个数及特性等-n NAME, --name=NAME：虚拟机名称，需全局惟一；-r MEMORY, --ram=MEMORY：虚拟机内在大小，单位为MB；--vcpus=VCPUS[,maxvcpus=MAX][,sockets=#][,cores=#][,threads=#]：VCPU个数及相关配置；--cpu=CPU：CPU模式及特性，如coreduo等；可以使用qemu-kvm -cpu ?来获取支持的CPU模式；安装方法：指定安装方法、GuestOS类型等；-c CDROM, --cdrom=CDROM：光盘安装介质；-l LOCATION, --location=LOCATION：安装源URL，支持FTP、HTTP及NFS等，如ftp://172.16.0.1/pub；--pxe：基于PXE完成安装；--livecd: 把光盘当作LiveCD；--os-type=DISTRO_TYPE：操作系统类型，如linux、unix或windows等；--os-variant=DISTRO_VARIANT：某类型操作系统的变体，如rhel5、fedora8等；-x EXTRA, --extra-args=EXTRA：根据--location指定的方式安装GuestOS时，用于传递给内核的额外选项，例如指定kickstart文件的位置，--extra-args "ks=http://172.16.0.1/class.cfg"--boot=BOOTOPTS：指定安装过程完成后的配置选项，如指定引导设备次序、使用指定的而非安装的kernel/initrd来引导系统启动等 ；例如：--boot cdrom,hd,network：指定引导次序；--boot kernel=KERNEL,initrd=INITRD,kernel_args=”console=/dev/ttyS0”：指定启动系统的内核及initrd文件；#存储配置：指定存储类型、位置及属性等；--disk=DISKOPTS：指定存储设备及其属性；格式为--disk /some/storage/path,opt1=val1，opt2=val2等；常用的选项有： device：设备类型，如cdrom、disk或floppy等，默认为disk； bus：磁盘总结类型，其值可以为ide、scsi、usb、virtio或xen； perms：访问权限，如rw、ro或sh（共享的可读写），默认为rw； size：新建磁盘映像的大小，单位为GB； cache：缓存模型，其值有none、writethrouth（缓存读）及writeback（缓存读写）； format：磁盘映像格式，如raw、qcow2、vmdk等； sparse：磁盘映像使用稀疏格式，即不立即分配指定大小的空间； --nodisks：不使用本地磁盘，在LiveCD模式中常用；#网络配置：指定网络接口的网络类型及接口属性如MAC地址、驱动模式等；-w NETWORK, --network=NETWORK,opt1=val1,opt2=val2：将虚拟机连入宿主机的网络中，其中NETWORK可以为： bridge=BRIDGE：连接至名为“BRIDEG”的桥设备； network=NAME：连接至名为“NAME”的网络；其它常用的选项还有： model：GuestOS中看到的网络设备型号，如e1000、rtl8139或virtio等； mac：固定的MAC地址；省略此选项时将使用随机地址--nonetworks：虚拟机不使用网络功能；#其它：--autostart：指定虚拟机是否在物理启动后自动启动；--print-xml：如果虚拟机不需要安装过程(--import、--boot)，则显示生成的XML而不是创建此虚拟机；默认情况下，此选项仍会创建磁盘映像；--force：禁止命令进入交互式模式，如果有需要回答yes或no选项，则自动回答为yes；--dry-run：执行创建虚拟机的整个过程，但不真正创建虚拟机、改变主机上的设备配置信息及将其创建的需求通知给libvirt；-d, --debug：显示debug信息； 如果只有光盘，没有ISO文件，那么可以后台制作iso文件，如果下载了ISO文件，可以跳过这一步。nohup cp /dev/cdrom /data/iso/name.iso &amp; 安装iso文件1virt-install --name=centos6 --ram 1024 --vcpus=1 --disk path=/data/kvm/centos6.img,size=20,bus=virtio --accelerate --cdrom /data/iso/name.iso --vnc --vncport=5910 --vnclisten=0.0.0.0 --network bridge=be0,model=virtio --no-acpi --noautoconsole 或者(参数缩写)1234virt-install -n "centos6" \--vcpus=2 -r 512 -c /data/iso/name.iso \--disk path=/kvm/images/centos6.8.qcow2,bus=virtio,size=50,sparse \--network bridge=br0,model=virtio --force virt-manager图形界面如果iso文件已复制到kvm指定的镜像目录里，则直接启动安装就行。若在其他地方，当然也可以采用网络安装方式。这里把宿主机的光驱挂到web服务器上。123456mount /dev/cdrom /media/cdrom/ln -s /media/cdrom/ /var/www/html/centos6service httpd restart#启动virt-manager]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发相关网页链接]]></title>
    <url>%2Fposts%2F23807%2F</url>
    <content type="text"><![CDATA[基于HTML5的APPhttp://www.wex5.com/ 微信 微信小程序 (应用号) 微信 web 开发者工具破解版 http://www.diycode.cc/topics/308? 微信小程序 https://git.oschina.net/codebean/wechat-demo?from=20160925 前端bootstrap前端框架：http://www.runoob.com/bootstrap/bootstrap-tutorial.html]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>网页链接更新页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器入侵肉鸡发包]]></title>
    <url>%2Fposts%2F22486%2F</url>
    <content type="text"><![CDATA[安装工具：yum install ifstat nload iptraf sysstat 大多数是因为PHP-ddos木马原因导致发包 watch ifconfigwatch ifconfig 查看数据包新增情况 ifstatifstat 查看网卡流量 eth0 eth1 KB/s in KB/s out KB/s in KB/s out 407.34 154.99 134.96 324.29 274.08 191.48 210.72 248.32 240.20 192.91 257.22 179.06 136.48 236.72 203.89 179.84 nloadnload 以流量图显示 iptrafiptraf 很直观的工具 #sarsar -n DEV 1 4 查看4次数据 netstatnetstat -tu -c 查看发包的端口 lsof用 lsof -i :39733 查看端口的进程，Kill就可以了 NetHogsNetHogs查看网络使用情况123456wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpmrpm -Uvh epel-release-6-8.noarch.rpmyum clean allyum makecacheyum install nethogs -ynethogs 下图显示各进程当前网络使用情况： 按“m”键可以切换到统计视图，显示各进程总的网络使用情况 使用帮助：nethogs --help usage: nethogs [-V] [-b] [-d seconds] [-t] [-p] [device [device [device ...]]] -V : 显示版本信息，注意是大写字母V. -d : 延迟更新刷新速率，以秒为单位。默认值为 1. -t : 跟踪模式. -b : bug 狩猎模式 — — 意味着跟踪模式. -p : 混合模式（不推荐）. 设备 : 要监视的设备名称. 默认为 eth0 当 nethogs 运行时, 按: q: 退出 m: 总数和当前使用情况模式之间切换 找到大量发包的进程，之后kill掉，再排查下这个进程是什么程序，文件路径在哪里，删除掉异常的文件。 一篇博客的解决办法从服务器上使用命令sar -n DEV 1 4，确实出现大量发包的问题，（下边是正常的，异常的情况eth0txpck/s 10000左右了） 先进行限速或者拔掉网线：开始之前，先要清除 eth0所有队列规则tc qdisc del dev eth0 root 2&gt; /dev/null &gt; /dev/null 1) 定义最顶层(根)队列规则，并指定 default 类别编号12tc qdisc add dev eth0 root handle 1: htb default 20tc class add dev eth0 parent 1: classid 1:20 htb rate 2000kbit （1KB/s = 8KBit/s） TC命令格式：12345tc qdisc [ add | change | replace | link ] dev DEV [ parent qdisc-id | root ] [ handle qdisc-id ] qdisc [ qdisc specific parameters ]tc class [ add | change | replace ] dev DEV parent qdisc-id [ classid class-id ] qdisc [ qdisc specific parameters ]tc filter [ add | change | replace ] dev DEV [ parent qdisc-id | root ] protocol protocol prio priority filtertype [ filtertype specific parameters ] flowid flow-id 显示12tc [-s | -d ] qdisc show [ dev DEV ]tc [-s | -d ] class show dev DEV tc filter show dev DEV 查看TC的状态12tc -s -d qdisc show dev eth0tc -s -d class show dev eth0 删除tc规则 tc qdisc del dev eth0 root 查看状态：top CPU和MEM都正常，看不出异常的进程。 12yum install -y tcpdumptcpdump -nn 找到大量的IP地址 本机（192.168.35.145）和主机114.114.110.110之间的数据tcpdump -n -i eth0 host 192.168.35.145 and 114.114.110.110 还有截取全部进入服务器的数据可以使用以下的格式tcpdump -n -i eth0 dst 192.168.35.145 或者服务器有多个IP 可以使用参数tcpdump -n -i eth0 dst 192.168.35.145 or 192.168.35.155 我们抓取全部进入服务器的TCP数据包使用以下的格式，大家可以参考下tcpdump -n -i eth0 dst 192.168.35.145 or 192.168.35.155 and tcp 从本机出去的数据包12tcpdump -n -i eth0 src 192.168.35.145 or 192.168.35.155tcpdump -n -i eth0 src 192.168.35.145 or 192.168.35.155 and port ! 22 and tcp 或者可以条件可以是or 和 and 配合使用即可筛选出更好的结果。 可以将异常IP加入到/etc/hosts.deny中，或者防火墙设置下]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>服务器入侵肉鸡发包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LVM磁盘管理]]></title>
    <url>%2Fposts%2F13541%2F</url>
    <content type="text"><![CDATA[动态扩容LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语： 物理存储介质（The physical media）：这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元。 物理卷（physical volume）：物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。 卷组（Volume Group）：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。 逻辑卷（logical volume）：LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。 PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。 LE（logical extent）：逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。 简单来说就是： PV:是物理的磁盘分区 VG:LVM中的物理的磁盘分区，也就是PV，必须加入VG，可以将VG理解为一个仓库或者是几个大的硬盘。 LV：也就是从VG中划分的逻辑分区如下图所示PV、VG、LV三者关系： 扩容新分区用于扩容貌似全程都不用格式化新建分区 运行的系统什么系统都行，都可以操作，但要注意ext3好像不支持在线扩容，要在liveCD中才行。ext4和xfs都支持动态扩容。如果是出了问题需要修复的话，建议用Ubuntu的liveCD 支持NTFS分区的自动挂载，方便备份资料后转移。 安装LVM首先确定系统中是否安装了lvm工具： Centos:yum install lvm2 Ubuntu:apt-get install lvm2 df -h 和 fdisk -l 查看分区情况 开始分区12345678910111213fdisk /dev/sdbn #新建p #设定为主分区Partition number（1-4）：1 #指定分区，即为之后创建的sdb1-4(主分区只能4个)回车 #设定起始扇区回车 #设定结束扇区（直接回车默认用全部空间创建，也可以输入+500M设定为500M）t #此时输入L能看到所有格式的代码，指定分区格式，8e为LVM8e # 设定为LVMp # 查看当前分区情况w # 写入硬盘partprobe # 重读分区表，可能会提示无法只读。。。。不用理会 查看当前PV:pvdisplay 或 pvscan 创建PV（物理卷）pvcreate /dev/sdb1 使用之前创建的sdb1的全部空间创建PV，不想使用全部空间，之前分区时就要注意了。 查看当前VG（卷组）vgdisplay 或 vgscan 用/dev/sdb1创建VG并加到已存在的vg_bogon中vgextend vg_bogon /dev/sdb1 vg_bogon是本机正在使用的vg_name 查看当前VGvgdisplay发现有9.99G的空间 扩容/分区所在的LV（逻辑卷）/dev/vg_bogon/LogVol01为正在使用的/分区lvextend -l +100%FREE /dev/vg_bogon/LogVol01 路径用/dev/vg_bogon/LogVol01或/dev/mapper/vg_bogon-LogVol01都是可以的,df -h就能查看,或 lvextend -L +10G /dev/vg_bogon/LogVol01 来增加10G空间。 查看当前VG:vgdisplay已经扩容了，但df -h 显示没有扩容 重设逻辑卷大小，对于当前正在使用的LogVol01有效resize2fs /dev/vg_bogon/LogVol01 #ext*分区有效，xfs分区不用执行xfs分区不支持缩小，只支持扩容，被缩小的分区必须重新格式化才能使用 缩小其他分区扩容根分区 1.首先查看磁盘使用情况:df -h文件系统 容量 已用 可用 已用% 挂载点Filesystem Size Used Avail Use% Mounted on/dev/mapper/VolGroup-lv_root 154G 7.9G 139G 6% /tmpfs 1.9G 100K 1.9G 1% /dev/shm/dev/sda1 485M 69M 391M 15% /boot/dev/mapper/VolGroup-lv_home 299G 984M 283G 1% /home 2、卸载/home 这里缩小home，把扩容/分区注意：如果缩小的分区是xfs的，先备份资料，缩小后必须重新格式化才能使用。 umount /homeumount /home 如果提示无法卸载，则是有进程占用/home，使用如下命令来终止占用进程：fuser -m /home 3、调整分区大小resize2fs -p /dev/mapper/VolGroup-lv_home 20G 此处缩小home分区到20G如果提示运行“e2fsck -f /dev/mapper/VolGroup-lv_home”，则执行相关命令：e2fsck -f /dev/mapper/VolGroup-lv_home然后重新执行命令:resize2fs -p /dev/mapper/VolGroup-lv_home 20G注：resize2fs 为重新设定磁盘大小，只是重新指定一下大小，并不对结果有影响，需要下面lvreduce的配合 4、挂载上/home，查看磁盘使用情况 12mount /homedf -h 此时看/home分区只有20G了。 5、设置空闲空间使用lvreduce指令用于减少LVM逻辑卷占用的空间大小。可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。记得输入 “y”lvreduce -L 20G /dev/mapper/VolGroup-lv_home 这里是指定VolGroup-lv_home的空间为20G， 刚才只是把/home多余的空间标记为不使用，这一步开始真正分割lv，把/home的lv分割为刚刚设定的大小，只能比20G大，比20G小，多分割出来的地方数据会丢失（上面已经设定了为20G了） 注：lvreduce -L 20G的意思为设置当前文件系统为20G，如果lvreduce -l 20G是指从当前文件系统上减少20G (-L设定为指定大小，-l减小指定大小),使用lvreduce减小逻辑卷的大小。注意：减小后的大小不能小于文件的大小，否则会丢失数据。 可以使用vgdisplay命令等查看一下可以操作的大小。也可以是用fdisk -l命令查看详细信息。vgdisplay 注：vgdisplay为显示LVM卷组的元数据信息,此时可以看到有free空间。 6.把闲置空间挂在到根目录下lvextend -l +100%FREE /dev/mapper/VolGroup-lv_root 把free空间全部分给/分区注：如果使用lvextend -L +283G则为在文件系统上增加283G 1234567resize2fs -p /dev/mapper/VolGroup-lv_root #ext*分区有效,重设磁盘大小xfs_growfs /dev/mapper/VolGroup-lv_root #xfs分区有效,自动扩大到最大可用空间（VG空闲多少就用掉多少）xfs_info /dev/mapper/VolGroup-lv_root #查看lv的相关信息，能看到区块大小。xfs_growfs /dev/mapper/VolGroup-lv_root -D 1986208 #扩容到指定区块大小#xfs_growfs报错：提示结构需要清理 看下面xfs常用命令 7、检查调整结果df -h 8、如果是ext*分区，到此步就完成了，但如果是xfs分区，被缩小的分区现在是无法挂载的，因为不支持缩小，所以被缩小的分区必须要重新格式化才能使用。 123456mkfs.xfs -f /dev/mapper/VolGroup-lv_home #格式化为xfs分区mkfs -t ext3 /dev/mapper/VolGroup-lv_home #格式化为ext3分区mount -t xfs /dev/mapper/VolGroup-lv_home /mnt #挂载分区到/mnt下 df -Th /mnt #测试是否挂载成功#能到这一步的基本是没有问题的了。 OK扩容完成。 9、此时要注意，一定要看看/etc/fstab 文件有没有相应的自动挂载参数，分区格式也要对应，不然开机会进入一个XXX模式，结果开不了机。 xfs相关常用命令需要安装：12yum install xfsprogs -yapt install xfsprogs -y xfs_admin: 调整 xfs 文件系统的各种参数xfs_copy: 拷贝 xfs 文件系统的内容到一个或多个目标系统（并行方式）xfs_db: 调试或检测 xfs 文件系统（查看文件系统碎片等）xfs_check: 检测 xfs 文件系统的完整性xfs_bmap: 查看一个文件的块映射xfs_repair: 尝试修复受损的 xfs 文件系统（）xfs_fsr: 碎片整理xfs_quota: 管理 xfs 文件系统的磁盘配额xfs_metadump: 将 xfs 文件系统的元数据 (metadata) 拷贝到一个文件中xfs_mdrestore: 从一个文件中将元数据 (metadata) 恢复到 xfs 文件系统xfs_growfs: 调整一个 xfs 文件系统大小（只能扩展）xfs_freeze 暂停（-f）和恢复（-u）xfs 文件系统xfs_logprint: 打印xfs文件系统的日志xfs_mkfile: 创建xfs文件系统xfs_info: 查询文件系统详细信息xfs_ncheck: generate pathnames from i-numbers for XFSxfs_rtcp: XFS实时拷贝命令xfs_io: 调试xfs I/O路径 关于xfs_repair：一般xfs_repair /dev/mapper/VolGroup-lv_root 就可以了，一定要先备份被修复分区的资料，可以tar备份完整备份整个根分区命令：1tar -cvpzf /media/sda7/backup.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media / xfs_repair慎用-L参数，会丢失一些数据。具体参考：http://www.mamicode.com/info-detail-669354.htmlhttp://blog.chinaunix.net/uid-522675-id-4665059.html 其他命令 移除lv逻辑卷： 12lvdisplaylvremove -f /dev/vg_bogon/LogVol02 #移除该lv逻辑卷 lv逻辑卷重命名：lvrename /dev/vg_bogon/LogVol02 /dev/vg_bogon/lv_root如果无法修改可能是因为激活原因，激活VG就可以修改LV名了lvchange -an /dev/vg_bogon/LogVol02 VG重命名vgrename vg_bogon vg_new 若不是用于扩容，只是用来做磁盘存储文件，则要挂载分区，开机自动挂载修改/etc/fastab文件。如果改名的lv卷是启动分区的话，再修改/etc/grub.conf文件]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>LVM磁盘管理</tag>
        <tag>LVM扩容</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux内核升级]]></title>
    <url>%2Fposts%2F27726%2F</url>
    <content type="text"><![CDATA[yum方式升级内核官网：http://elrepo.org/tiki/tiki-index.php 1.查看系统情况cat /etc/issue 查看系统版本uname -r 查看内核版本 2.安装key1rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org 3.安装yum源（根据你的系统版本选择） 7系列 1rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 6系列 1rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm 5系列 1rpm -Uvh http://www.elrepo.org/elrepo-release-5-5.el5.elrepo.noarch.rpm 4.安装内核 ml内核（mainline，安装的是最新版的内核）如果要安装ml内核，使用如下命令： 1yum --enablerepo=elrepo-kernel install kernel-ml -y lt内核（long-term，长期支持版，不是最新版）如果要安装lt内核，使用如下命令： 1yum --enablerepo=elrepo-kernel install kernel-lt -y 我安装的是ml内核，如下： 5.修改grub1vim /etc/grub.conf 新安装的内核排在了第一项，所以改为default=0，若排在第二个title下则为1，以此类推。 注：一般centos6以下都是用grub引导的，如果有需求的话可以升级到gurb2进入/boot删除老的内核(对应的initramfs*.img，initrd*.img，vmlinuz文件)，删除/etc/grub.conf文件对应的段落，并重新生成grub文件。1grub2-mkconfig -o /boot/grub2/grub.cfg #生成grub2的配置文件 如果没有grub2-mkconfig命令时,先安装yum install grub2-tools 之后重启验证即可。 源码编译升级（适合所有Linux）内核版本 https://www.kernel.org参考：http://blog.csdn.net/taiyang1987912/article/details/4274401912345678910yum install ncurses-devel -yyum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel -ywget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.28.tar.xz tar -xf linux-3.10.28.tar.xzmv linux-3.10.28 /usr/src/cd /usr/src/linux-3.10.28/cp /boot/config-2.6.32-573.el6.x86_64 .config#把旧内核(uname -r)的config复制到当前目录备用sh -c 'yes "" | make oldconfig'make oldconfig cpu核数 cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l 下面-j后面的48是cpu核数（指定编译核数）1234make -j48 bzImagemake -j48 modulesmake -j48 modules_installmake install 安装完成后vi /etc/grub.conf 看新安装的内核在第几段，一般是在第一段，从0开始数看title CentOS (3.10.28) 在第一段为default=0，第二段为default=1 例如:1234567891011121314151617#boot=/dev/sdbdefault=0timeout=5splashimage=(hd0,0)/grub/splash.xpm.gzhiddenmenutitle CentOS (3.10.28) root (hd0,0) kernel /vmlinuz-3.10.28 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-3.10.28.imgtitle CentOS (2.6.32-642.3.1.el6.x86_64) root (hd0,0) kernel /vmlinuz-2.6.32-642.3.1.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-2.6.32-642.3.1.el6.x86_64.imgtitle CentOS 6 (2.6.32-573.el6.x86_64) root (hd0,0) kernel /vmlinuz-2.6.32-573.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-2.6.32-573.el6.x86_64.img rebootuname -r 查看内核版本]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Linux内核升级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos网络端口]]></title>
    <url>%2Fposts%2F21569%2F</url>
    <content type="text"><![CDATA[Centos查看端口占用情况命令，比如查看80端口占用情况使用如下命令：lsof -i tcp:80 列出所有端口netstat -ntlp 1、开启端口（以80端口为例） 方法一：/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT写入修改 /etc/init.d/iptables save 保存修改 service iptables restart 重启防火墙，修改生效 方法二：vim /etc/sysconfig/iptables 修改配置文件加入如下语句: -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT 重启防火墙，修改完成 2、关闭端口 方法一： /sbin/iptables -I INPUT -p tcp --dport 80 -j DROP 写入修改 /etc/init.d/iptables save 保存修改 service iptables restart 重启防火墙，修改生效 方法二：vi /etc/sysconfig/iptables 修改配置文件加入如下语句: -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP 重启防火墙，修改完成 3、查看端口状态 Centos 6.x 、Centos 7/etc/init.d/iptables status netstat -lntp 查看监听(Listen)的端口 netstat -antp 查看所有建立的TCP连接]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Centos网络端口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高并发系统之服务器降级]]></title>
    <url>%2Fposts%2F19285%2F</url>
    <content type="text"><![CDATA[网上看到的文章，摘录分享。​在开发高并发系统时有三把利器用来保护系统：缓存、降级和限流。之前已经有一些文章介绍过缓存和限流了。本文将详细聊聊降级。当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。本文将介绍一些笔者在实际工作中遇到的或见到过的一些降级方案供大家参考。 降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。 降级预案在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案： 一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级； 警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警； 错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。 降级按照是否自动化可分为：自动开关降级和人工开关降级。 降级按照功能可分为：读服务降级、写服务降级。 降级按照处于的系统层次可分为：多级降级。 降级的功能点主要从服务端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级：页面降级：在大促或者某些特殊情况下，某些页面占用了一些稀缺服务资源，在紧急情况下可以对其整个降级，以达到丢卒保帅； 页面片段降级：比如商品详情页中的商家部分因为数据错误了，此时需要对其进行降级；页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级； 服务功能降级：比如渲染商品详情页时需要调用一些不太重要的服务：相关分类、热销榜等，而这些服务在异常情况下直接不获取，即降级即可； 读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景； 写降级：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。爬虫降级：在大促活动时，可以将爬虫流量导向静态页或者返回空数据，从而保护后端稀缺资源。 自动开关降级自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。 超时降级当访问的数据库/http服务/远程调用响应慢或者长时间响应慢，且该服务不是核心服务的话可以在超时后自动降级；比如商品详情页上有推荐内容/评价，但是推荐内容/评价暂时不展示对用户购物流程不会产生很大的影响；对于这种服务是可以超时降级的。如果是调用别人的远程服务，和对方定义一个服务响应最大时间，如果超时了则自动降级。 之前总结过一些的文章《使用httpclient必须知道的参数设置及代码写法、存在的风险》和《dbcp配置及jdbc超时设置总结》。在实际场景用一定主要配置好超时时间和超时重试次数和机制。 统计失败次数降级有时候依赖一些不稳定的API，比如调用外部机票服务，当失败调用次数达到一定阀值自动降级；然后通过异步线程去探测服务是否恢复了，则取消降级。 故障降级比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）。 限流降级当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。 人工开关降级在大促期间通过监控发现线上的一些服务存在问题，这个时候需要暂时将这些服务摘掉；还有有时候通过任务系统调用一些服务，但是服务依赖的数据库可能存在：网卡被打满了、挂掉了或者很多慢查询，此时需要暂停下任务系统让服务方进行处理；还有发现突然调用量太大，可能需要改变处理方式（比如同步转换为异步）；此时就可以使用开关来完成降级。开关可以存放到配置文件、存放到数据库、存放到Redis/ZooKeeper；如果不是存放在本地，可以定期同步开关数据（比如1秒同步一次）。然后通过判断某个KEY的值来决定是否降级。 另外对于新开发的服务想上线进行灰度测试；但是不太确定该服务的逻辑是否正确，此时就需要设置开关，当新服务有问题可以通过开关切换回老服务。还有多机房服务，如果某个机房挂掉了，此时需要将一个机房的服务切到另一个机房，此时也可以通过开关完成切换。 还有一些是因为功能问题需要暂时屏蔽掉某些功能，比如商品规格参数数据有问题，数据问题不能用回滚解决，此时需要开关控制降级。 读服务降级对于读服务降级一般采用的策略有：暂时切换读（降级到读缓存、降级到走静态化）、暂时屏蔽读（屏蔽读入口、屏蔽某个读服务）。在《应用多级缓存模式支撑海量读服务》中曾经介绍过读服务，即接入层缓存–&gt;应用层本地缓存–&gt;分布式缓存–&gt;RPC服务/DB，我们会在接入层、应用层设置开关，当分布式缓存、RPC服务/DB有问题自动降级为不调用。当然这种情况适用于对读一致性要求不高的场景。 页面降级、页面片段降级、页面异步请求降级都是读服务降级，目的是丢卒保帅（比如因为这些服务也要使用核心资源、或者占了带宽影响到核心服务）或者因数据问题暂时屏蔽。 还有一种是页面静态化场景：动态化降级为静态化：比如平时网站可以走动态化渲染商品详情页，但是到了大促来临之际可以将其切换为静态化来减少对核心资源的占用，而且可以提升性能；其他还有如列表页、首页、频道页都可以这么玩；可以通过一个程序定期的推送静态页到缓存或者生成到磁盘，出问题时直接切过去；静态化降级为动态化：比如当使用静态化来实现商品详情页架构时，平时使用静态化来提供服务，但是因为特殊原因静态化页面有问题了，需要暂时切换回动态化来保证服务正确性。 以上都保证出问题了有预案，用户还是可以使用网站，不影响用户购物。 写服务降级写服务在大多数场景下是不可降级的，不过可以通过一些迂回战术来解决问题。比如将同步操作转换为异步操作，或者限制写的量/比例。比如扣减库存一般这样操作：方案1：1、扣减DB库存，2、扣减成功后更新Redis中的库存；方案2：1、扣减Redis库存，2、同步扣减DB库存，如果扣减失败则回滚Redis库存；前两种方案非常依赖DB，假设此时DB性能跟不上则扣减库存就会遇到问题；因此我们可以想到方案3：1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为发送一条扣减DB库存的消息，然后异步进行DB库存扣减实现最终一致即可；这种方式发送扣减DB库存消息也可能成为瓶颈；这种情况我们可以考虑方案4：1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为写扣减DB库存消息到本机，然后本机通过异步进行DB库存扣减来实现最终一致性。 也就是说正常情况可以同步扣减库存，在性能扛不住时降级为异步；另外如果是秒杀场景可以直接降级为异步，从而保护系统。还有如下单操作可以在大促时暂时降级将下单数据写入Redis，然后等峰值过去了再同步回DB，当然也有更好的解决方案，但是更复杂，不是本文的重点。还有如用户评价，如果评价量太大，也可以把评价从同步写降级为异步写。当然也可以对评价按钮进行按比例开放（比如一些人的看不到评价操作按钮）。比如评价成功后会发一些奖励，在必要的时候降级同步到异步。 多级降级缓存是离用户最近越高效；而降级是离用户越近越能对系统保护的好。因为业务的复杂性导致越到后端QPS/TPS越低。 页面JS降级开关：主要控制页面功能的降级，在页面中通过JS脚本部署功能降级开关，在适当时机开启/关闭开关。 接入层降级开关：主要控制请求入口的降级，请求进入后会首先进入接入层，在接入层可以配置功能降级开关，可以根据实际情况进行自动/人工降级；这个可以参考《京东商品详情页服务闭环实践》，尤其在后端应用服务出问题时，通过接入层降级从而给应用服务有足够的时间恢复服务；应用层降级开关：主要控制业务的降级，在应用中配置相应的功能开关，根据实际业务情况进行自动/人工降级。 原文：http://jinnianshilongnian.iteye.com/blog/2306477]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>高并发系统之降级特技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grub引导修复]]></title>
    <url>%2Fposts%2F34771%2F</url>
    <content type="text"><![CDATA[法一：特别是在linux调整分区后，开机重启时会出现error : unknow filesystemgrub rescue&gt;的字样，系统就是进不去。这表示你的grub2的配置文件坏了……由于分区调整或分区UUID改变造成grub2不能正常启动，从而进入修复模式了（grub rescue)，也称救援模式。 在救援模式下只有很少的命令可以用：set , ls , insmod , root , prefix (1)set 查看环境变量，这里可以查看启动路径和分区。 (2)ls 查看设备 (3)insmod 加载模块 (4)root 指定用于启动系统的分区,在救援模式下设置grub启动分区 (5)prefix 设定grub启动路径 具体修复步骤如下： 1、查看分区：grub rescue&gt; ls 回车会出现如下字样： (hd0) (hd0,msdos9) (hd0,msdos8) (hd0,msdos7) (hd0,msdos6) (hd0,msdos5) (hd0,msdos2) (hd0,msdos1) 注：上面是我的分区设备，每个人可能不一样，但原理都是一样的。grub&gt; find /boot/grub/grub.conf 也行 2、寻找ubuntu所在分区：（就是寻找你的Linux系统是装在以上哪个分区里） grub rescue&gt; ls (hd0,msdos1)/ 若出现unknown filesystem字样，则尝试下一个……若出现的是你的ubuntu主文件夹下的文件夹和文件的名字，那就是的要找的分区了。 3、修改启动分区：（假如你找到的启动分区是hd0,msdos8）grub rescue&gt;root=(hd0,msdos8)grub rescue&gt;prefix=/boot/grub //grub路径设置grub rescue&gt;set root=(hd0,msdos8)grub rescue&gt;set prefix=(hd0,msdos8)/boot/grubgrub rescue&gt;insmod normal //启动normal启动grub rescue&gt;normal之后你就会看到熟悉的启动菜单栏了 4、进入命令行启动ubuntu 进入系统启动选项界面后还是进不去，因为你还没有真正的修改grub,这个要到ubuntu里修改,进入系统启动项界面后，按C进入命令行模式。grub &gt;set root=hd0,msdos8grub &gt;set prefix=(hd0,msdos8)/boot/grubgrub &gt;linux /vmlinuz-xxx-xxx root=/dev/sda8 //里边的xxxx可以按Tab键，如果有acpi问题,在最后加一句acpi=offgrub &gt;initrd /initrd.img-xxx-xxxgrub &gt;boot这样就可以进入了 5、进入ubuntu修复grub 在终端里运行12sudo update-grub`sudo grub-install /dev/sda 6、重启，搞定！！ 注：有时只修改1～3步骤，然后在菜单栏就可以进入系统了，且一切正常。在重启时，系统就只有一个光标在左上角不停的闪，咋也进不了系统。可能是启动项的问题，开机启动项改为硬盘启动就好了。 法二：首先制作 Ubuntu 启动 USB 复制代码代码如下：1sudo dd if=ubuntu-13.10-desktop-amd64.iso of=/dev/sdb1 #/dev/sdb1 为 USB 盘符 1.使用启动 USB 进入 Ubuntu 试用环境 2.查看硬盘分区状况，获取 Linux 系统安装分区编号sudo fdisk -l查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。我的电脑是在/dev/sda3安装了 Ubuntu。或者，打开 Gparted 图形化工具来查看分区信息也可以。挂载Ubuntu分区 3.已知Ubuntu安装在了/dev/sda3上，所以我们可以用下面命令来挂载Ubuntu安装分区。你需要将/dev/sda3换成自己的 Linux 安装分区。sudo mount /dev/sda3 /mnt 4.挂载其他所需的目录（使用 –bind） 123sudo mount --bind /dev /mnt/devsudo mount --bind /proc /mnt/procsudo mount --bind /sys /mnt/sys 5.Chroot 到硬盘上的 Linux 系统代码如下：sudo chroot /mnt chroot命令把根目录切换到指定目录下 6.安装&amp;更新 Grub 12grub2-install /dev/sdagrub2-mkconfig -o /boot/grub2/grub.cfg 7.Grub 已经修复成功，我们还需要退出 chroot 环境、卸载已经挂载的设备与目录： 12345exit #退出 chroot 环境sudo umount /mnt/devsudo umount /mnt/procsudo umount /mnt/syssudo umount /mnt 8.重启。 可以进grub 这就好办了 &gt;root (hd0,x) 提示： 输入（后 ，按 TAB键 自动补全 很好用的 。x表示你的linux根分区123&gt;linux /vmlinuz ro quiet &gt;initrd /initrd.lz&gt;boot 先找到menu.lst菜单文件：find --set-root /boot/grub/menu.lst然后加载：Grub 命令索引configfile /boot/grub/menu.lst菜单文件可以换成grub.conf试试。 参考：1、http://www.xitongzhijia.net/xtjc/20141208/32106.html （推荐）2、http://blog.chinaunix.net/uid-27037833-id-3235145.html]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>grub引导修复</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH远程重装Centos系统]]></title>
    <url>%2Fposts%2F11076%2F</url>
    <content type="text"><![CDATA[注意旧Linux系统必须能够正常ssh登录。旧Linux系统可以是任意Linux版本，现在的Linux用的一般都是grub引导管理器,新Linux系统必须是CentOS,RHEL或者Fedora，可以是32位或者64位。这几个Linux都支持VNC安装。 步骤如下可以建一个内网镜像源，也可以不建立，用公网的源（建议用公网源，简单快捷）。 一.建一个内网的镜像源（如果使用在线源则跳过此步骤）登录服务器 192.168.1.83 （用此服务器搭建内网源） 安装apache12yum install httpd mkdir /var/www/html/centos/6 -p 挂载iso镜像1mount -o loop /opt/CentOS-6.6-x86_64-bin-DVD1.iso /var/www/html/centos/6 启动apache，通过浏览器访问http://192.168.1.83/centos/6 看是否有内容只有带bin字样的完整版光盘才有对应的启动内核，别的版本都不行 二.远程重装服务器ssh登录要重装的服务器如果用在线源请按网易源的修改方法修改 123456mkdir /centos_install cd /centos_install wget http://192.168.1.83/centos/6/images/pxeboot/initrd.img wget http://192.168.1.83/centos/6/images/pxeboot/vmlinuz cp vmlinuz /boot/vmlinuz.cent.pxe cp initrd.img /boot/initrd.img.cent.pxe 网址可用网易源：http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/代替centos 7目前还不支持pxe安装12345cd /bootwget http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/initrd.imgwget http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/vmlinuzchmod 755 vmlinuzchmod 600 initrd.img 启动文件是放在/boot下的，启动时以/boot为一级目录，所以注意grub.conf里的文件位置。 修改grubvim /boot/grub/grub.conf 或者 menu.lst 也行，这两个文件是链接在一起的。default=0 看情况修改，default=0表示默认启动第一个标有title的项目，=1为第二个标有title的项目，以此类推，直接把新增的放在最前面就不用修改default=0了。增加：1234title Centos Install (PXE) root (hd0,0) kernel /vmlinuz vnc vncpassword=123456 headless ip=192.168.1.106 netmask=255.225.255.0 gateway=192.168.1.1 dns=8.8.8.8 ksdevice=eth0 method=http://192.168.1.83/centos/6/或[http://mirrors.163.com/centos/6.8/os/x86_64/] lang=en_US或zh_CH.UTF-8 keymap=us initrd /initrd.img 例：1234title Centos Install (PXE) root (hd0,0) kernel /vmlinuz vnc vncpassword=123456 headless ip=192.168.30.145 netmask=255.225.255.0 gateway=192.168.30.1 dns=8.8.8.8 ksdevice=eth0 method=http://mirrors.163.com/centos/6.8/os/x86_64/ lang=zh_CH.UTF-8 keymap=us initrd /initrd.img 保存退出 重启系统 root用户参数，要和grub.conf中的其他root参数一致；kernel参数和initrd参数后面的路径（是否/boot/开头）也要和grub.conf中的其他项一致； ip地址，子网掩码和网关地址一定要和服务器一致；ksdevice是主网卡 method后面的地址是新Linux系统的安装文件地址。如果这些配置有一项出错，就会导致远程安装失败。 开始安装ping服务器ip，ping通时，打开vnc重新连接IP:1或IP:5901，开始安装centos此时主机端显示 安装好后重启系统，登陆用户，root 密码，静态IP等不变。]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>ssh远程重装centos系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VNC服务]]></title>
    <url>%2Fposts%2F33402%2F</url>
    <content type="text"><![CDATA[Centos安装vncyum -y install vnc-server tigervnc tigervnc-server vim /root/.vnc/xstartup把最后一行 twm &amp; 注释掉，然后添加一行内容gnome-session &amp;然后保存退出 vim /etc/sysconfig/vncservers修改一下最后两行如下12VNCSERVERS="1:root 2:root"VNCSERVERARGS[2]="-geometry 800x600 -nolisten tcp -localhost" 然后保存退出 vncserver 设置密码 最后启动vncserver 并设置为开机启动，【如果系统防火墙不会用，就关闭吧】1234service vncserver startchkconfig vncserver onservice iptables stopchkconfig iptables on 现在vncserver服务器端已经配置好了，使用客户端进行图形界面远程即可。注意vnc远程的时候，默认第一个端口是5901，第二个界面是 5902依次类推。所以在使用vnc客户端远程的时候，要注意。否则连接不上的。]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>VNC服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iptables防火墙]]></title>
    <url>%2Fposts%2F61534%2F</url>
    <content type="text"><![CDATA[iptables简版Centos 查看端口占用情况命令，比如查看 80 端口占用情况使用如下命令：lsof -i tcp:80 列出所有端口 ：netstat -ntlp 开启端口（以 80 端口为例）方法一：123/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT #写入修改/etc/init.d/iptables save #保存修改service iptables restart #重启防火墙，修改生效 方法二：123vi /etc/sysconfig/iptables 打开配置文件加入如下语句 : -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT #重启防火墙，修改完成 关闭端口方法一：123/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP #写入修改/etc/init.d/iptables save #保存修改service iptables restart #重启防火墙，修改生效 方法二：1234vi /etc/sysconfig/iptables 打开配置文件加入如下语句 : -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP 重启防火墙，修改完成 查看端口状态123/etc/init.d/iptables statusnetstat -lntp #查看监听 (Listen) 的端口netstat -antp #查看所有建立的 TCP 连接 详细版网上看到一篇博客，讲的很详细，摘录分享。 iptables 是一个安装在Ubuntu Server上的默认防火墙。在正常的ubuntu安装过程中，iptables是被安装上了的，但是它默认允许所有的流量(不管防火墙是否是无效的)关于iptables有价值的信息很多，但是大多都描述的很复杂。如果你想做些基本的配置，下面的 How To 很适合你。◆ 基本命令键入： iptables -L 列出您当前iptables中在规则。如果您是刚刚建立您的服务器，那么可能此时还没有任何规则，而且您应该看到如下： Chain INPUT (policy ACCEPT)target prot opt source destination Chain FORWARD (policy ACCEPT)target prot opt source destination Chain OUTPUT (policy ACCEPT)target prot opt source destination ◆ 允许建立会话 我们可以允许建立会话来接受流量： iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT ◆ 在指定端口上允许入站流量 阻断所有流量您也可以启动系统，但是您可能正在通过SSH工作，所有在您阻断其他流量前有必要允许SSH流量。 为了在22端口号(默认的SSH端口)上的允许流量入站，您可以告诉iptables允许您的网卡接受所有的目的端口为22的TCP流量。 iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT 特别的，这将向表中追加(-A)INPUT规则，允许目的端口号为SSH的所有流量进入接口(-i) eth0，以便iptables完成跳转(-j)或动作：ACCEPT 让我们核对下这些规则：(这里仅显示了少数行，您应该看到更多) iptables -L Chain INPUT (policy ACCEPT)target prot opt source destinationACCEPT all – anywhere anywhere state RELATED,ESTABLISHEDACCEPT tcp – anywhere anywhere tcp dpt:ssh 现在，让我们允许所有的web流量 iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT 检查我们现有的规则 iptables -L Chain INPUT (policy ACCEPT)target prot opt source destinationACCEPT all – anywhere anywhere state RELATED,ESTABLISHEDACCEPT tcp – anywhere anywhere tcp dpt:sshACCEPT tcp – anywhere anywhere tcp dpt:www 我们已经指定SSH和web端口为允许通过的TCP流量，但是因为我们还没阻断任何流量，所以到目前为止所有的流量仍然可以进入。 ◆ 阻断流量 一旦一条规则对一个包进行了匹配，其他规则不再对这个包有效。因为我们的规则首先允许SSH和WEB流量，所以只要我们阻断所有流量的规则紧跟其後，我们依然能接受我们感兴趣的流量。我们要做的仅仅是把阻断所有流量的规则放在最後，所以我们需要再次用到它。 iptables -A INPUT -j DROP iptables -L Chain INPUT (policy ACCEPT)target prot opt source destinationACCEPT all – anywhere anywhere state RELATED,ESTABLISHEDACCEPT tcp – anywhere anywhere tcp dpt:sshACCEPT tcp – anywhere anywhere tcp dpt:wwwDROP all – anywhere anywhere 因为我们刚才没有指定一个接口或一个协议，所以除了web和ssh流量外其他任何流量都会被阻断。 ◆ 编辑 iptables 到目前为止我们设置过程中唯一的问题是回环端口(loopbakc)也被阻断了。我们本可以通过指定 -i eth0 来仅仅丢弃eth0上的数据包，但我们也可以为回环端口(loopback)添加一条规则。如果我们追加这条规则，这将太晚了—-因为所有的流量已经 被丢弃。我们必须插入这条跪着到第4行。 iptables -I INPUT 4 -i lo -j ACCEPT iptables -L Chain INPUT (policy ACCEPT)target prot opt source destinationACCEPT all – anywhere anywhere state RELATED,ESTABLISHEDACCEPT tcp – anywhere anywhere tcp dpt:sshACCEPT tcp – anywhere anywhere tcp dpt:wwwACCEPT all – anywhere anywhereDROP all – anywhere anywhere 最後2行看起来几乎一样，因此我们可以让iptables列的更详细些。 iptables -L -v ◆ 日志记录 在上面的例子中，所有的流量都不会被记录。如果您愿意在syslog中记录被丢弃的包, 下面将是最快捷的方式:1iptables -I INPUT 5 -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7 看 提示 段获得更多关于logging的ideas. ◆ 保存 iptables 如果您现在要重新启动机器的话，您的iptables配置将会消失。为了不用每次重新启动时敲入这些命令，您可以保存你的配置，让它在系统启动时自动启动。你可以通过iptables-save 和iptables-restore命令来保存配置。 ◆ 配置启动时自动加载规则 保存您的防火墙股则到一个文件 iptables-save &gt; /etc/iptables.up.rules 接着修改/etc/network/interfaces 脚本自动应用这些规则(末行是添加的)123auto eth0 iface eth0 inet dhcp pre-up iptables-restore &lt; /etc/iptables.up.rules 你也可以准备一组规则并自动应用它1234auto eth0 iface eth0 inet dhcp pre-up iptables-restore &lt; /etc/iptables.up.rules post-down iptables-restore &lt; /etc/iptables.down.rules ◆ 提示◆ 如果你要在一个规则基础上手动编辑iptables 下面的步骤复习了怎样建立你的防火墙规则，并假定它们相对固定(而且对于大多数人来说它们也应该是)。但是如果你要做许多研究工作，你也许想要你的 iptables在你每次重启时保存一次。你可以在/etc/network/interfaces 里添加像下面的一行:12pre-up iptables-restore &lt; /etc/iptables.up.rules post-down iptables-save &gt; /etc/iptables.up.rules #此行将保存规则用于下次启动时使用。 ◆ 用iptables-save/restore来测试规则 如果你超出了这个指南来编辑iptables，你可能想利用iptables-save和iptables-restore来编辑和测试你的规则。你可以通过使用你喜爱的文本编辑器(此处为gedit)来打开这些规则文件来完成编辑。 12iptables-save &gt; /etc/iptables.test.rules gedit /etc/iptables.test.rules 你会得到一个如下类似的文件(下面是紧接上的例子文件)： Generated by iptables-save v1.3.1 on Sun Apr 23 06:19:53 2006*filter:INPUT ACCEPT [368:102354]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [92952:20764374]-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT-A INPUT -i eth0 -p tcp -m tcp –dport 22 -j ACCEPT-A INPUT -i eth0 -p tcp -m tcp –dport 80 -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -m limit –limit 5/min -j LOG –log-prefix “iptables denied: “ –log-level 7-A INPUT -j DROPCOMMIT Completed on Sun Apr 23 06:19:53 2006 注意到这些都是减去iptables命令的iptables语句。随意编辑这些命令、完成後保存它们。然後简单的测试下： iptables-restore &lt; /etc/iptables.test.rules 测试完毕後，如果你还没添加iptables-save命令 到/etc/network/interfaces 里面，记得不要丢失了你的更改： iptables-save &gt; /etc/iptables.up.rules ◆ 更详细的日志为了在你的syslog中获得更多细节，你可能想创建一个额外的链。下面是个很简短的例子—我的/etc/iptables.up.rules ,它将展示我是如何设置iptables记录到syslog中的： Generated by iptables-save v1.3.1 on Sun Apr 23 05:32:09 2006*filter:INPUT ACCEPT [273:55355]:FORWARD ACCEPT [0:0]:LOGNDROP - [0:0]:OUTPUT ACCEPT [92376:20668252]-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT-A INPUT -i eth0 -p tcp -m tcp –dport 22 -j ACCEPT-A INPUT -i eth0 -p tcp -m tcp –dport 80 -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -j LOGNDROP-A LOGNDROP -p tcp -m limit –limit 5/min -j LOG –log-prefix “Denied TCP: “ –log-level 7-A LOGNDROP -p udp -m limit –limit 5/min -j LOG –log-prefix “Denied UDP: “ –log-level 7-A LOGNDROP -p icmp -m limit –limit 5/min -j LOG –log-prefix “Denied ICMP: “ –log-level 7-A LOGNDROP -j DROPCOMMITCompleted on Sun Apr 23 05:32:09 2006 请注意 一个名为 LOGNDROP的链在文件顶部。而且，INPUT链底部标准的DROP被替换成了LOGNDROP，同时添加了协议描述so it makes sense looking at the log。最後我们在LOGNDROP链尾部丢弃了这些流量。下面的行告诉我们发生了什么： –limit 设置记录相同规则到syslog中的次数 –log-prefix “Denied…” 添加一个前缀使得在syslog中查找更easy –log-level 7 设置syslog的消息级别 (see man syslog for more detail, but you can probably leave this) ◆ 禁用防火墙 如果您要临时禁用防火墙，您可以通过下面的命令清空所偶的规则： iptables -F ◆ 轻松配置通过 GUI 新手可以利用 Firetarter(一个gui工具)—仓库中的可用软件(新立德或apt-get 获得)来配置她或他的iptables规则，而需要命令行知识。请查看指南，尽管…… 配置很简单，但是对于高级用户来说可能远远不能满足。然而它对于大多数的家庭用户来说是足够的…… 。(我)建议您使用firestarter在策略表中将出站配置为 “限制”，而将您需要的连接类型(如用于http的80、https的443，msn chat的1683等等)加入白名单。您也可以通过它查看进出您计算机的活动连接…… 。防火墙会一直保持下去一旦通过向导配置完毕。拨号用户必须在向导中指定它在拨号时自动启动。 firestarter主页： http://www.fs-security.com/ (仓库源中可用, 不需要编译)指南: http://www.fs-security.com/docs/tutorial.php 个人笔记：不幸运的是，它没有阻断(或询问用户)特定应用/程序的选项……。因此，我的理解是一旦启用了80端口(例如，用于访问网页)，那么任何程序都可以通过80端口连接任何服务器、做任何它想做的事……]]></content>
      <categories>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>iptables防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文章阅读链接更新页]]></title>
    <url>%2Fposts%2F37824%2F</url>
    <content type="text"><![CDATA[1、我的算法学习之路（Google工程师）http://zh.lucida.me/blog/on-learning-algorithms/]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>网页链接更新页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用软文思维写工作总结]]></title>
    <url>%2Fposts%2F37921%2F</url>
    <content type="text"><![CDATA[网上看到的网文，摘录分享 如何用软文思维写工作总结？Step 1 : 工作总结的选题规划 给谁看工作总结，顾名思义就是要给领导看的，所以我们要做的第一件事就是分析领导的风格，领导的风格决定了总结的风格。一般来说主要有这么三类。请根据具体情况对号入座： 看什么领导主要想看些什么，你就要写些什么。这里有七个方面内容可供选择：你的（销售、生产）业绩、对未来工作的计划、工作心得、有哪些好的建议、对一些数据的分析和结论、对行业情况的调研结果，以及提出未来工作所需要的资源等等。当然其他方面也还有很多，以上仅供参考。 横向调研横向调研的意思是借鉴你同事的优秀工作总结，做到扬长避短。Step 2 : 挖掘工作总结的素材软文的素材主要是以下几个方面，它们的核心就是介绍企业的基本信息。用在工作总结上，就不是以企业为主体，而是以个人以及个人所在的团队为介绍对象。它们分别可写的指标如下图所示：Step 3 : 整合素材可以单纯地列出数字，计算增长比、横向对比、逐月比较、趋势预测等等，对于数据来说，最好的呈现方式就是图表。这时候可能有些人就要问了，我是属于行政类岗位，如果没有以上这些业绩指标，该怎么写呢？答案是，你依然可以从以下11个方框中找到你的成就感。正文撰写和标题拟定，就要根据以上确定的选题整理的素材自由发挥了。不过学姐为大家提供了一些非常好用的的句式↓工作总结优化的9种句式 你是不是也有这种感受，刚写完的一个文案/总结，当时怎么也看不出有哪里不好，但是隔了一两天再看一遍，就能发现不少可以改进的地方。对于影响你升职加薪的工作总结，当然要一改再改，优化几遍再上交啦！不过这里不是让你使用多么精美的措辞，毕竟不是写小说，工作总结的精髓还是在于它的理性意义。一篇优秀的工作总结要做到言语朴实但不呆板，成果累累却不张扬，让你的上司认为你是个踏实努力、有思想、有上进心、有潜力的好员工。怎么做到呢？可以参考以下9个句式，看看它们的巧妙之处。或者用“首先，其次，再次”等有逻辑的句式，表明你有非常清晰的工作思路；文章里要出现这类词，因为总结不能面面俱到，要突出主次，以免领导丢失重点，也认为你是个没有重点的人；通过某些真实的案例和数据得出结论，有凭有据，表明你的观点并非是天马行空想出来的；同上，当你提出一个观点时，需要数据、图表来佐证，图文结合更具说服力；不光要做会提问题的员工，还要主动寻找解决问题的方法，向领导表明你是个有建设性意见的人；很多人在总结报告里喜欢讲一些行业的成功案例（运营、用人等经验），但是如果不联系到自己的工作中，就会说明你只是个爱借用他人来吹牛的人；但反之就能表明你是个爱学习、爱思考、爱应用的人；当向领导提出同行竞争者的成功做法时，你还需要指出本公司目前需要的条件或需要克服的障碍，表明你是个思虑周全、靠谱的人；当你提出建议时，你需要落实具体的资源、人员计划。表明你真正深入思考了这个问题，是一个有较强执行力的人。最后总结一下，这半年（一年）自己哪方面做得好，哪方面还有待提高，如何提高，表明你是个勤思考，上进的人，也让领导相信你明年会做得更好（画大饼懂不懂？）。 了解更多写工作总结的技巧，请戳怎样用软文思维写工作总结？ &gt;&gt;]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>工作总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员怎样才能找到一个靠谱的创业公司]]></title>
    <url>%2Fposts%2F48545%2F</url>
    <content type="text"><![CDATA[推酷上看到的一篇文网文，摘录学习项目前景面试公司之前，要首先从网上搜集该公司有关的新闻和资料，大致了解一下公司所做的项目，面试的时候和经理深入探讨一下关于产品项目的想法，以便更全面的有个大概的了解。项目是一个公司的内在核心，产品是公司的孩子，代表着公司的前景和未来。根据当前互联网的大环境和未来发展以及当下的用户市场来诊断一下该公司的核心产品项目的前途，以及是否是你感兴趣的方向。如果你感觉没有前景，而且又不是你感兴趣的方向，建议不要选择，一个合适的环境和项目才能促进你提高。当然，如果你仅仅考虑的是当下为了挣钱，而不是自己的兴趣爱好，那如果你感觉该公司项目产品有市场前景，有钱途，但是又没有自己的主见和兴趣，那你可以选择这家公司。没有前景的项目公司建议大家慎重选择，毕竟融资困难，最后有可能发不出工资来。你可能会说，我们怎么能判断准确？是的，并不是每个人都能判断准确，投资人都叫风投，风险投资，所有的选择都是有风险的，这需要自己平时多关心互联网的发展和未来的方向，以及一些热点，扩展自己的一些知识量和阅历，使自己判断能力的准确度更高，仅此而已。 CEO的魅力我这里把CEO的魅力分为两个：一是领导力，二是执行力。这是一个优秀的CEO必不可少的素质。这里的领导力，我暂时定义为以下几点：广阔视野，分析思维，概念思维，真知灼见，知人善任，卓越领导，影响他人，相信自己。前面的几点视野，思维，灼见，这些能力，可以使CEO能够准确的判断市场和未来，带着公司稳步的走向未来，发展更好。后面的知人善任，卓越领导，影响他人，相信自己，才能能够使创业团队更加团结稳定，使大家更加信服的追随他。对于影响他人，我们不求每个CEO都像乔布斯一样，具有现实扭曲力场的能力，最起码能够让他人和你观点不会冲突，这样才能领到团队，团结一心。关于执行力，我想说这里的执行力我更加偏向与作为一个公司的领导，他的承诺的执行力，而不是整天那股权和期权忽悠创业团队，说公司上市了大家都是元老，都会有股份或者期权。整天那摸不着，看不见的东西忽悠大家拼命给他干活的CEO不是一个让人信服的人，让团队没有安全感。记住：画大饼谁都会，让你能吃到的CEO不多见。从创业起，融到资金后，整天自己抱着钱，不顾员工利益的CEO,即使将来创业成功，他也不会让你知道饼是啥味。记住：口头承诺不如白纸黑字。如果你去的公司，在工作了几个月之后，发现公司的CEO没有领导力，也没有执行力，果断劝你们赶紧给自己找下家和后路，否则……后果自负。 管理团队刚才我们谈到了CEO的魅力问题，CEO影响着管理团队的团结和战斗力。如果一个CEO和管理团队因为期权、股权问题，还有对于公司的战略规划上有分歧，整天勾心斗角，明面上精致团结或者矛盾隐私化，暗地里暗度陈仓，这样的公司是没有任何战斗力和前景的。如果你所在的公司，你发现了有这样的苗头或者征兆，甚至已经正在发生，内部管理团队不和的现象，建议你们慎重选择，或者尽早离职。所谓上身不正下身外，管理团队把心思都放在了勾心头角上，哪有心力去按照既定的战略规划去安心，用心经营项目和产品啊。 技术团队有些创业公司号称是产品驱动型的，还有什么运营驱动型，用户驱动型，当然还有技术驱动型的公司，不管什么驱动型的公司，归根结底得有自己的产品，做产品就得需要技术，所以一个公司技术的重要性不言而喻，尤其是创业公司前期，产品未获得市场认可之前，技术尤为重要。一个好的技术团队可以成就一个好的产品的同时，更能够提高技术团队内程序员的技术水平。如果技术团队能力不强，你认为公司的产品性能，体验，交互会好吗？交互体验是用户使用产品最直观的感受。一个成功的产品需要强大的运营，需要市场的认可，更需要技术的提高和优化。如果你去的公司技术团队技术能力不强，你在里面学不到东西，一直在用自己之前学到的陈旧技术，那还是别呆在哪里了，提高技术最好的方法就是：勇于挑战自己不会的东西。作为技术型的人员，切记不要自己待在一个舒适区太久，会让你变得懒惰，落后，甚至淘汰，要向温水煮青蛙一样，我们要适度的学会跳出舒适区，去挑战自己。 总结当然，你看到这里可能会对比自己的处境，感觉完全达到以上几点要求的创业公司太少了，是人在一起就会磕磕绊绊，当然，这是肯定的，但是如果你待在的那个公司触犯了上面的两条及以上，我还是建议你要重新选择或者离职，去找更好的公司。这仅仅是我个人的观点，可以参考，也可以不认同，我只是用经验告诉大家以后小心上当。我为什么把项目前景和CEO的魅力放在前两位呢，因为如果你工作的那个公司，这两点都做到了，后面管理团队和技术团队也差不到哪里去。记住：路是自己走出来的，路更是自己选择的。我们不要做一个敢于跳槽的程序员，而是要做一个不害怕跳槽的程序员。你们懂我的意思吧？我相信大家都懂。]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>创业的公司</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习流程发展]]></title>
    <url>%2Fposts%2F33925%2F</url>
    <content type="text"><![CDATA[网上看到的网文，摘录学习1、推荐的发行版如下：● UBUNTU 适合纯菜鸟，追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。 ● Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。 ● Arch，追逐时尚的开发者的首选，优点是包更新相当快，无缝升级，一次安装基本可以一直运作下去，没有如UBUNTU那样的版本概念，说的专业点叫滚动升级，保持你的系统一定是最新的。缺点显然易见，不稳定。同时安装配置相对Debian再麻烦点。 ● Gentoo，相对Arch再难点，考验使用者的综合水平，从系统安装到微调，内核编译都亲历亲为，是高手及黑客显示自己技术手段，按需配置符合自己要求的系统的首选。 ● Slackware与Gentoo类似。 ● CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。 ● LFS，终极黑客显摆工具，完全从源代码安装，编译系统。安装前你得到的只有一份文档，你要做的就是照文档你的说明，一步步，一条条命令，一个个软件包的去构建你的Linux，完全由你自己控制，想要什么就是什么。如果你做出了LFS，证明你的Linux功底已经相当不错，如果你能拿LFS文档活学活用，再将Linux从源代码开始移植到嵌入式系统，我敢说中国的企业你可以混的很好。 2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]再下个阶段，你需要学习的是Linux平台的C/C++开发，同时还有Bash脚本编程，如果你对Java兴趣很深还有Java。 同样，建议你抛弃掉图形界面的IDE，从VIM开始，为什么是VIM，而不是Emacs， 我无意挑起编辑器大战，但我觉得VIM适合初学者，适合手比较笨，脑袋比较慢的开发者。 Emacs的键位太多，太复杂，我很畏惧。然后是GCC，Make，Eclipse（Java，C++或者）。虽然将C++列在了Eclipse中，但我并不推荐用IDE开发C++，因为这不是Linux的文化， 容易让你忽略一些你应该注意的问题。 IDE让你变懒，懒得跟猪一样。如果你对程序调试，测试工作很感兴趣，GDB也得学的很好， 如果不是GDB也是必修课。这是开发的第一步，注意我并没有提过一句Linux系统API的内容， 这个阶段也不要关心这个。你要做的就是积累经验，在Linux平台的开发经验。我推荐的书如下：C语言程序设计。 C语言，白皮书当然更好。 C++推荐C++ Primer Plus， Java我不喜欢，就不推荐了，附一个别人的书单：java 入门书籍。 工具方面推荐VIM的官方手册，GCC中文文档，GDB中文文档，GNU开源软件开发指导（电子书）， 汇编语言程序设计（让你对库，链接，内嵌汇编，编译器优化选项有初步了解，不必深度）。如果你这个阶段过不了就不必往下做了，这是底线，最基础的基础，否则离开，不要霍霍Linux开发。 不专业的Linux开发者作出的程序是与Linux文化或UNIX文化相背的，程序是走不远的， 不可能像Bash，VIM这些神品一样。 所以做不好干脆离开。 3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）UNIX环境高级编程堪称神作，经典中的经典。接下来进入Linux系统编程，不二选择，APUE，UNIX环境高级编程，一遍一遍的看， 看10遍都嫌少，如果你可以在大学将这本书翻烂，里面的内容都实践过，有作品，你口头表达能力够强， 你可以在面试时说服所有的考官。（可能有点夸张，但APUE绝对是圣经一般的读物，即使是Windows程序员也从其中汲取养分， Google创始人的案头书籍，扎尔伯克的床头读物。） 这本书看完后你会对Linux系统编程有相当的了解，知道Linux与Windows平台间开发的差异在哪？ 它们的优缺点在哪？我的总结如下：做Windows平台开发，很苦，微软的系统API总在扩容， 想使用最新潮，最高效的功能，最适合当前流行系统的功能你必须时刻学习。 Linux不是，Linux系统的核心API就100来个，记忆力好完全可以背下来。 而且经久不变，为什么不变，因为要同UNIX兼容，符合POSIX标准。 所以Linux平台的开发大多是专注于底层的或服务器编程。如果你看完APUE的感触有很多，希望验证你的某些想法或经验，推荐UNIX程序设计艺术， 世界顶级黑客将同你分享他的看法。 亚马逊书店：https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;creative=3132&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=cfjh-23 4、选择方向：网络，图形，嵌入式，设备驱动现在是时候做分流了。 大体上我分为四个方向：网络，图形，嵌入式，设备驱动。 网络方向：服务器软件编写及高性能的并发程序编写如果选择网络，再细分，我对其他的不是他熟悉，只说服务器软件编写及高性能的并发程序编写吧。 相对来说这是网络编程中技术含量最高的，也是底层的。 需要很多的经验，看很多的书，做很多的项目。我的看法是以下面的顺序来看书： APUE再深读 – 尤其是进程，线程，IPC，套接字 多核程序设计 - Pthread一定得吃透了，你很NB UNIX网络编程 – 卷一，卷二 TCP/IP网络详解 – 卷一 再看上面两本书时就该看了 TCP/IP 网络详解 – 卷二 我觉得看到卷二就差不多了，当然卷三看了更好，努力，争取看了 Lighttpd源代码 - 这个服务器也很有名了 Nginx源代码 – 相较于Apache，Nginx的源码较少，如果能看个大致，很NB。看源代码主要是要学习里面的套接字编程及并发控制，想想都激动。如果你有这些本事，可以试着往暴雪投简历，为他们写服务器后台，想一想全球的魔兽都运行在你的服务器软件上。 Linux内核 TCP/IP协议栈 – 深入了解TCP/IP的实现如果你还喜欢驱动程序设计，可以看看更底层的协议，如链路层的，写什么路由器，网卡， 网络设备的驱动及嵌入式系统软件应该也不成问题了。当然一般的网络公司，就算百度级别的也该毫不犹豫的雇用你。 只是看后面这些书需要时间与经验，所以35岁以前办到吧！跳槽到给你未来的地方！ 图形方向：我觉得图形方向也是很有前途的，以下几个方面。 Opengl的工业及游戏开发，国外较成熟。 影视动画特效，如皮克斯，也是国外较成熟。 GPU计算技术，可以应用在浏览器网页渲染上，GPU计算资源利用上，由于开源的原因，有很多的文档程序可以参考。如果能进火狐开发，或google做浏览器开发，应该会很好 。 嵌入式方向：嵌入式方向没说的，Linux很重要。掌握多个架构，不仅X86的，ARM的，单片机什么的也必须得懂。 硬件不懂我预见你会死在半路上，我也想走嵌入式方向，但我觉得就学校教授嵌入式的方法， 我连学电子的那帮学生都竞争不过。 奉劝大家，一定得懂硬件再去做，如果走到嵌入式应用开发，只能祝你好运， 不要碰上像Nokia，Hp这样的公司，否则你会很惨的。 驱动程序设计：软件开发周期是很长的，硬件不同，很快。 每个月诞生那么多的新硬件，如何让他们在Linux上工作起来，这是你的工作。 由于Linux的兼容性很好，如果不是太低层的驱动，基本C语言就可以搞定，系统架构的影响不大， 因为有系统支持，你可能做些许更改就可以在ARM上使用PC的硬件了， 所以做硬件驱动开发不像嵌入式，对硬件知识的要求很高。可以从事的方向也很多，如家电啊，特别是如索尼，日立，希捷，富士康这样的厂子，很稀缺的]]></content>
      <categories>
        <category>文章阅读</category>
      </categories>
      <tags>
        <tag>Linux学习流程发展</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7安装配置LAMP服务器]]></title>
    <url>%2Fposts%2F60501%2F</url>
    <content type="text"><![CDATA[CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMPhttp://www.centos.bz/2013/08/ezhttp-tutorial/ 准备篇（可跳过此步）：一、配置防火墙，开启80端口、3306端口CentOS 7默认使用的是firewall作为防火墙，这里改为iptables防火墙。 1、关闭firewall：12systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动 2、安装iptables防火墙12yum install iptables-services #安装vim /etc/sysconfig/iptables #编辑防火墙配置文件 增加规则：123-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT :wq! #保存退出12systemctl restart iptables #最后重启防火墙使配置生效systemctl enable iptables #设置防火墙开机启动 二、关闭SELINUX1234vim /etc/selinux/config#SELINUX=enforcing #注释掉#SELINUXTYPE=targeted #注释掉SELINUX=disabled #增加 :wq! #保存退出setenforce 0 使配置立即生效 安装篇：一、安装MariaDBCentOS 7.0中，已经使用MariaDB替代了MySQL数据库 1、安装MariaDB12yum install mariadb mariadb-server -ysystemctl start mariadb #启动MariaDB cp /usr/share/mysql/my-huge.cnf /etc/my.cnf 拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可） 2、为root账户设置密码mysql_secure_installation 回车，根据提示输入Y 输入2次密码，回车 根据提示一路输入Y 最后出现：Thanks for using MySQL! MariaDB密码设置完成，重新启动 MariaDB：systemctl restart mariadb #重启MariaDB 3、安装Apache和PHP12345yum install http php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash -ysystemctl restart mariadb #重启MariaDBsystemctl enable mariadb #设置开机启动systemctl start httpd #启动apachesystemctl enable httpd #设置apache开机启动 在客户端浏览器中打开服务器IP地址，会出现测试界面，说明apache安装成功 配置篇一、Apache配置vim /etc/httpd/conf/httpd.conf 编辑配置文件 ServerSignature On #添加，在错误页中显示Apache的版本，Off为不显示 Options Indexes FollowSymLinks #修改为：Options Includes ExecCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录） #AddHandler cgi-script .cgi 取消注释（允许扩展名为.pl的CGI脚本运行） AllowOverride None #修改为：AllowOverride All （允许.htaccess） AddDefaultCharset UTF-8 #修改为：AddDefaultCharset GB2312 （添加GB2312为默认编码） #Options Indexes FollowSymLinks #修改为 Options FollowSymLinks（不在浏览器上显示树状目录结构） DirectoryIndex index.html #修改为：DirectoryIndex index.html index.htm Default.html Default.htmindex.php（设置默认首页文件，增加index.php） MaxKeepAliveRequests 500 #添加MaxKeepAliveRequests 500 （增加同时连接数） :wq! #保存退出systemctl restart httpd重启apacherm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html 删除默认测试页 二、php配置vim /etc/php.ini 编辑配置文件 date.timezone = PRC #把前面的分号去掉，改为date.timezone = PRC (这里列出了PHP禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。) 1disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname expose_php = Off #禁止显示php版本的信息 short_open_tag = ON #支持php短标签 open_basedir = .:/tmp/ (设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题(例如：织梦内容管理系统)，可以注销此行，或者直接写上程序的目录/data/www.osyunwei.com/:/tmp/) :wq! #保存退出12systemctl restart mariadb #重启MariaDBsystemctl restart httpd #重启apache 测试篇/var/www/html1vim index.php #输入下面内容 123&lt;?phpphpinfo();?&gt; :wq! #保存退出在客户端浏览器输入服务器IP地址，可以看到相关的配置信息！ 注意：apache默认的程序目录是/var/www/html权限设置：chown apache.apache -R /var/www/html 参考：http://www.osyunwei.com/archives/7829.html]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Centos7 lanm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS上搭建PHP环境]]></title>
    <url>%2Fposts%2F36733%2F</url>
    <content type="text"><![CDATA[在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMPhttp://www.centos.bz/2013/08/ezhttp-tutorial/ 安装: 123456yum install httpd httpd-develyum install php php-develyum install php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpcyum install mysql mysql-server/etc/init.d/mysqld start/etc/init.d/httpd restart 此时可以在目录：/var/www/html/下建立一个PHP文件代码： &lt;?php phpinfo(); ?&gt; 然后访问这个文件，就能看到PHP的一些信息，php.ini配置文件的路径可以在这个页面上看到 测试mysql是否链接成功的php代码 12345678910111213141516171819&lt;?php$con = mysql_connect("10.0.@.@@","@@","@@");if (!$con) &#123; die('Could not connect: ' . mysql_error()); &#125; mysql_select_db("mydb", $con); $result = mysql_query("SELECT * FROM sys_user"); while($row = mysql_fetch_array($result)) &#123; echo $row['UserName'] . " " . $row['PassWord'] . " " . $row['id']; echo "&lt;br /&gt;"; &#125; mysql_close($con);?&gt; 可以把上面的代码传入目录/var/www/html/就可以看到执行情况]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Centos PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js开发环境搭建]]></title>
    <url>%2Fposts%2F34025%2F</url>
    <content type="text"><![CDATA[官网：https://nodejs.org Mac、Windows官网下载对应的安装包安装即可。带有Source Code字样的才是源码；带有linux 字样的是编译好的文件，解压bin目录下可以看到node、npm 文件，复制到/usr/local/bin/下即可，node_modules目录是模块（不推荐，很多库及模块没有安装，这种方法我没有安装成功）。 Ubuntu 16 、CentOS 7法一：apt-get命令安装1apt install nodejs-legacy nodejs npm 法二：源码安装(用root用户操作)（6版本以下要升级g++及其他库，去官网下载带linux字样的编译好的版本简单点） gcc版本要4.8以上 Centos: yum install g++ cmake gcc-c++ gmake -y Ubuntu：apt-get install python build-essential gcc g++ 123456git clone https://github.com/nodejs/node.gitchmod -R 755 nodecd node./configure #指定安装目录加上--prefix=/usr/local/node/版本号makemake install 也可在https://nodejs.org/en/download/下载Nodejs带Source Code字样的源码，tar -zxvf filename 解压，之后的操作是一样的。 查看 node 版本：node --version 命令无法运行的话,需要设置nodejs环境变量：vim /etc/profile在空行出添加以下内容： 1234#set for nodejs#若./configure时指定了安装路径则改为安装路径：/usr/local/node/版本号export NODE_HOME=/usr/bin/node export PATH=$NODE_HOME/bin:$PATH 保存并退出，编译/etc/profile 使配置生效 source /etc/profile 现在就可以正常使用啦！ npm模块安装路径默认：/usr/local/lib/node_modules 指定路径：/usr/local/node/版本号/lib/node_modules nvm &amp; n有很大一部分人喜欢用nvm来管理node.js 因为它可以简单实现多版本共存，但是并不是适合所有人，适合那些专业开发的人员，经常要调试不同版本的兼容性的开发者，另外容易造成版本冗余。新兴的n也比较火热，不过n在mac中似乎是个坑，期待以后会变得更好。这里给个链接，可以去看看。管理 node 版本，选择 nvm 还是 n？利用n和nvm管理Node的版本nvm安装nodenvm 管理不同版本的 node 与 npm 淘宝 NPM 镜像源国内直接使用 npm 的官方镜像可能非常慢的，可以使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。http://npm.taobao.org/ 方法一、通过config命令12npm config set registry https://registry.npm.taobao.orgnpm info underscore #（如果上面配置正确这个命令会有字符串response） 方法二、命令行指定npm --registry https://registry.npm.taobao.org info underscore 方法三、编辑 ~/.npmrc 加入下面内容registry = https://registry.npm.taobao.org 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:(不推荐，这样自由手动安装是用cnpm,脚本安装还是用的默认npm)npm install -g cnpm --registry=https://registry.npm.taobao.org 这样就可以使用 cnpm 命令来安装模块了： cnpm install [name] Node.js教程:http://www.runoob.com/nodejs/nodejs-npm.html]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[穷人VPN]]></title>
    <url>%2Fposts%2F61013%2F</url>
    <content type="text"><![CDATA[sshuttle：不需配置的 VPNsshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle。 按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。 使用：sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）： 安装：法1: pip install sshuttle 法2: 12git clone https://github.com/sshuttle/sshuttle.git./setup.py install sshuttle -r username@sshserver 0.0.0.0/0 -vvStarting sshuttle proxy.Binding: 12300Listening on (‘127.0.0.1’, 12300).[local sudo] Password:firewall manager ready.c : connecting to server…… 成功运行 sshuttle 后会在 Terminal 上看到一些运行时 log：]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>穷人VPN</tag>
        <tag>免安装VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ruby开发环境搭建]]></title>
    <url>%2Fposts%2F31766%2F</url>
    <content type="text"><![CDATA[Ubuntu 16安装ruby环境sudo apt-get install ruby ruby-dev检查ruby版本ruby -vgem --version irb 环境测试irb(main):001:0&gt; 3+5=&gt; 8irb(main):002:0&gt; puts “hello world!”hello world!irb(main):001:0&gt;exit Centosyum list ruby看看yum仓库版本是多少，版本太低就源码安装。1yum install openssl* openssl-devel zlib-devel gcc gcc-c++ make autoconf readline-devel curl-devel expat-devel gettext-devel -y 关闭iptables和SELINUX（不关闭也是可以的）1234service iptables stopsetenforce 0vi /etc/sysconfig/selinuxSELINUX=disabled #禁用selinux 源码编译安装：12345wget http://ftp.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gztar zxvf ruby-2.3.1.tar.gzcd ruby-2.3.1./configure --enable-shared --enable-pthread --prefix=/usr/local/rubymake &amp;&amp; make install 编译时如果报错如下：ossl_pkey_ec.c:815: error: ‘EC_GROUP_new_curve_GF2m’ undeclared (first use in this function)需要安装补丁，也就是替换两个ssl库文件，以下为该补丁文件打包下载地址详见：https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808解决方法：1234567cd ruby-2.3.1wget --no-check-certificate https://bugs.ruby-lang.org/projects/rubytrunk/repository/revisions/41808/raw/ext/openssl/ossl_pkey_ec.cwget --no-check-certificate https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808/raw/test/openssl/test_pkey_ec.rbmv ext/openssl/ossl_pkey_ec.c ext/openssl/ossl_pkey_ec.c.bakcp ossl_pkey_ec.c ext/openssl/mv test/openssl/test_pkey_ec.rb test/openssl/test_pkey_ec.rb.bakcp test_pkey_ec.rb test/openssl/ 重新编译：make &amp;&amp; make install 将ruby命令集加入系统环境变量12echo "PATH=$PATH:/usr/local/ruby/bin;export PATH" &gt;&gt; /etc/profilesource /etc/profile 检查ruby版本ruby -vgem --version irb 环境测试irb(main):001:0&gt; 3+5=&gt; 8irb(main):002:0&gt; puts “hello world!”hello world!irb(main):001:0&gt;exit Mac10.12mac在10.11之后的版本，安全机制发生了变更，/usr/local/目录已经没有写权限了。 xcode升级到8.0及以上版本 不要用mac自带的ruby及brew方式安装ruby，容易出各种错误。安装rvm（ruby的版本控制器）https://github.com/rvm/rvmcurl -L https://get.rvm.io | bash -s stable --autolibs=enabled --ruby --rails --trace可能会有警告，有提示把某一句加入/Users/用户名/.bash_profile 中，重开终端。rvm -v显示版本，说明安装成功。 安装homebrew （官网http://brew.sh/index_zh-cn.html） github:https://github.com/Homebrew/homebrew /usr/bin/ruby使用的是mac自带的2.0版本的ruby，也可以直接用ruby使用新版本的ruby。1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" brew -v 列出ruby可安装的版本信息rvm list known安装一个ruby版本rvm install 2.3.1如果想设置为默认版本，可以用这条命令来完成rvm use 2.3.1 --default 一般上一步安装好就已经设为默认了查看已安装的rubyrvm list卸载一个已安装ruby版本rvm remove 2.3.1ruby -v会发现版本号变成最新的啦！ 检查ruby版本ruby -vgem --version irb 环境测试irb(main):001:0&gt; 3+5=&gt; 8irb(main):002:0&gt; puts “hello world!”hello world!irb(main):001:0&gt;exit 安装各种扩展（可选）rails：ruby web框架gem install rails Windows直接到官网下载：http://rubyinstaller.org/downloadshttp://www.ruby-lang.org/zh_cn/downloads/ （源码）安装时勾选自动添加PATH，安装完成后重启生效。也可以cmd运行 set a = b 然后重开cmd，环境变量就生效了。 Ruby源国外源如果屏蔽了，更改gem安装源到淘宝，每条命令都有成功提示gem update --system #升级gem版本gem uninstall rubygems-update #移除gem升级脚本gem sources --remove https://rubygems.org/gem sources -a https://ruby.taobao.org/gem sources -l windows 不要更换源，添加不了淘宝源，就换回原来的源。 Mac 如果报-SSL错误请把https改为http。 CURRENT SOURCES http://ruby.taobao.org/]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ruby2.3.1安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenResty（高性能web服务器）]]></title>
    <url>%2Fposts%2F29074%2F</url>
    <content type="text"><![CDATA[OpenResty参考资料： 官方: http://openresty.org/Github: https://github.com/agentzh/ngx_openresty https://github.com/openresty/ 视频学习：http://www.stuq.org/course/detail/1015 OpenResty最佳实践：https://moonbingbing.gitbooks.io/openresty-best-practices/content/ （https://github.com/moonbingbing/openresty-best-practices） 安装OpenResty默认安装路径如下 /usr/local/openresty/ OpenResty，也被称为“ngx_openresty”，是一个基于Nginx的核心Web应用程序服务器，它包含了大量的第三方的Nginx模块和大部分系统依赖包。 OpenResty不是Nginx的分支，它只是一个软件包。主要有章亦春维护。为什么是OpenResty？OpenResty允许开发人员使用lua编程语言构建现有的Nginx的C模块，支持高流量的应用程序。 依赖的软件包： perl 5.6.1+ libreadline libpcre libssl Debian 和 Ubuntu系统：1apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make Fedora 、RedHat 和 centos系统：1yum install readline-devel pcre-devel openssl-devel gc-c++ -y 下载OpenResty、解压、编译、安装：版本选择：https://openresty.org/en/download.html123456wget http://openresty.org/download/ngx_openresty-1.5.8.1.tar.gztar xzvf ngx_openresty-1.5.8.1.tar.gzcd ngx_openresty-1.5.8.1/./configure --with-luajitmakemake install 另外的配置选项：1234567./configure --prefix=/opt/openresty --with-luajit --without-http_redis2_module --with-http_iconv_module --with-http_postgres_module -j2--help to see more options 此时安装完成，打开localhost就可以看到nginx页面了。]]></content>
      <categories>
        <category>web服务器</category>
      </categories>
      <tags>
        <tag>OpenResty</tag>
        <tag>高性能web服务器</tag>
      </tags>
  </entry>
</search>