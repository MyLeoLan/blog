<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeoLan&#39;s Blog</title>
  <subtitle>有时候正是不报期望的人做出了人们不敢期望之事！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.leolan.top/"/>
  <updated>2017-03-07T07:24:33.836Z</updated>
  <id>https://www.leolan.top/</id>
  
  <author>
    <name>LeoLan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://www.leolan.top/posts/33708/"/>
    <id>https://www.leolan.top/posts/33708/</id>
    <published>2017-02-28T05:44:51.000Z</published>
    <updated>2017-03-07T07:24:33.836Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h2><p>安装RabbitMQ还比较繁琐，目前先这样，之后有时间再做改动。如果报缺少某些库，看最底下，初始环境不同。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装依赖包和环境</span></div><div class="line">yum -y install unixODBC unixODBC-devel java libxslt xmlto</div><div class="line"></div><div class="line"><span class="comment">#安装Make（版本4以上）</span></div><div class="line">http:<span class="regexp">//</span>ftp.gnu.org/gnu/make/make<span class="number">-4.2</span>.tar.gz   <span class="number">4</span>以上</div><div class="line">tar -zxvf make<span class="number">-4.2</span>.tar.gz</div><div class="line">cd make<span class="number">-4.2</span></div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div><div class="line"></div><div class="line">mv /usr/bin/make /usr/bin/make.bak</div><div class="line">vim /etc/profile</div><div class="line">export PATH=$PATH:/usr/local/bin/make</div><div class="line">source /etc/profile</div><div class="line"></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></div><div class="line"><span class="comment">#安装simplejson</span></div><div class="line">yum install ptyhon -y</div><div class="line">wget https:<span class="regexp">//</span>pypi.python.org/packages/<span class="number">40</span>/ad/<span class="number">52</span>c1f3a562df3b210e8f165e1aa243a178c454ead65476a39fa3ce1847b6/simplejson<span class="number">-3.10</span><span class="number">.0</span>.tar.gz<span class="comment">#md5=426a9631d22851a7a970b1a677368b15</span></div><div class="line">tar zxvf simplejson<span class="number">-3.10</span><span class="number">.0</span>.tar.gz</div><div class="line">cd simplejson<span class="number">-3.10</span><span class="number">.0</span></div><div class="line">python setup.py build</div><div class="line">python setup.py install</div><div class="line"></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></div><div class="line"><span class="comment">#安装erlang</span></div><div class="line">wget http:<span class="regexp">//</span>www.erlang.org/download/otp_src_19<span class="number">.2</span>.tar.gz</div><div class="line">tar -zxvf otp_src_19<span class="number">.2</span>.tar.gz</div><div class="line">cd otp_src_19<span class="number">.2</span></div><div class="line">./configure --without-javac</div><div class="line">make</div><div class="line">make install</div><div class="line"></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></div><div class="line"><span class="comment">#安装rabbitmq</span></div><div class="line">wget http:<span class="regexp">//</span>www.rabbitmq.com/releases/rabbitmq-server/v3<span class="number">.6</span><span class="number">.6</span>/rabbitmq-server<span class="number">-3.6</span><span class="number">.6</span>.tar.xz</div><div class="line">tar -vxf rabbitmq-server<span class="number">-3.6</span><span class="number">.6</span>.tar.xz</div><div class="line">cd rabbitmq-server<span class="number">-3.6</span><span class="number">.6</span></div><div class="line">/usr/local/bin/make TARGET_DIR=/usr/local/rabbitmq SBIN_DIR=/usr/local/rabbitmq/sbin MAN_DIR=/usr/local/rabbitmq/man DOC_INSTALL_DIR=/usr/local/rabbitmq/doc install</div><div class="line"></div><div class="line"><span class="comment">#配置</span></div><div class="line">mkdir /etc/rabbitmq</div><div class="line">cp ./deps/rabbit/docs/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</div><div class="line"></div><div class="line"><span class="comment">#启动插件</span></div><div class="line">/usr/local/lib/erlang/lib/rabbitmq_server<span class="number">-0.0</span><span class="number">.0</span>/sbin/rabbitmq-plugins enable rabbitmq_management</div><div class="line">/usr/local/lib/erlang/lib/rabbitmq_server<span class="number">-0.0</span><span class="number">.0</span>/sbin/rabbitmq-plugins enable rabbitmq_mqtt</div><div class="line"></div><div class="line"><span class="comment">#启动</span></div><div class="line">/usr/local/lib/erlang/lib/rabbitmq_server<span class="number">-0.0</span><span class="number">.0</span>/sbin/rabbitmq-server &amp;</div><div class="line"></div><div class="line"><span class="comment">#放行端口</span></div><div class="line">vim /etc/sysconfig/iptables</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport <span class="number">15672</span> -j ACCEPT</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#浏览器打开</span></div><div class="line">http:<span class="regexp">//</span>localhost:<span class="number">15672</span>   guest  guest</div><div class="line"></div><div class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></div></pre></td></tr></table></figure>
<hr>
<p>安装elixir环境的简单方法<br><a href="https://segmentfault.com/a/1190000000741218" target="_blank" rel="external">https://segmentfault.com/a/1190000000741218</a><br><a href="https://github.com/elixir-lang/elixir/archive/v1.4.2.tar.gz" target="_blank" rel="external">https://github.com/elixir-lang/elixir/archive/v1.4.2.tar.gz</a></p>
<p>配置参考：<br><a href="http://blog.csdn.net/historyasamirror/article/details/6827870" target="_blank" rel="external">http://blog.csdn.net/historyasamirror/article/details/6827870</a><br><a href="http://blog.csdn.net/feng4656/article/details/17371005" target="_blank" rel="external">http://blog.csdn.net/feng4656/article/details/17371005</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerl
    
    </summary>
    
      <category term="环境搭建" scheme="https://www.leolan.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="RabbitMQ" scheme="https://www.leolan.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://www.leolan.top/posts/27273/"/>
    <id>https://www.leolan.top/posts/27273/</id>
    <published>2017-02-27T08:51:58.000Z</published>
    <updated>2017-02-27T09:37:48.108Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h2><p>要有基本编译环境。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum install <span class="keyword">tcl</span> gcc -<span class="keyword">y</span></div><div class="line"></div><div class="line">wget http://download.redis.io/releases/redis-<span class="number">2.8</span>.<span class="number">9</span>.tar.gz</div><div class="line">tar xzf redis-<span class="number">2.8</span>.<span class="number">9</span>.tar.gz</div><div class="line"><span class="keyword">cd</span> redis-<span class="number">2.8</span>.<span class="number">9</span></div><div class="line"><span class="keyword">make</span></div><div class="line"><span class="keyword">make</span> test</div><div class="line"><span class="keyword">make</span> install</div></pre></td></tr></table></figure></p>
<p>测试通过后安装，安装后会自动把redis-server,redis-cli,redis-benchmark,redis-check-aof,redis-check-dump复制到<strong>/usr/local/bin</strong>目录下。</p>
<p>编辑redis.conf文件,<code>vim redis.conf</code>修改daemonize no改成yes。</p>
<p>复制redis.conf到/etc目录下<code>cp redis.conf /etc</code></p>
<p>编辑服务管理文件<code>vim /etc/init.d/redis</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###########################</span></div><div class="line"><span class="comment">#chkconfig: 2345 10 90</span></div><div class="line"><span class="comment">#description: Start and Stop redis</span></div><div class="line">PATH=/usr/<span class="built_in">local</span>/bin:/sbin:/usr/bin:/bin</div><div class="line">   </div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</div><div class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/bin/redis-cli</div><div class="line">   </div><div class="line">PIDFILE=/var/run/redis.pid</div><div class="line">CONF=<span class="string">"/etc/redis.conf"</span></div><div class="line">   </div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></div><div class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ] </div><div class="line">        <span class="keyword">then</span></div><div class="line">              <span class="built_in">echo</span> <span class="string">"Redis is running..."</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span></div><div class="line">                <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span> SHUTDOWN</div><div class="line">                <span class="keyword">while</span> [ -x <span class="variable">$&#123;PIDFILE&#125;</span> ]</div><div class="line">               <span class="keyword">do</span></div><div class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span></div><div class="line">                    sleep 1</div><div class="line">                <span class="keyword">done</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">   restart|force-reload)</div><div class="line">        <span class="variable">$&#123;0&#125;</span> stop</div><div class="line">        <span class="variable">$&#123;0&#125;</span> start</div><div class="line">        ;;</div><div class="line">  *)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2</div><div class="line">        <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="comment">##############################</span></div></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#修改权限</span></div><div class="line">chmod +x /etc/init.d/redis</div><div class="line"></div><div class="line"><span class="meta">#设置开机自动启动服务</span></div><div class="line">chkconfig redis on</div><div class="line"> </div><div class="line"><span class="meta">#启动服务：</span></div><div class="line">service redis start</div><div class="line"></div><div class="line"><span class="meta">#停止服务：</span></div><div class="line">service redis stop</div><div class="line"></div><div class="line"><span class="meta">#检查Redis是否正在工作</span></div><div class="line">redis-cli</div></pre></td></tr></table></figure>
<p>配置防火墙打开对应的端口：<code>vi /etc/sysconfig/iptables</code><br><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT</code></p>
<p>重启防火墙<code>service iptables restart</code></p>
<hr>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">update</span> </div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> redis-<span class="keyword">server</span></div><div class="line"></div><div class="line">#检查Redis是否正在工作</div><div class="line">redis-cli</div></pre></td></tr></table></figure>
<hr>
<h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><p>参考：<br><a href="http://www.centoscn.com/image-text/config/2015/0728/5928.html" target="_blank" rel="external">http://www.centoscn.com/image-text/config/2015/0728/5928.html</a><br><a href="http://doc.redisfans.com/" target="_blank" rel="external">http://doc.redisfans.com/</a></p>
<hr>
<h1 id="Redis快速入门"><a href="#Redis快速入门" class="headerlink" title="Redis快速入门"></a>Redis快速入门</h1><p><a href="http://www.yiibai.com/redis/redis_quick_guide.html" target="_blank" rel="external">http://www.yiibai.com/redis/redis_quick_guide.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerl
    
    </summary>
    
      <category term="环境搭建" scheme="https://www.leolan.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Redis" scheme="https://www.leolan.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://www.leolan.top/posts/9355/"/>
    <id>https://www.leolan.top/posts/9355/</id>
    <published>2017-02-25T10:15:37.000Z</published>
    <updated>2017-02-27T08:47:33.048Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h1><p>Nginx负载均衡适用于小规模的集群，负载均衡的本质是所有客户端都从服务器A入口，最后被分流到B,C,D,E…服务器，出口也是经过服务器A，这样在同一个机房内只需要一个公网IP即可实现分流，但服务器A的压力及带宽是关键部分。（对于大集群可以用DNS分流）</p>
<hr>
<h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><p>Nginx反向代理是所有客户端都从服务器A入口，最后被分流到B,C,D,E…服务器，之后的连接是和各自的B,C,D,E…服务器的连接，这样每台服务器都要有公网IP可跨机房，也减少了服务器A的压力。</p>
<hr>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><h2 id="upstream模块常用参数"><a href="#upstream模块常用参数" class="headerlink" title="upstream模块常用参数"></a>upstream模块常用参数</h2><p>1、<strong>轮询（默认）</strong><br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>2、<strong>weight</strong><br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>3、<strong>ip_hash</strong><br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br>4、<strong>fair（第三方）</strong><br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br>5、<strong>url_hash（第三方）</strong><br>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>server 192.168.0.100:80</td>
<td>负载均衡后端RealServer的IP或者域名，端口不写的话默认为80。高并发场景用域名，再通过DNS进行负载均衡</td>
</tr>
<tr>
<td>weight=5</td>
<td>权重，默认为1，权重越大接收的请求越多</td>
</tr>
<tr>
<td>max_fails=2</td>
<td>失败超过指定次数会暂停或请求转往其它服务器（最大尝试的失败次数），默认为1,0表示禁止失败尝试</td>
</tr>
<tr>
<td>fail_timeout=10s</td>
<td>失败超过指定次数后暂停时间，失败超时时间，默认是10秒，通常3s左右比较合适</td>
</tr>
<tr>
<td>backup</td>
<td>热备配置，前段RealServer出现问题后会自动上线backup服务器，其它服务器超时或down时才会请求backup服务器</td>
</tr>
<tr>
<td>down</td>
<td>标志服务器不可用（负载过重或者不参与负载），这个参数通常配合IP_HASH使用</td>
</tr>
</tbody>
</table>
<p>例：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">http &#123;    </div><div class="line">    </div><div class="line">    upstream  www.test1.com &#123;</div><div class="line">          ip_hash<span class="comment">;</span></div><div class="line">          server   <span class="number">172.16</span><span class="meta">.125</span><span class="meta">.76</span>:<span class="number">8066</span> weight=<span class="number">10</span><span class="comment">;</span></div><div class="line">          server   <span class="number">172.16</span><span class="meta">.125</span><span class="meta">.76</span>:<span class="number">8077</span> <span class="meta">down</span><span class="comment">;</span></div><div class="line">          server   <span class="number">172.16</span><span class="meta">.0</span><span class="meta">.18</span>:<span class="number">8066</span> max_fails=<span class="number">3</span> fail_timeout=30s<span class="comment">;</span></div><div class="line">          server   <span class="number">172.16</span><span class="meta">.0</span><span class="meta">.18</span>:<span class="number">8077</span> backup<span class="comment">;</span></div><div class="line">     &#125;</div><div class="line">      </div><div class="line">     upstream  www.test2.com &#123;</div><div class="line">          server   <span class="number">172.16</span><span class="meta">.0</span><span class="meta">.21</span>:<span class="number">8066</span><span class="comment">;</span></div><div class="line">          server   <span class="number">192.168</span><span class="meta">.76</span><span class="meta">.98</span>:<span class="number">8066</span><span class="comment">;         </span></div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line">     server &#123;</div><div class="line">        listen       <span class="number">80</span><span class="comment">;</span></div><div class="line">        server_name  www.test1.com<span class="comment">;        </span></div><div class="line">       </div><div class="line">        location /&#123;</div><div class="line">           proxy_pass        http://www.test1.com<span class="comment">;</span></div><div class="line">           proxy_set_header   Host             $host<span class="comment">;</span></div><div class="line">           proxy_set_header   X-Real-<span class="built_in">IP</span>        $remote_addr<span class="comment">;</span></div><div class="line">           proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for<span class="comment">;</span></div><div class="line">        &#125;      </div><div class="line">     &#125;  </div><div class="line">     </div><div class="line">     server &#123;</div><div class="line">        listen       <span class="number">80</span><span class="comment">;</span></div><div class="line">        server_name  www.test2.com<span class="comment">;        </span></div><div class="line">       </div><div class="line">        location /&#123;</div><div class="line">           proxy_pass        http://www.test2.com<span class="comment">;</span></div><div class="line">           proxy_set_header   Host             $host<span class="comment">;</span></div><div class="line">           proxy_set_header   X-Real-<span class="built_in">IP</span>        $remote_addr<span class="comment">;</span></div><div class="line">           proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for<span class="comment">;</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="配置部分"><a href="#配置部分" class="headerlink" title="配置部分"></a>配置部分</h1><p>一般Nginx的配置文件会分成两部分，这样方便管理。<br>全局配置：<strong>/etc/nginx/nginx.conf</strong><br>Server配置：<strong>/etc/nginx/conf.d/default.conf</strong></p>
<p>简单的Nginx负载均衡和反向代理：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> linuxleolan&#123;</div><div class="line"><span class="comment">#server后用ip,不要用localhost和127.0.0.1，这两个地址测试不了。</span></div><div class="line">                <span class="attribute">server</span> <span class="number">123.207.92.209</span>;</div><div class="line">                <span class="attribute">server</span> <span class="number">123.207.92.245</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span>  localhost;           <span class="comment">#localhost或www.xxx.com(域名指向此服务器)</span></div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_pass</span> http://linuxidcleolan;   <span class="comment">#调用upstream里设定的变量</span></div><div class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;          <span class="comment">#缓存开关</span></div><div class="line">        </div><div class="line">        <span class="comment">#以下三行是获得前端IP，反向代理设置。</span></div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考资料：<br><a href="http://www.ilanni.com/?p=7631" target="_blank" rel="external">http://www.ilanni.com/?p=7631</a><br><a href="http://www.cnblogs.com/jacktang/p/3669115.html" target="_blank" rel="external">http://www.cnblogs.com/jacktang/p/3669115.html</a><br><a href="http://www.linuxidc.com/Linux/2016-04/130350.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2016-04/130350.htm</a><br><a href="http://www.cnblogs.com/mecity/archive/2011/06/20/2085529.html" target="_blank" rel="external">http://www.cnblogs.com/mecity/archive/2011/06/20/2085529.html</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Nginx负载均衡&quot;&gt;&lt;a href=&quot;#Nginx负载均衡&quot; 
    
    </summary>
    
      <category term="web服务器" scheme="https://www.leolan.top/categories/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="https://www.leolan.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Excel表格合并</title>
    <link href="https://www.leolan.top/posts/48831/"/>
    <id>https://www.leolan.top/posts/48831/</id>
    <published>2017-01-13T01:52:27.000Z</published>
    <updated>2017-02-27T08:47:33.049Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="（先看我）宏处理步骤"><a href="#（先看我）宏处理步骤" class="headerlink" title="（先看我）宏处理步骤"></a>（先看我）宏处理步骤</h1><p>把多个要合并的excel表都放在同一个文件夹里面，并在这个文件夹里面新建一个excel。</p>
<p>打开新建的excel表，并右键单击sheet1，找到“查看代码”，单击进去。进去之后就看到了宏计算界面。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170113/103623152.png" alt="mark"></p>
<p>然后我们把下面这些宏计算的代码复制进去，然后找到工具栏上面的<strong>“运行”</strong>下的<strong>“运行子过程/用户窗体”</strong>就可以执行代码了。</p>
<hr>
<h2 id="合并多个表格（表格内的Sheet会自动拆分新建sheet）到1个表格的多个Sheet中"><a href="#合并多个表格（表格内的Sheet会自动拆分新建sheet）到1个表格的多个Sheet中" class="headerlink" title="合并多个表格（表格内的Sheet会自动拆分新建sheet）到1个表格的多个Sheet中"></a>合并多个表格（表格内的Sheet会自动拆分新建sheet）到1个表格的多个Sheet中</h2><p>Excel会复制工作表的名称并自动根据检测结果附加(2)、(3)等数字编号。工作簿中与其他工作表相关的任何公式也会自动更新的新的名称。</p>
<p>宏合并代码：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Sub</span> CombineWorkbooks()</div><div class="line">    <span class="keyword">Dim</span> FilesToOpen</div><div class="line">    <span class="keyword">Dim</span> x As Integer</div><div class="line"></div><div class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> ErrHandler</div><div class="line">    Application.ScreenUpdating = <span class="literal">False</span></div><div class="line"></div><div class="line">    FilesToOpen = Application.GetOpenFilename(FileFilter: = <span class="string">"MicroSoft Excel文件(*.xls),*.xls"</span>,MultiSelect: = <span class="literal">True</span>,Title: = <span class="string">"要合并的文件"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">If</span> <span class="built_in">TypeName</span>(FilesToOpen) = <span class="string">"Boolean"</span> <span class="keyword">then</span></div><div class="line">        <span class="built_in">MsgBox</span> <span class="string">"没有选中文件"</span></div><div class="line">        <span class="keyword">Goto</span> ExitHandler</div><div class="line">    <span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"></div><div class="line">    x = <span class="number">1</span></div><div class="line">    <span class="keyword">While</span> x &lt;= <span class="built_in">UBound</span>(filestoopen)</div><div class="line">        Workbooks.Open fileName: = filestoopen(x)</div><div class="line">        Sheets().Move After: = ThisWorkbook.Sheets (ThisWorkbook.Sheets.Count)</div><div class="line">        x = x + <span class="number">1</span></div><div class="line">    <span class="keyword">Wend</span></div><div class="line">ExitHandler:</div><div class="line">    Application.ScreenUpdating = <span class="literal">True</span></div><div class="line">    <span class="keyword">Exit</span> <span class="keyword">Sub</span></div><div class="line">ErrHandler:</div><div class="line">    <span class="built_in">MsgBox</span> <span class="built_in">Err</span>.Description</div><div class="line">    <span class="keyword">Resume</span> ExitHandler</div><div class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></div></pre></td></tr></table></figure></p>
<p>运行后弹出选择表格的窗口，选个要合并的表格就能合并了，再删除第一个空的Sheet表，保存选择“是”（不启用宏，不保存宏信息）</p>
<hr>
<h2 id="合并多个表格（表格内的多个Sheet也会合并在同一个Sheet中）到1个表格的1个Sheet中"><a href="#合并多个表格（表格内的多个Sheet也会合并在同一个Sheet中）到1个表格的1个Sheet中" class="headerlink" title="合并多个表格（表格内的多个Sheet也会合并在同一个Sheet中）到1个表格的1个Sheet中"></a>合并多个表格（表格内的多个Sheet也会合并在同一个Sheet中）到1个表格的1个Sheet中</h2><p>宏合并代码：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Sub</span> 合并当前目录下所有工作簿的全部工作表()</div><div class="line"><span class="keyword">Dim</span> MyPath, MyName, AWbName</div><div class="line"><span class="keyword">Dim</span> Wb <span class="keyword">As</span> Workbook, WbN <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">Dim</span> G <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line"><span class="keyword">Dim</span> Num <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line"><span class="keyword">Dim</span> BOX <span class="keyword">As</span> <span class="built_in">String</span></div><div class="line">Application.ScreenUpdating = <span class="literal">False</span></div><div class="line">MyPath = ActiveWorkbook.Path</div><div class="line">MyName = Dir(MyPath &amp; <span class="string">"\"</span> &amp; <span class="string">"*.xls"</span>)</div><div class="line">AWbName = ActiveWorkbook.Name</div><div class="line">Num = <span class="number">0</span></div><div class="line"><span class="keyword">Do</span> <span class="keyword">While</span> MyName &lt;&gt; <span class="string">""</span></div><div class="line"><span class="keyword">If</span> MyName &lt;&gt; AWbName <span class="keyword">Then</span></div><div class="line"><span class="keyword">Set</span> Wb = Workbooks.Open(MyPath &amp; <span class="string">"\"</span> &amp; MyName)</div><div class="line">Num = Num + <span class="number">1</span></div><div class="line"><span class="keyword">With</span> Workbooks(<span class="number">1</span>).ActiveSheet</div><div class="line">.Cells(.Range(<span class="string">"B65536"</span>).<span class="keyword">End</span>(xlUp).Row + <span class="number">2</span>, <span class="number">1</span>) = Left(MyName, Len(MyName) - <span class="number">4</span>)</div><div class="line"><span class="keyword">For</span> G = <span class="number">1</span> <span class="keyword">To</span> Sheets.Count</div><div class="line">Wb.Sheets(G).UsedRange.Copy .Cells(.Range(<span class="string">"B65536"</span>).<span class="keyword">End</span>(xlUp).Row + <span class="number">1</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">Next</span></div><div class="line">WbN = WbN &amp; Chr(<span class="number">13</span>) &amp; Wb.Name</div><div class="line">Wb.Close <span class="literal">False</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">With</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">If</span></div><div class="line">MyName = Dir</div><div class="line"><span class="keyword">Loop</span></div><div class="line">Range(<span class="string">"B1"</span>).<span class="keyword">Select</span></div><div class="line">Application.ScreenUpdating = <span class="literal">True</span></div><div class="line">MsgBox <span class="string">"共合并了"</span> &amp; Num &amp; <span class="string">"个工作薄下的全部工作表。如下："</span> &amp; Chr(<span class="number">13</span>) &amp; WbN, vbInformation, <span class="string">"提示"</span></div><div class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="合并单个表格内的多个Sheet到本表格的1个新Sheet中"><a href="#合并单个表格内的多个Sheet到本表格的1个新Sheet中" class="headerlink" title="合并单个表格内的多个Sheet到本表格的1个新Sheet中"></a>合并单个表格内的多个Sheet到本表格的1个新Sheet中</h2><p>宏合并代码：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Sub 合并当前工作簿下的所有工作表()</div><div class="line">Application.ScreenUpdating = <span class="keyword">False</span></div><div class="line"><span class="keyword">For</span> j = <span class="number">1</span> To Sheets.<span class="keyword">Count</span></div><div class="line">   <span class="keyword">If</span> Sheets(j).Name &lt;&gt; ActiveSheet.Name Then</div><div class="line">       X = <span class="keyword">Range</span>(<span class="string">"A65536"</span>).<span class="keyword">End</span>(xlUp).<span class="keyword">Row</span> + <span class="number">1</span></div><div class="line">       Sheets(j).UsedRange.Copy <span class="keyword">Cells</span>(X, <span class="number">1</span>)</div><div class="line">   <span class="keyword">End</span> <span class="keyword">If</span></div><div class="line"><span class="keyword">Next</span></div><div class="line"><span class="keyword">Range</span>(<span class="string">"B1"</span>).<span class="keyword">Select</span></div><div class="line">Application.ScreenUpdating = <span class="keyword">True</span></div><div class="line">MsgBox <span class="string">"当前工作簿下的全部工作表已经合并完毕！"</span>, vbInformation, <span class="string">"提示"</span></div><div class="line"><span class="keyword">End</span> Sub</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;（先看我）宏处理步骤&quot;&gt;&lt;a href=&quot;#（先看我）宏处理步骤
    
    </summary>
    
      <category term="办公软件" scheme="https://www.leolan.top/categories/%E5%8A%9E%E5%85%AC%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Excel表格合并" scheme="https://www.leolan.top/tags/Excel%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>fail2ban 防爆力破解</title>
    <link href="https://www.leolan.top/posts/32284/"/>
    <id>https://www.leolan.top/posts/32284/</id>
    <published>2017-01-12T06:48:46.000Z</published>
    <updated>2017-02-27T08:47:33.065Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>fail2ban 是 Linux 上的一个著名的入侵保护的开源框架，它会监控多个系统的日志文件（例如：/var/log/auth.log 或者 /var/log/secure）并根据检测到的任何可疑的行为自动触发不同的防御动作。事实上，fail2ban 在防御对SSH服务器的暴力密码破解上非常有用。同时也能用于ftp防暴力破解。</p>
<p>官网：<a href="http://www.fail2ban.org" target="_blank" rel="external">http://www.fail2ban.org</a></p>
<hr>
<h1 id="安装Fail2ban"><a href="#安装Fail2ban" class="headerlink" title="安装Fail2ban"></a>安装Fail2ban</h1><p>CentOS 或 RHEL上安装fail2ban,首先设置<a href="https://linux.cn/article-2324-1.html" target="_blank" rel="external">EPEL</a>仓库，然后运行以下命令。<br><code>sudo yum install fail2ban</code></p>
<p>在ubuntu，Debian 或 Linux Mint上安装fail2ban：<br><code>sudo apt-get install fail2ban</code></p>
<hr>
<h1 id="配置Fail2ban"><a href="#配置Fail2ban" class="headerlink" title="配置Fail2ban"></a>配置Fail2ban</h1><p>需要编辑其配置文件 /etc/fail2ban/jail.conf。 在配置文件的“[DEFAULT]”区，你可以在此定义所有受监控的服务的默认参数，另外在特定服务的配置部分，你可以为每个服务（例如SSH，Apache等）设置特定的配置来覆盖默认的参数配置。</p>
<p>在针对服务的监狱区（在[DEFAULT]区后面的地方），你需要定义一个[ssh-iptables]区，这里用来定义SSH相关的监狱配置。真正的禁止IP地址的操作是通过iptables完成的。</p>
<p>下面是一个包含“ssh-iptables”监狱配置的/etc/fail2ban/jail.conf的文件样例。当然根据你的需要，你也可以指定其他的应用监狱。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/fail2ban/jail.<span class="keyword">local</span></div></pre></td></tr></table></figure></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">[DEFAULT]</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="attr">bantime</span> = <span class="number">86400</span>   # 客户端主机被禁止的时长（秒）</div><div class="line"><span class="attr">maxretry</span> = <span class="number">5</span>      # 客户端主机被禁止前允许失败的次数 </div><div class="line"><span class="attr">findtime</span> = <span class="number">600</span>    # 查找失败次数的时长（秒）</div><div class="line"><span class="attr">ignoreip</span> = <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">172.31</span>.<span class="number">0.0</span>/<span class="number">24</span> <span class="number">10.10</span>.<span class="number">0.0</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">24</span></div><div class="line"><span class="comment"># 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名</span></div><div class="line"><span class="comment"># 用于指定哪些地址可以忽略 fail2ban 防御</span></div><div class="line"></div><div class="line"><span class="attr">mta</span> = sendmail    # 邮件通知</div><div class="line"><span class="section"></span></div><div class="line">[ssh-iptables]</div><div class="line"><span class="attr">enabled</span> = <span class="literal">true</span></div><div class="line"><span class="attr">filter</span> = sshd</div><div class="line"><span class="attr">action</span> = iptables[name=SSH, port=ssh, protocol=tcp]</div><div class="line"><span class="attr">sendmail-whois[name</span>=SSH, dest=your@email.com, sender=fail2ban@email.com]</div><div class="line"></div><div class="line"><span class="attr">logpath</span> = /var/log/auth.log   # Debian 系的发行版 </div><div class="line"><span class="attr">logpath</span> = /var/log/secure     # Red Hat 系的发行版</div><div class="line"><span class="attr">maxretry</span> = <span class="number">3</span>                  # ssh 服务的最大尝试次数</div></pre></td></tr></table></figure>
<p>根据上述配置，fail2ban会自动禁止在最近10分钟内有超过3次访问尝试失败的任意IP地址。一旦被禁，这个IP地址将会在24小时内一直被禁止访问 SSH 服务。这个事件也会通过sendemail发送邮件通知。</p>
<p>一旦配置文件准备就绪，按照以下方式重启fail2ban服务。</p>
<p>在 Debian, Ubuntu 或 CentOS/RHEL 6:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service fail2ban <span class="built_in">restart</span></div></pre></td></tr></table></figure></p>
<p>在 Fedora 或 CentOS/RHEL 7:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">restart</span> fail2ban</div></pre></td></tr></table></figure></p>
<p>验证fail2ban成功运行，使用参数’ping’来运行fail2ban-client 命令。 如果fail2ban服务正常运行，你可以看到“pong（嘭）”作为响应。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fail2ban-client ping</div><div class="line">提示</div><div class="line"><span class="built_in">Server</span> replied: pong</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="测试-fail2ban"><a href="#测试-fail2ban" class="headerlink" title="测试 fail2ban"></a>测试 fail2ban</h1><p>测试fail2ban是否能正常工作，尝试通过使用错误的密码来用SSH连接到服务器模拟一个暴力破解攻击。与此同时，监控 /var/log/fail2ban.log，该文件记录在fail2ban中发生的任何敏感事件。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo tail -f /var/<span class="built_in">log</span>/fail2ban.<span class="built_in">log</span></div><div class="line"><span class="comment">#具体日志的位置要看配置文件定义</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="检查状态、解禁IP地址"><a href="#检查状态、解禁IP地址" class="headerlink" title="检查状态、解禁IP地址"></a>检查状态、解禁IP地址</h1><p>由于fail2ban的“ssh-iptables”监狱使用iptables来阻塞问题IP地址，你可以通过以下方式来检测当前iptables来验证禁止规则。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables <span class="comment">--list -n</span></div></pre></td></tr></table></figure></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination</div><div class="line">fail2ban-SSH  tcp  --  <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>            <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>           tcp <span class="keyword">dp</span><span class="variable">t:22</span></div><div class="line"> </div><div class="line">Chain FORWARD (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination</div><div class="line"> </div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination</div><div class="line"> </div><div class="line">Chain fail2ban-SSH (<span class="number">1</span> references)</div><div class="line">target     prot <span class="keyword">opt</span> <span class="keyword">source</span>               destination</div><div class="line">DROP       <span class="keyword">all</span>  --  <span class="number">192.168</span>.<span class="number">1.8</span>          <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></div><div class="line">RETURN     <span class="keyword">all</span>  --  <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>            <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></div></pre></td></tr></table></figure>
<p>想要<strong>从fail2ban中解锁某个IP地址</strong>，你可以使用iptables命令：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-D</span> <span class="selector-tag">fail2ban-SSH</span> <span class="selector-tag">-s</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.8</span> <span class="selector-tag">-j</span> <span class="selector-tag">DROP</span></div></pre></td></tr></table></figure></p>
<p>可以使用上述的iptables命令手动地检验和管理fail2ban的IP阻塞列表，但实际上有一个适当的方法就是使用fail2ban-client命令行工具。这个命令不仅允许你对”ssh-iptables”监狱进行管理，同时也是一个标准的命令行接口，可以管理其他类型的fail2ban监狱。</p>
<p>为了<strong>检验fail2ban状态</strong>（会显示出当前活动的监狱列表）：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fail2ban-<span class="keyword">client</span> status</div></pre></td></tr></table></figure></p>
<p>为了<strong>检验一个特定监狱的状态</strong>（例如ssh-iptables):<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fail2ban-<span class="keyword">client</span> status ssh-iptables</div></pre></td></tr></table></figure></p>
<p><strong>解锁特定的IP地址</strong>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">fail2ban-client</span> <span class="selector-tag">set</span> <span class="selector-tag">ssh-iptables</span> <span class="selector-tag">unbanip</span> 192<span class="selector-class">.168</span><span class="selector-class">.xxx</span><span class="selector-class">.xxx</span></div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>:如果你停止了Fail2ban 服务，那么所有的IP地址都会被解锁。当你重启 Fail2ban，它会从/etc/log/secure(或 /var/log/auth.log)中找到异常的IP地址列表，如果这些异常地址的发生时间仍然在禁止时间内，那么Fail2ban会重新将这些IP地址禁止。</p>
<hr>
<h1 id="Fail2ban-自动启动"><a href="#Fail2ban-自动启动" class="headerlink" title="Fail2ban 自动启动"></a>Fail2ban 自动启动</h1><p>成功地测试了fail2ban之后，最后一个步骤就是在你的服务器上让其在开机时自动启动。在基于Debian的发行版中，fail2ban已经默认让自动启动生效。在基于Red-Hat的发行版中，按照下面的方式让自动启动生效。</p>
<p>在 CentOS/RHEL 6中:<code>chkconfig fail2ban on</code><br>在 Fedora 或 CentOS/RHEL 7:<code>systemctl enable fail2ban</code></p>
<hr>
<p>原文：<a href="https://linux.cn/article-5067-1.html" target="_blank" rel="external">https://linux.cn/article-5067-1.html</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;fail2ban 是 Linux 上的一个著名的入侵保护的开源框架，它会监
    
    </summary>
    
      <category term="系统管理" scheme="https://www.leolan.top/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="fail2ban 防爆力破解" scheme="https://www.leolan.top/tags/fail2ban-%E9%98%B2%E7%88%86%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>RAID</title>
    <link href="https://www.leolan.top/posts/3959/"/>
    <id>https://www.leolan.top/posts/3959/</id>
    <published>2017-01-06T07:21:17.000Z</published>
    <updated>2017-02-27T08:47:33.064Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="RAID简介"><a href="#RAID简介" class="headerlink" title="RAID简介"></a>RAID简介</h1><p>RAID 的意思是廉价磁盘冗余阵列（Redundant Array of Inexpensive Disks），但现在它被称为独立磁盘冗余阵列（Redundant Array of Independent Drives）。早先一个容量很小的磁盘都是非常昂贵的，但是现在我们可以很便宜的买到一个更大的磁盘。Raid 是一系列放在一起，成为一个逻辑卷的磁盘集合。</p>
<p>RAID 包含一组或者一个集合甚至一个阵列。使用一组磁盘结合驱动器组成 RAID 阵列或 RAID 集。将至少两个磁盘连接到一个 RAID 控制器，而成为一个逻辑卷，也可以将多个驱动器放在一个组中。一组磁盘只能使用一个 RAID 级别。使用 RAID 可以提高服务器的性能。不同 RAID 的级别，性能会有所不同。它通过容错和高可用性来保存我们的数据。</p>
<p><strong>软件 RAID 和硬件 RAID</strong></p>
<p>软件 RAID 的性能较低，因为其使用主机的资源。 需要加载 RAID 软件以从软件 RAID 卷中读取数据。在加载 RAID 软件前，操作系统需要引导起来才能加载 RAID 软件。在软件 RAID 中无需物理硬件。零成本投资。</p>
<p>硬件 RAID 的性能较高。他们采用 PCI Express 卡物理地提供有专用的 RAID 控制器。它不会使用主机资源。他们有 NVRAM 用于缓存的读取和写入。缓存用于 RAID 重建时，即使出现电源故障，它会使用后备的电池电源保持缓存。对于大规模使用是非常昂贵的投资。</p>
<p>硬件 RAID 卡如下所示：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/162145611.png" alt="mark"></p>
<hr>
<h1 id="RAID级别"><a href="#RAID级别" class="headerlink" title="RAID级别"></a>RAID级别</h1><h2 id="重要的-RAID-概念"><a href="#重要的-RAID-概念" class="headerlink" title="重要的 RAID 概念"></a>重要的 RAID 概念</h2><ul>
<li><strong>校验方式</strong>：用在 RAID 重建中从校验所保存的信息中重新生成丢失的内容。 RAID 5，RAID 6 基于校验。</li>
<li><strong>条带化</strong>：是将切片数据随机存储到多个磁盘。它不会在单个磁盘中保存完整的数据。如果我们使用2个磁盘，则每个磁盘存储我们的一半数据。</li>
<li><strong>镜像</strong>：被用于 RAID 1 和 RAID 10。镜像会自动备份数据。在 RAID 1 中，它会保存相同的内容到其他盘上。</li>
<li><strong>热备份</strong>：只是我们的服务器上的一个备用驱动器，它可以自动更换发生故障的驱动器。在我们的阵列中，如果任何一个驱动器损坏，热备份驱动器会自动用于重建 RAID。</li>
<li><strong>块</strong>：是 RAID 控制器每次读写数据时的最小单位，最小 4KB。通过定义块大小，我们可以增加 I/O 性能。</li>
</ul>
<p>RAID有不同的级别。在这里列出在真实环境下的使用最多的 RAID 级别。其他级别的阵列参考：<a href="http://baike.baidu.com/link?url=-Oj6p9Kk0y5M7yNzaGrxRIECftLqNj5MqUg6qOZ4krc0RqxJhEZu61E1LCgjJORlpf6oV8qbnMQM4HIvL4MLLz80J-nCnAPse7xJI3wvdPuRHy5Gm9RTZ4CXpoKRl7AjSjU-ie9p4dgBF9ZpFdSB2f0-n9YDpFMlX2kzNntXViO" target="_blank" rel="external">磁盘阵列</a></p>
<p>RAID0 = 条带化　　　<strong>提高读写性能</strong><br>RAID1 = 镜像　　　　<strong>提高读写性能、冗余性</strong><br>RAID5 = 单磁盘分布式奇偶校验　　　<strong>提高读写性能、冗余性(允许1块硬盘发生故障)</strong><br>RAID6 = 双磁盘分布式奇偶校验　　　<strong>提高读写性能、冗余性(运行2块硬盘发生故障)</strong><br>RAID10 = 镜像 + 条带。（嵌套RAID）<br><strong>RAID 在大多数 Linux 发行版上使用名为 mdadm 的软件包进行管理。</strong></p>
<hr>
<h2 id="RAID-0-条带化"><a href="#RAID-0-条带化" class="headerlink" title="RAID 0  条带化"></a>RAID 0  条带化</h2><p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/163022108.png" alt="mark"></p>
<ul>
<li>高性能。</li>
<li>RAID 0 中容量零损失。</li>
<li>零容错。</li>
<li>写和读有很高的性能。</li>
<li><strong>最少两块硬盘</strong></li>
</ul>
<p>条带化有很好的性能。在 RAID 0（条带化）中数据将使用切片的方式被写入到磁盘。一半的内容放在一个磁盘上，另一半内容将被写入到另一个磁盘。</p>
<p>假设我们有2个磁盘驱动器，每次写入数据都是分两半写入两个磁盘的注：实际上不可能按字节切片，是按数据块切片的。</p>
<p>在这种情况下，如果驱动器中的任何一个发生故障，就会丢失数据，因为一个盘中只有一半的数据，不能用于重建 RAID。不过，当比较写入速度和性能时，RAID 0 是非常好的。创建 RAID 0（条带化）至少需要2个磁盘。如果你的数据是非常宝贵的，那么不要使用此 RAID 级别。</p>
<hr>
<h2 id="RAID-1-镜像化"><a href="#RAID-1-镜像化" class="headerlink" title="RAID 1  镜像化"></a>RAID 1  镜像化</h2><p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/163031427.png" alt="mark"></p>
<ul>
<li>良好的性能。</li>
<li>总容量丢失一半可用空间。</li>
<li>完全容错。</li>
<li>重建会更快。</li>
<li>写性能变慢。</li>
<li>读性能变好。</li>
<li>能用于操作系统和小规模的数据库。</li>
<li><strong>最少两块硬盘</strong></li>
</ul>
<p>镜像也有不错的性能。镜像可以对我们的数据做一份相同的副本。假设我们有两个2TB的硬盘驱动器，我们总共有4TB，但在镜像中，但是放在 RAID 控制器后面的驱动器形成了一个逻辑驱动器，我们只能看到这个逻辑驱动器有2TB。</p>
<p>当我们保存数据时，它将同时写入这两个2TB驱动器中。创建 RAID 1（镜像化）最少需要两个驱动器。如果发生磁盘故障，我们可以通过更换一个新的磁盘恢复 RAID 。如果在 RAID 1 中任何一个磁盘发生故障，我们可以从另一个磁盘中获取相同的数据，因为另外的磁盘中也有相同的数据。所以是零数据丢失。</p>
<hr>
<h2 id="RAID-5-分布式奇偶校验"><a href="#RAID-5-分布式奇偶校验" class="headerlink" title="RAID 5  分布式奇偶校验"></a>RAID 5  分布式奇偶校验</h2><p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/163053419.png" alt="mark"></p>
<ul>
<li>性能卓越</li>
<li>读速度将非常好。</li>
<li>写速度处于平均水准，如果我们不使用硬件 RAID 控制器，写速度缓慢。</li>
<li>从所有驱动器的奇偶校验信息中重建。</li>
<li>完全容错。</li>
<li>1个磁盘空间将用于奇偶校验。</li>
<li>可以被用在文件服务器，Web服务器，非常重要的备份中。</li>
<li><strong>最少三块硬盘</strong></li>
</ul>
<p>RAID 5 多用于企业级。 RAID 5 的以分布式奇偶校验的方式工作。奇偶校验信息将被用于重建数据。它从剩下的正常驱动器上的信息来重建。在驱动器发生故障时，这可以保护我们的数据。</p>
<p>假设我们有4个驱动器，如果一个驱动器发生故障而后我们更换发生故障的驱动器后，我们可以从奇偶校验中重建数据到更换的驱动器上。奇偶校验信息存储在所有的4个驱动器上，如果我们有4个 1TB 的驱动器。奇偶校验信息将被存储在每个驱动器的256G中，而其它768GB是用户自己使用的。单个驱动器故障后，RAID 5 依旧正常工作，如果驱动器损坏个数超过1个会导致数据的丢失。</p>
<hr>
<h2 id="RAID-6-双分布式奇偶校验磁盘"><a href="#RAID-6-双分布式奇偶校验磁盘" class="headerlink" title="RAID 6 双分布式奇偶校验磁盘"></a>RAID 6 双分布式奇偶校验磁盘</h2><p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/163103166.png" alt="mark"></p>
<ul>
<li>性能不佳。</li>
<li>读的性能很好。</li>
<li>如果我们不使用硬件 RAID 控制器写的性能会很差。</li>
<li>从两个奇偶校验驱动器上重建。</li>
<li>完全容错。</li>
<li>2个磁盘空间将用于奇偶校验。</li>
<li>可用于大型阵列。</li>
<li>用于备份和视频流中，用于大规模。</li>
<li><strong>最少四块硬盘</strong></li>
</ul>
<p>RAID 6 和 RAID 5 相似但它有两个分布式奇偶校验。大多用在大数量的阵列中。我们最少需要4个驱动器，即使有2个驱动器发生故障，我们依然可以更换新的驱动器后重建数据。</p>
<p>它比 RAID 5 慢，因为它将数据同时写到4个驱动器上。当我们使用硬件 RAID 控制器时速度就处于平均水准。如果我们有6个的1TB驱动器，4个驱动器将用于数据保存，2个驱动器将用于校验。</p>
<hr>
<h2 id="RAID-10-镜像-条带"><a href="#RAID-10-镜像-条带" class="headerlink" title="RAID 10  镜像+条带"></a>RAID 10  镜像+条带</h2><p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/163111922.png" alt="mark"><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/163122495.png" alt="mark"></p>
<ul>
<li>良好的读写性能。</li>
<li>总容量一半用于容错。</li>
<li>从副本数据中快速重建。</li>
<li>由于其高性能和高可用性，常被用于数据库的存储中。</li>
<li><strong>最少四块硬盘</strong></li>
</ul>
<p>RAID 10 可以被称为1 + 0或0 +1。它将做<strong>镜像+条带</strong>两个工作。<br>在 RAID 10 中首先做镜像然后做条带。<br>在 RAID 01 上首先做条带，然后做镜像。<br><strong>RAID 10 比 01 好。</strong></p>
<p>假设，我们有4个驱动器。当我逻辑卷上写数据时，它会使用镜像和条带的方式将数据保存到4个驱动器上。</p>
<p>如果我在 RAID 10 上写入数据“TECMINT”，数据将使用如下方式保存。首先将“T”同时写入两个磁盘，“E”也将同时写入另外两个磁盘，所有数据都写入两块磁盘。这样可以将每个数据复制到另外的磁盘。</p>
<p>同时它将使用 RAID 0 方式写入数据，遵循将“T”写入第一组盘，“E”写入第二组盘。再次将“C”写入第一组盘，“M”到第二组盘。</p>
<hr>
<hr>
<h1 id="RAID-容量计算器"><a href="#RAID-容量计算器" class="headerlink" title="RAID 容量计算器"></a>RAID 容量计算器</h1><p><strong>这里引用了群晖官方的RAID计算器。</strong></p>
<center><br>    <h2><font color="#F75000"><a href="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/173559041.html" target="_blank" rel="external nofollow">RAID 容量计算器</a></font></h2><br></center>

<hr>
<hr>
<h1 id="管理RAID"><a href="#管理RAID" class="headerlink" title="管理RAID"></a>管理RAID</h1><hr>
<h2 id="mdadm"><a href="#mdadm" class="headerlink" title="mdadm"></a>mdadm</h2><h3 id="安装mdadm"><a href="#安装mdadm" class="headerlink" title="安装mdadm"></a>安装mdadm</h3><p>Linux系统基本都带有 mdadm 软件包。没有的话先安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> mdadm -y</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> mdadm</div></pre></td></tr></table></figure></p>
<hr>
<p>下面盗几张图，自己没有截图啦。</p>
<h4 id="新建分区"><a href="#新建分区" class="headerlink" title="新建分区"></a>新建分区</h4><p>创建RAID0 需要两块硬盘，拿/dev/sdb 和/dev/sdc 来实验。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fdisk <span class="regexp">/dev/</span>sdb        <span class="comment">#对sdb 进行分区</span></div></pre></td></tr></table></figure></p>
<p>输入”m”, 获取帮助，输入”p”, 查看分区前磁盘状态。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170112/113446699.png" alt="mark"><br>输入”n” 新建分区，将整个磁盘都划分成一个分区，然后输入”p” 查看分区情况。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170112/113554117.png" alt="mark"></p>
<hr>
<h4 id="修改分区类型"><a href="#修改分区类型" class="headerlink" title="修改分区类型"></a>修改分区类型</h4><p>默认新建分区的类型是Linux，代号83，需要将其修改为raid 类型。输入”t” ，然后输入”L” </p>
<p>列出所有的文件格式，这里我们选择”fd Linux raid auto”, 输入”fd”，然后再输入”p” 查看分区情况，分区格式已经变成了Linux raid autodetect。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170112/113637514.png" alt="mark"><br>输入”w” 保存分区。<br>使用同样方法对/dev/sdc 进行分区操作。</p>
<hr>
<h4 id="同步分区情况"><a href="#同步分区情况" class="headerlink" title="同步分区情况"></a>同步分区情况</h4><p>使用<code>partprobe</code> 命令同步分区情况。</p>
<p>查看现在的状态<code>fdisk -l /dev/sdb /dev/sdc</code></p>
<h4 id="用sdb和sdc创建RAID-0："><a href="#用sdb和sdc创建RAID-0：" class="headerlink" title="用sdb和sdc创建RAID 0："></a>用sdb和sdc创建RAID 0：</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mdadm -C /<span class="built_in">dev</span>/md0 -a yes -l <span class="number">0</span> -n <span class="number">2</span> /<span class="built_in">dev</span>/sdb /<span class="built_in">dev</span> sdc</div><div class="line">或</div><div class="line">mdadm -C /<span class="built_in">dev</span>/md0 -ayes -l0 -n2 /<span class="built_in">dev</span>/sd[b,c]<span class="number">1</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-C，--create</td>
<td>创建阵列</td>
</tr>
<tr>
<td>-a，--auto</td>
<td>同意创建设备，如不加此参数时必须先使用mknod 命令来创建一个RAID设备，不过推荐使用-a yes参数一次性创建</td>
</tr>
<tr>
<td>-l，--level</td>
<td>阵列模式，支持的阵列模式有 linear, raid0, raid1, raid4, raid5, raid6, raid10, multipath, faulty, container</td>
</tr>
<tr>
<td>-n，--raid-devices</td>
<td>阵列中活动磁盘的数目，该数目加上备用磁盘的数目应该等于阵列中总的磁盘数目</td>
</tr>
<tr>
<td>/dev/md0　</td>
<td>阵列的设备名称</td>
</tr>
<tr>
<td>/dev/sd{b,c}1　</td>
<td>参与创建阵列的磁盘名称</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="创建RAID-配置文件-etc-mdadm-conf"><a href="#创建RAID-配置文件-etc-mdadm-conf" class="headerlink" title="创建RAID 配置文件/etc/mdadm.conf"></a>创建RAID 配置文件/etc/mdadm.conf</h4><p>RAID 的配置文件为<strong>/etc/mdadm.conf</strong>，默认是不存在的，需要手工创建。</p>
<p>该配置文件的主要作用是系统启动的时候能够自动加载软RAID，同时也方便日后管理。但不是必须的，<strong>推荐对该文件进行配置</strong>。</p>
<p>我们这里需要创建这个文件，测试中发现，如果没有这个文件，则reboot 后，已经创建好的md0 会自动变成md127。</p>
<p>/etc/mdadm.conf 文件内容包括：<br>由<strong>DEVICE</strong> 选项指定用于软RAID的所有设备。<br><strong>ARRAY</strong> 选项所指定阵列的设备名、RAID级别、阵列中活动设备的数目以及设备的UUID号。</p>
<p><strong>创建/etc/mdadm.conf</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo DEVICE /dev/sd&#123;b,c&#125;<span class="number">1</span> <span class="meta">&gt;&gt; </span>/etc/mdadm.conf</div><div class="line">mdadm –Ds <span class="meta">&gt;&gt; </span>/etc/mdadm.conf</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>当前生成的/etc/mdadm.conf 文件内容并不符合所规定的格式，所以也是不生效的，这时需要手工修改该文件内容为如下格式：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat /etc/mdadm.conf</span></div><div class="line"></div><div class="line">DEVICE <span class="regexp">/dev/</span>sdb1 <span class="regexp">/dev/</span>sdc1</div><div class="line"></div><div class="line">ARRAY <span class="regexp">/dev/m</span>d0 level=raid0 num-devices=<span class="number">2</span> UUID=<span class="number">5160</span>ea40:cb2b44f1:c650d2ef:<span class="number">0</span>db09fd0</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="格式化磁盘阵列"><a href="#格式化磁盘阵列" class="headerlink" title="格式化磁盘阵列"></a>格式化磁盘阵列</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkfs<span class="selector-class">.ext4</span> /dev/md0</div></pre></td></tr></table></figure>
<h4 id="建立挂载点并挂载"><a href="#建立挂载点并挂载" class="headerlink" title="建立挂载点并挂载"></a>建立挂载点并挂载</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /raid0</div><div class="line">mount <span class="meta-keyword">/dev/</span>md0 <span class="meta-keyword">/raid0/</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="写入-etc-fstab"><a href="#写入-etc-fstab" class="headerlink" title="写入/etc/fstab"></a>写入/etc/fstab</h4><p>为了下次开机还能正常使用我们的RAID设备，需要将挂载的信息写入/etc/fstab 文件中。然后reboot 测试开机是否自动挂载，raid0 创建完毕。</p>
<hr>
<p>参考资料：<br><a href="http://www.centoscn.com/image-text/config/2015/0213/4713.html" target="_blank" rel="external">http://www.centoscn.com/image-text/config/2015/0213/4713.html</a><br><a href="http://www.cnblogs.com/mchina/p/linux-centos-disk-array-software_raid.html" target="_blank" rel="external">http://www.cnblogs.com/mchina/p/linux-centos-disk-array-software_raid.html</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;RAID简介&quot;&gt;&lt;a href=&quot;#RAID简介&quot; class=
    
    </summary>
    
      <category term="系统管理" scheme="https://www.leolan.top/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="RAID" scheme="https://www.leolan.top/tags/RAID/"/>
    
  </entry>
  
  <entry>
    <title>Btrfs文件系统</title>
    <link href="https://www.leolan.top/posts/9108/"/>
    <id>https://www.leolan.top/posts/9108/</id>
    <published>2017-01-06T02:23:06.000Z</published>
    <updated>2017-02-27T08:47:33.056Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="Btrfs简介"><a href="#Btrfs简介" class="headerlink" title="Btrfs简介"></a>Btrfs简介</h1><p>Btrfs 是一个 Linux 中的新的写时复制(copy-on-write (COW))的文件系统，目的是实现高级功能的同时着重与容错功能，修复功能以及易于管理。</p>
<p><strong>Btrfs核心特性</strong>：<br>多物理卷支持：btrfs可由多个底层物理卷组成；支持RAID，以联机“添加”、“移除”、“修改”；</p>
<p><strong>写时复制更新机制(CoW)</strong>：复制、更新及替换指针，而非“就地”更新；在文件进行修改的时候，首先将文件复制一份出来，在复制出来的文件上进行修改，修改完成之后，将指向原有文件的指针修改指向到修改完成的文件上，若修改完成的文件出现了错误，则我们可以通过原文件进行修复</p>
<p><strong>数据及元数据校验码</strong>：checksum ,当存储某个文件时，checksum会将数据的源数据和数据的校验码，分别通过文件的属性扩展进行保存，当我们再次读取数据时可以方便的检测数据是否受损，如果文件受损系统可以完成自动修复；</p>
<p><strong>子卷</strong>：sub_volume，在一个卷上创建多个子卷，在每一个子卷上创建文件系统，并挂载使用；</p>
<p><strong>快照</strong>：支持快照的快照；因此可以实现类似增量快照的机制</p>
<p><strong>透明压缩 </strong>：如果我们在存储文件时，进行压缩存储，那么在文件发往btrfs时，会自动的占用时钟周期，完成数据的压缩存放，而用户并不知道，在用户读取文件时，会自动的进行文件的解压缩，可以实现节约磁盘空间。但是压缩和解压缩会占用时钟周期；</p>
<p>Btrfs确实比ext4多了很多功能，快照功能更是很有使用价值，管理也比ext格式要方便一些。</p>
<hr>
<h1 id="创建Btrfs文件系统"><a href="#创建Btrfs文件系统" class="headerlink" title="创建Btrfs文件系统"></a>创建Btrfs文件系统</h1><p>mkfs.btrfs</p>
<ul>
<li><strong>-L ‘LABEL’</strong>：指定文件系统的卷标；</li>
<li><strong>-d [type]</strong>: raid0, raid1, raid5, raid6, raid10, single  指明数据的存放方式，支持RAID机制；</li>
<li><strong>-m [profile]</strong>：raid0, raid1, raid5, raid6, raid10, single, dup 指明元数据的存放方式，是否可跨越多个物理卷，支持RAID机制；</li>
<li><strong>-O [feature]</strong>：在格式化文件系统的时候，是否直接开启文件系统的某些特性；</li>
<li><strong>-O list-all</strong>：列出支持的所有特性；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fdisk <span class="_">-l</span></div></pre></td></tr></table></figure>
<p>拿这个20G的盘开刀。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/102726838.png" alt="mark"><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkfs.btrfs -L my20G_date <span class="meta-keyword">/dev/</span>sdae   <span class="meta">#创建btrfs 文件系统</span></div><div class="line"><span class="meta">#也可以多块硬盘mkfs.btrfs -L my20G_date /dev/sdae /dev/sdc 这样就把两块硬盘合并起来管理。</span></div><div class="line"></div><div class="line">blkid <span class="meta-keyword">/dev/</span>sdae                      <span class="meta">#查看设备sdae的属性,可以看到TYPE=<span class="string">"btrfs"</span></span></div><div class="line">btrfs filesystem show                <span class="meta">#查看系统上的所有btrfs文件系统</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/102942852.png" alt="mark"><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /my20G                      <span class="comment">#创建挂载目录</span></div><div class="line">mount <span class="regexp">/dev/sdae /my20G/</span>           <span class="comment">#挂载  </span></div><div class="line">mount | grep /my20G               <span class="comment">#已挂载成功</span></div><div class="line">df -h</div><div class="line"></div><div class="line"><span class="comment">#man btrfs filesystem 可用来查看命令帮助文档</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170106/103630400.png" alt="mark"></p>
<hr>
<h1 id="调整btrfs文件系统大小-逻辑边界"><a href="#调整btrfs文件系统大小-逻辑边界" class="headerlink" title="调整btrfs文件系统大小(逻辑边界)"></a>调整btrfs文件系统大小(逻辑边界)</h1><p>btrfs调整大小只要一条命令就行，几乎是瞬间完成的。<br><strong>命令格式</strong>：<code>btrfs filesystem resize &lt;size(单位G,K,M)&gt;或者max &lt;path&gt;</code><br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btrfs filesystem resize <span class="number">-10</span>G /my20G    <span class="meta">#将分区缩小10G，单位可以是M，K。</span></div><div class="line">df -h                                  <span class="meta">#可以看到已经缩小了10G了</span></div><div class="line"></div><div class="line">btrfs filesystem resize +<span class="number">5000</span>M /my20G  <span class="meta">#将分区扩大5000M，单位可以是M，K。</span></div><div class="line">df -h                                  <span class="meta">#可以看到已经增加了近5G空间</span></div><div class="line"></div><div class="line">btrfs filesystem resize <span class="built_in">max</span> /my20G     <span class="meta">#max，将文件系统大小调整至其物理边界，可用最大的存储空间。</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="调整btrfs物理边界大小"><a href="#调整btrfs物理边界大小" class="headerlink" title="调整btrfs物理边界大小"></a>调整btrfs物理边界大小</h1><p>物理边界就属于硬件范畴了，增加或去掉硬盘。<br><strong>命令格式</strong>：<code>btrfs device &lt;add/delete/scan&gt; &lt;dev&gt; &lt;mount_point&gt;</code><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">btrfs device <span class="keyword">add</span><span class="bash"> /dev/sdd /my20G    <span class="comment">#为btrfs文件系统，增加一块硬盘sdd</span></span></div><div class="line">df -lh                              <span class="comment">#完成后，容量已经扩充了</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="透明压缩"><a href="#透明压缩" class="headerlink" title="透明压缩"></a>透明压缩</h1><p>只需在挂载时候，使用-o 并指定压缩方式即可，对用户是透明的，可以选择lzo或zlib两种压缩方式<br><strong>命令格式</strong>：<code>mount -o compress={lzo|zlib} DEVICE MOUNT_POINT</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mount -o compress=lzo <span class="meta-keyword">/dev/</span>sdae /my20G</div><div class="line">mount -o compress=zlib <span class="meta-keyword">/dev/</span>sdae /my20G</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="btrfs文件均衡"><a href="#btrfs文件均衡" class="headerlink" title="btrfs文件均衡"></a>btrfs文件均衡</h1><p><strong>命令格式</strong>：<code>btrfs balance start [OPTIONS] &lt;FILTERS&gt; MOUNT_POINT</code><br>常用选项有：</p>
<ul>
<li><strong>-d</strong>: 指定数据的组织机制</li>
<li><strong>-s</strong>：指定元数据的组织机制</li>
<li><strong>-m</strong>：指定文件系统的组织机制</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">btrfs </span>device <span class="keyword">add </span>/dev/sdd /my20G            #为<span class="keyword">btrfs文件系统，增加一块硬盘sdd</span></div><div class="line"><span class="keyword">btrfs </span>filesystem show                       #查看<span class="keyword">btrf文件系统信息</span></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">balance </span>start /my20G                  #均衡文件</div><div class="line"></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">balance </span>start -mconvert<span class="symbol">=raid5</span> /my20G  #均衡文件，并使用raid5(最少<span class="number">3</span>块硬盘)组织文件系统，RAID模式还要注意每块硬盘的容量大小。</div></pre></td></tr></table></figure>
<hr>
<h1 id="删除btrfs的物理卷"><a href="#删除btrfs的物理卷" class="headerlink" title="删除btrfs的物理卷"></a>删除btrfs的物理卷</h1><p>如果只有一个硬盘的话是无法删除的。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btrfs device <span class="keyword">delete</span> /dev/sdd /my20G    <span class="meta">#将sdd设备移除</span></div><div class="line">df -lh /my20G                          <span class="meta">#容量减少了</span></div><div class="line">btrfs filesystem <span class="keyword">show</span> /my20G           <span class="meta">#sdd被删掉了</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="ext文件系统和btrfs文件系统互转"><a href="#ext文件系统和btrfs文件系统互转" class="headerlink" title="ext文件系统和btrfs文件系统互转"></a>ext文件系统和btrfs文件系统互转</h1><p><strong>命令格式</strong>：<code>btrfs-convert [-r] Device</code><br><strong>-r</strong>：从btrfs回滚到之前的文件系统,不使用-r 代表从普通文件系统，转化成btrfs文件系统<br>先说说硬盘拆分，架设现在用了3块硬盘组的RAID5，先降级为RAID1才可以拆掉其中一块</p>
<h2 id="拆分硬盘"><a href="#拆分硬盘" class="headerlink" title="拆分硬盘"></a>拆分硬盘</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">btrfs </span><span class="keyword">balance </span>start  -mconvert<span class="symbol">=raid1</span> /my20G</div><div class="line"><span class="keyword">btrfs </span><span class="keyword">balance </span>start  -dconvert<span class="symbol">=raid1</span> /my20G</div><div class="line"><span class="keyword">btrfs </span>device delete /dev/sdd /my20G           #此时移除设备sdd</div></pre></td></tr></table></figure>
<h2 id="从ext4转为Btrfs"><a href="#从ext4转为Btrfs" class="headerlink" title="从ext4转为Btrfs"></a>从ext4转为Btrfs</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#创建ext4分区</span></div><div class="line">fdisk <span class="meta-keyword">/dev/</span>sdd                                <span class="meta">#将sdd重新创建分区sdd1</span></div><div class="line">mkfs.ext4 <span class="meta-keyword">/dev/</span>sdd1                           <span class="meta">#格式化为ext4文件系统</span></div><div class="line">mount <span class="meta-keyword">/dev/</span>sdd1 /mnt                          <span class="meta">#挂载sdd1</span></div><div class="line"></div><div class="line">ls /mnt </div><div class="line">cp <span class="meta-keyword">/etc/</span>fstab /mnt       <span class="meta">#复制文件fstab到 /mnt</span></div><div class="line">ls /mnt </div><div class="line">umount /mnt              <span class="meta">#卸载文件系统，不要在线做文件系统转换</span></div><div class="line">fsck -f <span class="meta-keyword">/dev/</span>sdd1        <span class="meta">#做强制检测</span></div><div class="line"></div><div class="line"><span class="meta">#将ext4装换为Btrfs</span></div><div class="line">btrfs-convert <span class="meta-keyword">/dev/</span>sdd1   </div><div class="line">btrfs filesystem show    <span class="meta">#sdd1已经转化成了btrfs文件系统</span></div><div class="line">mount <span class="meta-keyword">/dev/</span>sdd1 /mnt</div><div class="line">ls /mnt</div><div class="line">cat <span class="meta-keyword">/mnt/</span>fstab           <span class="meta">#之前的文件fstab仍旧可以正常访问</span></div></pre></td></tr></table></figure>
<h2 id="从Btrfs转为ext4"><a href="#从Btrfs转为ext4" class="headerlink" title="从Btrfs转为ext4"></a>从Btrfs转为ext4</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">umount /mnt</div><div class="line">btrfs-convert -r <span class="meta-keyword">/dev/</span>sdd1</div><div class="line">mount <span class="meta-keyword">/dev/</span>sdd1 /mnt</div><div class="line">ls /mnt</div><div class="line">blkid <span class="meta-keyword">/dev/</span>sdd1          <span class="meta">#参考sdd1信息，可见TYPE=<span class="string">"ext4"</span></span></div><div class="line">cat <span class="meta-keyword">/mnt/</span>fstab           <span class="meta">#且原文件仍旧可以正常访问</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="btrfs子卷管理"><a href="#btrfs子卷管理" class="headerlink" title="btrfs子卷管理"></a>btrfs子卷管理</h1><h2 id="创建子卷："><a href="#创建子卷：" class="headerlink" title="创建子卷："></a>创建子卷：</h2><p><strong>命令格式</strong>： <code>btrfs subvolume create /PATH</code>  此路径必须是在btrfs文件系统的挂载目录下<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>create /my20G/<span class="keyword">subvol </span>   #创建子卷，子卷名为<span class="keyword">subvol</span></div><div class="line"></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>create /my20G/<span class="keyword">subvol1 </span>  #再创建子卷，子卷名为<span class="keyword">subvol1</span></div><div class="line"></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>list /my20G             #查看<span class="keyword">btrfs </span>文件系统下的所有子卷信息</div><div class="line"><span class="symbol">ID</span> <span class="number">262</span> gen <span class="number">73</span> top level <span class="number">5</span> path <span class="keyword">subvol </span>  <span class="symbol">#ID</span> <span class="number">262</span> 是子卷<span class="keyword">subvol的ID，可以用该ID来挂载该卷</span></div><div class="line"><span class="symbol">ID</span> <span class="number">263</span> gen <span class="number">74</span> top level <span class="number">5</span> path <span class="keyword">subvol1</span></div></pre></td></tr></table></figure></p>
<h2 id="挂载子卷"><a href="#挂载子卷" class="headerlink" title="挂载子卷"></a>挂载子卷</h2><p><strong>命令格式</strong>：  <code>mount -o subvol=SUBVOLUME  DEVICE /MOUNT_POIN</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mount -o subvol=subvol <span class="meta-keyword">/dev/</span>sdae /mnt  <span class="meta">#将子卷单独挂载到/mnt目录下</span></div><div class="line">ls /mnt                                <span class="meta">#此时是没有任何内容的</span></div></pre></td></tr></table></figure></p>
<h3 id="查看子卷相关信息"><a href="#查看子卷相关信息" class="headerlink" title="查看子卷相关信息"></a>查看子卷相关信息</h3><h4 id="挂载父卷，子卷自动被挂载"><a href="#挂载父卷，子卷自动被挂载" class="headerlink" title="挂载父卷，子卷自动被挂载"></a>挂载父卷，子卷自动被挂载</h4><p><strong>命令格式</strong>：<code>btrfs subvolume show MOUNT_POINT</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btrfs subvolume show /mnt              <span class="meta">#查看子卷信息</span></div><div class="line">cp <span class="meta-keyword">/var/</span>log/messages /mnt              <span class="meta">#复制messages文件到子卷subvol</span></div><div class="line">ls /mnt</div><div class="line">umount /mnt                            <span class="meta">#卸载子卷subvol</span></div><div class="line">mount <span class="meta-keyword">/dev/</span>sdae /my20G                 <span class="meta">#将这个btrfs文件系统挂载到/my20G目录</span></div><div class="line">ls /my20G</div><div class="line">ls /my20G/subvol                       <span class="meta">#可见子卷subvol的内容是可见的，所以说一旦父卷挂载，子卷就被自动挂载了</span></div></pre></td></tr></table></figure></p>
<h4 id="挂载子卷，父卷不会自动被挂载"><a href="#挂载子卷，父卷不会自动被挂载" class="headerlink" title="挂载子卷，父卷不会自动被挂载"></a>挂载子卷，父卷不会自动被挂载</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">umount /my20G                             <span class="comment">#卸载父卷，</span></div><div class="line">mount -o subvol=subvol /dev/sdae /my20G   <span class="comment">#单独挂载子卷</span></div><div class="line">ls <span class="regexp">/my20G/</span>                                <span class="comment">#此时/my20G下只有子卷的内容，并不会有父卷的内容：如subvol,subvol1目录</span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：由于是子卷，如果父卷已经挂载，则子卷就自动被挂载了<br>反之，如果只挂载子卷，父卷内容是不会自动挂载的，其内容，不可见</p>
<h4 id="分别挂载子卷和父卷（不要先挂载父卷）"><a href="#分别挂载子卷和父卷（不要先挂载父卷）" class="headerlink" title="分别挂载子卷和父卷（不要先挂载父卷）"></a>分别挂载子卷和父卷（不要先挂载父卷）</h4><p>子卷，父卷也可以分别挂载：（可是没必要单独挂载子卷，父卷挂载完成后，子卷也就被自动挂载了)<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">umount /my20G                             <span class="meta">#卸载子卷</span></div><div class="line">mount -o subvol=subvol <span class="meta-keyword">/dev/</span>sdae /mnt     <span class="meta">#挂载子卷到/mnt目录</span></div><div class="line">mount <span class="meta-keyword">/dev/</span>sdae /my20G                    <span class="meta">#挂载父卷到/my20G目录</span></div><div class="line">ls /my20G/                                <span class="meta">#此时父卷挂载成功</span></div><div class="line">ls /mnt                                   <span class="meta">#子卷内容也可单独显示</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="删除子卷"><a href="#删除子卷" class="headerlink" title="删除子卷"></a>删除子卷</h2><p><strong>命令格式</strong>：<code>btrfs subvolume delete /MOUNT_POINT</code><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>delete /my20G/<span class="keyword">subvol </span>     #删除子卷<span class="keyword">subvol</span></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>list /my20G               #已经没有了子卷<span class="keyword">subvol信息了</span></div></pre></td></tr></table></figure></p>
<h2 id="子卷快照"><a href="#子卷快照" class="headerlink" title="子卷快照"></a>子卷快照</h2><p><strong>命令格式</strong>：<code>btrfs subvolume snapshot /PATH/TO/SUBVOLUME /PATH/TO/SNAPSHOT</code><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">cp</span> /etc/passwd /my20G/<span class="keyword">subvol1/ </span>                                    #复制passwd文档到子卷<span class="keyword">subvol1内</span></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>snapshot /my20G/<span class="keyword">subvol1/ </span>/my20G/<span class="keyword">subvol1_snapshot </span>  #创建快照<span class="keyword">subvol1_snapshot</span></div><div class="line"><span class="keyword">btrfs </span><span class="keyword">subvolume </span>list /my20G                                        #快照子卷<span class="keyword">subvol1_snapshot创建完成</span></div><div class="line"></div><div class="line"><span class="symbol">echo</span> <span class="string">"TEST FOR SNAPSHOT"</span> &gt;&gt; /my20G/<span class="keyword">subvol1/passwd </span>  #在passwd文档后追加一行 <span class="string">"TEST FOR SNAPSHOT"</span> </div><div class="line"><span class="symbol">tail</span> -<span class="number">1</span> /my20G/<span class="keyword">subvol1/passwd </span>                      #此时子卷中数据更新了</div><div class="line"><span class="symbol">tail</span> -<span class="number">1</span> /my20G/<span class="keyword">subvol1_snapshot/passwd </span>             #此时快照中的passwd并没有更新，末尾没有<span class="string">"TEST FOR SNAPSHOT"</span> 这行。</div></pre></td></tr></table></figure></p>
<p><strong>注</strong>：在子卷创建快照后，对原子卷做的修改操作并不会反映到快照中。</p>
<hr>
<blockquote>
<p>原文：<a href="http://siyuan710.blog.51cto.com/10648912/1699070" target="_blank" rel="external">http://siyuan710.blog.51cto.com/10648912/1699070</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Btrfs简介&quot;&gt;&lt;a href=&quot;#Btrfs简介&quot; clas
    
    </summary>
    
      <category term="杂项" scheme="https://www.leolan.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Btrfs文件系统" scheme="https://www.leolan.top/tags/Btrfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果</title>
    <link href="https://www.leolan.top/posts/3958/"/>
    <id>https://www.leolan.top/posts/3958/</id>
    <published>2017-01-05T08:04:47.000Z</published>
    <updated>2017-02-27T08:47:33.055Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>最近整理资料，早就想写一篇黑苹果了，自从入手了百苹果后就没再折腾黑苹果了，说真的，黑苹果适合那些作死折腾的人，不想折腾的还是某宝找远程安装吧。</p>
<p>最可怕的是那年寒假，在家除了吃饭睡觉就是想办法驱动那个奇葩的ATI HD 4300 显卡，当时没找到什么文章，都是台式机显卡能驱动的，但这款移动版貌似全球无解，我就这样改了又改重启了几百次，真的是几百次哦，简直不忍直视。</p>
<p>以前比较出名是远景论坛(不过竟然被查了，网站关了)，<a href="http://www.feng.com/" target="_blank" rel="external">威锋网</a>到了2017，好像<strong><a href="https://imac.hk/" target="_blank" rel="external">黑苹果乐园</a></strong>是更新比较快的。<br>猫叔博客：<a href="https://www.maoshu.cc" target="_blank" rel="external">https://www.maoshu.cc</a><br>黑苹果需要有丰富的系统知识做支撑，不然遇到困难真的没法解决。</p>
<hr>
<h1 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h1><p>在虚拟机中安装Mac操作系统也是可以的，但是显卡会有限制，最大128M显存，自然也就特别特别卡了。安装时一般需要ISO版（见工具包中的：dam2iso）的系统，安装完成后可以用原生引导，也可以更换为ISO版的其他引导。<br>VirtualBox自带有Mac选择，安装时选择就行了；VMware需要下载一个解锁补丁，不同的VM版本补丁不同，搜索就有。安装补丁之后安装系统就能看到Mac选择了。</p>
<hr>
<p>安装系统都是一样的，制作引导需要一点技巧。引导有BootThink、<a href="http://chameleon.osx86.hu/" target="_blank" rel="external">Chameleon(变色龙)</a>、<a href="https://sourceforge.net/projects/cloverefiboot/" target="_blank" rel="external">Clover(四叶草)</a>等好几种。</p>
<p>黑苹果想要完美一些就尽量选择中高端机型，硬件和白苹果类似的最好，当然，太过新颖的机型也可能不支持的。</p>
<hr>
<p><strong>工具打包下载：</strong><a href="http://ofyfogrgx.bkt.clouddn.com/黑苹果安装工具打包.zip" target="_blank" rel="external">http://ofyfogrgx.bkt.clouddn.com/黑苹果安装工具打包.zip</a></p>
<h1 id="Boot-MBR"><a href="#Boot-MBR" class="headerlink" title="Boot+MBR"></a>Boot+MBR</h1><p><strong>适合不支持UEFI的老机子或不打算升级的情况。</strong><br>安装镜像如果是下载原版的要破解剥离引导层(见工具包中的：官方DMG格式提取安装文件)后才能使用，费时费力，建议下载破解好的懒人版之类的。</p>
<p>这种模式选用3种引导中的哪一种都行，不建议选BootThink，貌似不维护了，所以不支持新的系统了。如果是变色龙的话就方便很多。</p>
<hr>
<h2 id="Windows下的准备工作"><a href="#Windows下的准备工作" class="headerlink" title="Windows下的准备工作"></a>Windows下的准备工作</h2><p>先安装JAVA环境，Microsoft .NET Framework 2.0硬盘模式要打开AHCI（在BIOS中开启）</p>
<p>1.用Win7的磁盘管理工具分出一个10G的分区和一个30G的分区（这两个是主分区或逻辑分区都可以），<strong>在新建两个简单卷过程中注意选择“不要格式化”。</strong> 30G分区用来安装Mac系统，10G分区用来写入安装文件，安装完成后10G分区可删除。【硬盘用MRB或GPT分区表都没问题】<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/172251905.png" alt="mark"></p>
<p>2.安装“BootThink或Win版色龙安装器GUI安装</p>
<p>3.安装MacDrive或（win下读写HFS分区），也可以汉化破解，不破解也没关系。</p>
<p>4.运行“硬盘安装助手”，选择下载来的ISO，取消下面的三个选项，选择写入10G的分区中。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/172518781.png" alt="mark"></p>
<p>如果遇到提示无法写入，请将10G分区进行如下操作：快速格式化为NTFS--&gt;磁盘管理工具内删除分区--&gt;新建简单卷（不要格式化）。</p>
<p>写入过程中会显示程序未响应，这是正常现象，不用管它，过一会会提示写入完成。然后打开<strong>分区助手【好用】.exe</strong>看看分区标记是不是AF不是的话改为AF,之后重启开始安装。</p>
<hr>
<h2 id="安装Mac系统"><a href="#安装Mac系统" class="headerlink" title="安装Mac系统"></a>安装Mac系统</h2><p>1.重启后进入BootThink或变色龙，选择“OS X Install DVD“字样的回车。稍后进入安装界面，</p>
<p><strong>安装遇到，白屏 且 鼠标 在屏幕左上角 无限彩色风火轮？</strong><br>可以安装或替换\System\Library\Extensions\FakeSMC.kext或者\Extra\Extensions\FakeSMC.kext为FakeSMC.kext.2.5.zip【解压出来】版的 即可。<br>删掉/System/Library/Caches/com.apple.kext.caches/Startup/全部文件</p>
<p><strong>安装过程遇到五国语言卡死？</strong><br>这个问题比较复杂，我差不多忘记了怎么处理了。</p>
<p>2.选择菜单栏中的<strong>“实用工具”</strong>里的<strong>“磁盘工具”</strong>，在左侧选择30G的分区，点击<strong>“抹掉”</strong>。格式选择“Mac OS 扩展（日志式）”，名称可任意。然后点下面的“抹掉”抹盘完成后关闭磁盘工具，回到安装程序。</p>
<p>3.选择同意许可，安装位置选择刚才抹掉的分区（注意，不要误点下一步）</p>
<p>4.安装过程中可能出现光标消失，滚动条停止，剩余时间不变的状况，这时点一下触摸板上的鼠标左键即可解决，不影响安装。</p>
<p>5.安装完成后提示重启，点击“重新启动”，由于此时没有安装kext，系统会一直停留在菊花旋转界面，需要手动按电源键关机后重启。</p>
<p>6.重启后选择进入另一个系统【就是安装前用的win系统】，删除安装的苹果分区内的<strong>X:/System/Library/CoreServices/SetupAssistant.app/Contents/Resources/DeviceSection.bundle</strong>否则进入系统时会提示找不到键盘而无法进入。</p>
<p>建议此时把Kext Wizard.app等软件放到Mac的分区中或\System\Library\Extensions到时点开就可以安装。</p>
<p>7.重启后用BootThink或变色龙进入Mac系统，选择语言，创建账户密码，注册AppleID可直接跳过，正常情况下设置完成后可进入Mac系统。</p>
<p>如果设置完成后又重新回到首页选择语言、创建账户，并且无限循环，恭喜你，这次安装失败了，再手动重启选择安装文件写入的分区重新安装一遍，并删除那个不能识别键盘的文件。</p>
<hr>
<h2 id="在Mac下安装硬件kext"><a href="#在Mac下安装硬件kext" class="headerlink" title="在Mac下安装硬件kext"></a>在Mac下安装硬件kext</h2><p>此时能进入系统了，如果显卡没有驱动是超级卡的，接着来一步一步驱动各个硬件。<br>进入Mac系统后，双击解压“Kext Wizard.zip”，得到kext安装工具“Kext Wizard”。</p>
<p>1.运行<strong>Kext Wizard</strong>，如过请求检查更新选不检查，选择“Installation”，选择刚才全部的kext，然后选择安装到<strong>System/Library/Extensions</strong>并确认右下角选择的是Mac安装的分区。点击Install，稍后会提示安装完成。如果右下角的没有识别出安装分区，可能是这个版本的<strong>Kext Wizard</strong>不行，换一个版本，不过似乎也不影响，这种只能试试，没个准的。</p>
<p>安装完或手动把Kext复制进了<strong>System/Library/Extensions</strong>的可以运行<strong>磁盘工具修复权限</strong></p>
<hr>
<h2 id="修改设备ID驱动"><a href="#修改设备ID驱动" class="headerlink" title="修改设备ID驱动"></a>修改设备ID驱动</h2><p>某些硬件型号是一样的，但是设备识别码（ID）不同，或者是不同型号共用一个设备ID，这时需要修改设备ID才能驱动了。</p>
<p>以下以Marvell Yukon 88E8042网卡驱动为例<br>1.找到System/Library/Extensions下的IONetworkingFamily.kext，右键点击它选择“显示包内容”，把里面的Contents/PlugIns/AppleYukon2.kext拷贝到桌面。</p>
<p>2.右键桌面上的AppleYukon2.kext，选择显示包内容，找到Contents/Info.plist，双击编辑Info.plist，展开Information Property List下的 IOKitPersonalities</p>
<p>3.找到Yukon开头的第一行，左侧修改为Yukon-88E8042；展开Yukon-88E8042 ，找到IOPCIPrimaryMatch把它右边的内容改成<br>0x435711ab（0x435711ab是在Win下用设备管理器-硬件详细信-硬件ID查得，你的网卡ID可能不是这个，请提前确认）<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/174558145.png" alt="mark"><br>找到Model把它右面的内容改成Marvell Yukon 88E8042 PCI-E  Singleport Copper SA（改为要显示的网卡名字，最好不要有中文）。</p>
<p>4.保存文件，用桌面上的“AppleYukon2.kext”替换System/Library/Extensions/IONetworkingFamily.kext/Contents/PlugIns/AppleYukon2.kext。<br>然后使用磁盘工具修复此分区的权限，重新启动后网卡即可使用。</p>
<p>其他驱动也是类似这样修复的。这里提供一个思路，黑苹果绝对不仅仅是这么简单。</p>
<hr>
<h1 id="UEFI-GPT"><a href="#UEFI-GPT" class="headerlink" title="UEFI+GPT"></a>UEFI+GPT</h1><p>直接用原版镜像安装<br><strong>适合支持UEFI或在线升级的情况。建议用四叶草引导。</strong></p>
<p>制作引导参考：<br><a href="http://bbs.feng.com/read-htm-tid-7534160.html" target="_blank" rel="external">http://bbs.feng.com/read-htm-tid-7534160.html</a><br><a href="https://www.maoshu.cc/993.html" target="_blank" rel="external">https://www.maoshu.cc/993.html</a><br><a href="http://jingyan.baidu.com/article/d5a880eb8bd51113f047cc76.html" target="_blank" rel="external">http://jingyan.baidu.com/article/d5a880eb8bd51113f047cc76.html</a></p>
<p>安装盘按Boot+MBR的方法制作好，制作好引导后直接，启动安装即可，因为是原版镜像，一般安装成功的几率是很高的，基本不会有什么错误。安装好后的各个驱动问题也是按<strong>修改设备ID驱动</strong>的方法解决，也可以自己下载kext文件放进去然后修复。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;最近整理资料，早就想写一篇黑苹果了，自从入手了百苹果后就没再折腾黑苹果了，
    
    </summary>
    
      <category term="杂项" scheme="https://www.leolan.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="黑苹果" scheme="https://www.leolan.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>不仅仅是一个路由器</title>
    <link href="https://www.leolan.top/posts/106/"/>
    <id>https://www.leolan.top/posts/106/</id>
    <published>2017-01-04T09:20:45.000Z</published>
    <updated>2017-02-27T08:47:33.066Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>说起路由器，回想起以前折腾路由的日子，不对，现在依然在折腾。不过，我折腾过的路由并不多，华为hg255d,newifi,斐讯302B，斐讯K1，斐讯K2，极路由1S，乐携路由，TP-Link某低端机子，AirPort Time Capsule，网件R8000；目前就这些，除了剁手花了近700软妹币买的螃蟹R8000主板，和Time Capsule ，其他都是些低端路由，虽然很折腾人，但也学到了很多东西；写这篇是因为我快不记得刷机步骤了，毕竟忙着忙着就好久没有去折腾了。</p>
<p>太低端的就不说了，只是刷个固件没什么好玩的，能改装的路由才是好路由。折腾路由的原因大多是不想让路由仅仅只是个路由！！！这点很重要，于是有了<strong>去广告，搭梯子，VPN，破解校园网，游戏加速，宽带多拨，各种BT、PT、远程、离线下载，文件共享、远程监控、网络打印机、各种小型服务器搭建</strong>等等。</p>
<hr>
<h1 id="MTK7620系列"><a href="#MTK7620系列" class="headerlink" title="MTK7620系列"></a>MTK7620系列</h1><p>7620系列的路由因为CPU的通用性，成本低等因素，快速的成为厂家首选，16年这一两年内还是中端路由的首选，时长占用量大了就有大神去开发固件。相互移植也变得简单，比较有代表性的固件是：<strong>华硕Padavan，小云newifi如意云，openwrt，Tomato，极路由，潘多拉，DD-WRT，小米miwifi</strong>等等，这些固件都有7620系列的版本。</p>
<p>华硕Padavan固件（支持超多机型）：<br><a href="http://www.right.com.cn/forum/thread-161324-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-161324-1-1.html</a><br><a href="http://rt.cn2k.net" target="_blank" rel="external">http://rt.cn2k.net</a><br>极玩固件（自带SS，不能装插件）：<a href="http://www.geewan.com/download.php?id=4" target="_blank" rel="external">http://www.geewan.com/download.php?id=4</a></p>
<p>推荐论坛：<a href="http://www.right.com.cn/forum/forum.php" target="_blank" rel="external">恩山论坛</a></p>
<hr>
<h2 id="newifi-mini"><a href="#newifi-mini" class="headerlink" title="newifi mini"></a>newifi mini</h2><p>官方论坛：<a href="http://bbs.newifi.com/forumall.php" target="_blank" rel="external">http://bbs.newifi.com/forumall.php</a><br><a href="http://www.newbandeng.com/forum.php" target="_blank" rel="external">http://www.newbandeng.com/forum.php</a><br>能找到你想要的。</p>
<p>newifi是个很好刷的路由，我记得官方的就是<strong>不死uboot</strong>（就是那种不管刷什么固件都不影响uboot，不会变砖的路由），直到极路由固件被移植到newifi上后这个神话就被打破了，极路由的固件会覆盖原有的boot导致无法再刷其他路由固件，这种问题貌似只能用<strong>TTL</strong>或<strong>编程器</strong>修复，所以刷极路由固件需谨慎。</p>
<p><strong>刷机</strong>：一般是网线LAN连电脑，电脑设置静态IP，192.168.1.10<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/120913764.png" alt="mark"><br>捅菊花插电源，不要放手，5秒左右两个或3个灯在不停的闪，这时浏览器打开192.168.1.1就可以看到固件选择界面了。</p>
<h3 id="救砖"><a href="#救砖" class="headerlink" title="救砖"></a>救砖</h3><p>我的话是买了2个ROM，还有编程器，用TTL或编程器恢复需要有电烙铁和一定的手工能力，TTL和其他路由方法是一样的，结合tftp一起用。编程器的话选择支持24,25系列的编程器，某宝搜路由编程器一大堆。店家会送驱动软件，没有就自己下载一个。相信能到这个地步的也是敢于作死的。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/122600937.jpg" alt="mark"><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/121622216.jpg" alt="mark"></p>
<p><a href="http://www.newbandeng.com/thread-10936-1-1.html" target="_blank" rel="external">『零基础玩newifi』【四】TTL 救砖大法详解</a><br><a href="http://www.newbandeng.com/forum.php?mod=viewthread&amp;tid=10893&amp;extra" target="_blank" rel="external">不拆机备份编程器固件</a><br><a href="http://www.newbandeng.com/forum.php?mod=viewthread&amp;tid=10946&amp;extra=" target="_blank" rel="external">不拆机刷编程器固件</a></p>
<hr>
<h2 id="极路由1s"><a href="#极路由1s" class="headerlink" title="极路由1s"></a>极路由1s</h2><p>极路由刷和newifi是差不多的，唯一要注意的就是备份key,不然刷回极路由后没有key是连接不了插件商城的。<br><strong>备份key</strong><br><a href="http://www.hiwifimi.com/archives/114" target="_blank" rel="external">http://www.hiwifimi.com/archives/114</a><br><a href="http://www.right.com.cn/forum/thread-137774-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-137774-1-1.html</a><br>不死uboot的breed平台也可以备份key</p>
<p><strong>刷入不死uboot</strong><br><a href="http://bbs.hiwifi.com/forum.php?mod=viewthread&amp;tid=74992&amp;highlight=uboot" target="_blank" rel="external">http://bbs.hiwifi.com/forum.php?mod=viewthread&amp;tid=74992&amp;highlight=uboot</a><br>不死uboot下载：<a href="http://www.right.com.cn/forum/thread-161906-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-161906-1-1.html</a><br><a href="http://www.right.com.cn/forum/thread-171116-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-171116-1-1.html</a></p>
<hr>
<hr>
<h1 id="网件"><a href="#网件" class="headerlink" title="网件"></a>网件</h1><p>以前不知道网件是好东西，早就向往梅林固件了，大概知道网件有几款能刷梅林固件，在大天朝的长宽网络下，实在无法再忍受这种号称100M光纤，但实际使用只有512k猫一样的感觉，还是恶心的三层NAT，什么DDNS，到了这里还是死在了外面。不过<a href="http://koolshare.cn/portal.php" target="_blank" rel="external">koolshare论坛</a>有大神开发了DDNS穿透，通过一台中继服务器，好像什么DNS都能穿，有空要试试。</p>
<p>网件也可以刷DD，OpenWRT等等，但就界面来说，还是梅林比较漂亮。DD的亮点我还没找到，没怎么用过，Open的话多拨是个自成一派的东西。但是貌似Open的信号是稍微弱一点点的。</p>
<p>配置对比图，不过这里没有R8000，R8000是2USB，3频WiFi，双核1.0GHz<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/145246017.jpg" alt="mark"></p>
<p><strong>备份routerinfo</strong>参考：<br><a href="http://koolshare.cn/forum.php?mod=viewthread&amp;tid=73278&amp;highlight=routerinfo" target="_blank" rel="external">http://koolshare.cn/forum.php?mod=viewthread&amp;tid=73278&amp;highlight=routerinfo</a><br><a href="http://koolshare.cn/thread-44948-1-1.html" target="_blank" rel="external">http://koolshare.cn/thread-44948-1-1.html</a></p>
<hr>
<h2 id="R6700"><a href="#R6700" class="headerlink" title="R6700"></a>R6700</h2><p>R6700刷梅林<br><a href="http://www.acwifi.net/715.html" target="_blank" rel="external">http://www.acwifi.net/715.html</a><br><a href="http://www.good.cc/1242802.html" target="_blank" rel="external">http://www.good.cc/1242802.html</a></p>
<hr>
<h2 id="R8000"><a href="#R8000" class="headerlink" title="R8000"></a>R8000</h2><p>一般的刷固件之前都要先备份一下routerinfo,传统的备份方法是打开路由器ip/debug.htm就可以看到各种信息，或telnet连接路由，输入routerinfo就能出来各种信息。可能是R8000比较新，目前还没有办法备份出来。但是可以通过nvm把固件完整备份出来，不过方法是参照R6400的方法，不知道是不是一样适用（CPU架构不同）</p>
<p>备份方法：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">leolan@R8000<span class="number">-0000</span>:/dev<span class="meta"># cat /proc/mtd    #查看cfe设备</span></div><div class="line"><span class="symbol">dev:</span>    size   erasesize  name</div><div class="line"><span class="symbol">mtd0:</span> <span class="number">00080000</span> <span class="number">00020000</span> <span class="string">"boot"</span></div><div class="line"><span class="symbol">mtd1:</span> <span class="number">00180000</span> <span class="number">00020000</span> <span class="string">"nvram"</span></div><div class="line"><span class="symbol">mtd2:</span> <span class="number">04000000</span> <span class="number">00020000</span> <span class="string">"linux"</span></div><div class="line"><span class="symbol">mtd3:</span> <span class="number">03</span>c4c930 <span class="number">00020000</span> <span class="string">"rootfs"</span></div><div class="line"><span class="symbol">mtd4:</span> <span class="number">00040000</span> <span class="number">00020000</span> <span class="string">"board_data"</span></div><div class="line"><span class="symbol">mtd5:</span> <span class="number">04000000</span> <span class="number">00020000</span> <span class="string">"brcmnand"</span></div><div class="line"></div><div class="line"><span class="meta">#备份相应的区块</span></div><div class="line">dd if=<span class="meta-keyword">/dev/</span>mtd0 of=<span class="meta-keyword">/tmp/</span>cfe.bin     </div><div class="line">dd if=<span class="meta-keyword">/dev/</span>mtd1 of=<span class="meta-keyword">/tmp/</span>nvram.bin</div></pre></td></tr></table></figure></p>
<p>恢复：<br>打开命令窗口，重新Telnet到路由，输入用户名，然后是密码登录路由器，把文件上传到/tmp目录下，接着输入以下命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /tmp</div><div class="line">mtd write cfe<span class="selector-class">.bin</span> cfe</div><div class="line">mtd write nvram<span class="selector-class">.bin</span> nvram</div><div class="line">nvram commit</div><div class="line">reboot</div></pre></td></tr></table></figure></p>
<p>路由器会自动重启，完成CFE刷写，重新复位次就可看到效果了。</p>
<hr>
<h3 id="开刷"><a href="#开刷" class="headerlink" title="开刷"></a>开刷</h3><p>不过R8000目前刷没什么困难的。</p>
<p><strong>[固件发布] 【R8000】【20161209】380.63-2-X7.2.1 大爆炸</strong><br><a href="http://koolshare.cn/forum.php?mod=viewthread&amp;tid=73436&amp;highlight=R8000" target="_blank" rel="external">http://koolshare.cn/forum.php?mod=viewthread&amp;tid=73436&amp;highlight=R8000</a><br>我刷的时候梅林版本是第二次发布。</p>
<p><strong>官方刷梅林chk固件直刷 ,刷完英文直接拔电源重启，变中文再恢复出厂设置</strong><br>固件：<a href="http://firmware.koolshare.cn/merlin_8wan_firmware/R8000/Netgear%20R-series%20initial%20files/" target="_blank" rel="external">http://firmware.koolshare.cn/merlin_8wan_firmware/R8000/Netgear%20R-series%20initial%20files/</a></p>
<p><strong>第三方刷梅林trx固件直刷，刷完英文直接拔电源重启，变中文再恢复出厂设置</strong></p>
<p><strong>梅林刷官方OFW直刷，再捅菊花恢复出厂设置</strong><br>固件：<a href="http://firmware.koolshare.cn/merlin_8wan_firmware/R8000/Merlin%20to%20OFW/" target="_blank" rel="external">http://firmware.koolshare.cn/merlin_8wan_firmware/R8000/Merlin%20to%20OFW/</a></p>
<p>因为R8000是3频WiFi，也就是有两个5G芯片，频段是不同的，当然也可以3个WiFi合并为一个，自动分配频段，这样就不会拥挤了。</p>
<p><strong>信号合并SmartConnect优化</strong><br><a href="http://koolshare.cn/thread-73365-1-1.html" target="_blank" rel="external">http://koolshare.cn/thread-73365-1-1.html</a></p>
<hr>
<h2 id="网件路由救砖"><a href="#网件路由救砖" class="headerlink" title="网件路由救砖"></a>网件路由救砖</h2><p>官方救砖教程：<a href="http://club.netgear.cn/Knowledgebase/Document_detail.aspx?Did=873" target="_blank" rel="external">http://club.netgear.cn/Knowledgebase/Document_detail.aspx?Did=873</a><br>也可以使用华硕的固件修复程序：<strong>Firmware_Restoration</strong></p>
<p>官方救砖教程无效的话就要把螃蟹拆开来，上TTL线。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/151747137.jpg" alt="mark"><br>用SecureCRT或者其他的终端连上去（有时某些终端是不支持一些功能的，比如xshell和putty的功能就互不相同，那就换一个终端）。</p>
<p><strong>开机不断Ctrl+C暂停设备启动，停止后，会停留在CFE命令行模式，您在模式下输入小写的help就可以看到各个命令的使用方法</strong></p>
<p>在shell中输入<strong>tftpd</strong>（R8000的tftpd并不会自动启动，所以那些不用串口线卡时间刷netgear的教程根本没用），然后就直接在本机配ip，网关192.168.1.1，命令行输tftp，binary模式，put一个新固件上去。</p>
<p>其他救砖教程：<br><a href="http://koolshare.cn/thread-42961-1-1.html" target="_blank" rel="external">http://koolshare.cn/thread-42961-1-1.html</a><br><a href="http://koolshare.cn/thread-44948-1-1.html" target="_blank" rel="external">http://koolshare.cn/thread-44948-1-1.html</a><br><a href="http://www.expreview.com/33689-2.html" target="_blank" rel="external">http://www.expreview.com/33689-2.html</a></p>
<hr>
<h1 id="梅林系统"><a href="#梅林系统" class="headerlink" title="梅林系统"></a>梅林系统</h1><p>梅林系统有<a href="http://asuswrt.lostrealm.ca/" target="_blank" rel="external">官方固件</a>和民间固件，官方固件是专门为华硕路由定制的，但是华硕的好多机型和网件的机型配置基本是一致的，可以方便的移植过来。民间固件目前机型比较完善的是<a href="http://firmware.koolshare.cn/" target="_blank" rel="external">koolshare论坛</a>，<a href="http://www.right.com.cn/forum/forum.php" target="_blank" rel="external">恩山论坛</a>，<a href="http://www.anywlan.com/" target="_blank" rel="external">无线论坛</a><br>KS论坛支持的机型是最多的，恩山论坛中低端路由支持贴比较多。</p>
<p><a href="http://koolshare.cn/thread-4602-1-1.html" target="_blank" rel="external">Koolshare固件指南 &amp; FAQ，新人浏览观看</a></p>
<p>梅林固件是这样子的<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/154859008.png" alt="mark"><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/155001133.png" alt="mark"></p>
<p>插件的使用比较简单，而且也有链接说明，是比较人性化的定制，之后有什么比较好玩的再更新博客！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;说起路由器，回想起以前折腾路由的日子，不对，现在依然在折腾。不过，我折腾过
    
    </summary>
    
      <category term="路由" scheme="https://www.leolan.top/categories/%E8%B7%AF%E7%94%B1/"/>
    
    
      <category term="不仅仅是一个路由器" scheme="https://www.leolan.top/tags/%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程入门</title>
    <link href="https://www.leolan.top/posts/40666/"/>
    <id>https://www.leolan.top/posts/40666/</id>
    <published>2016-12-18T03:32:37.000Z</published>
    <updated>2017-02-27T08:47:33.048Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="在实验楼（当然还在其他网站看了很多教程）学习整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ-･∀･-ﾉ-●"><a href="#在实验楼（当然还在其他网站看了很多教程）学习整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ-･∀･-ﾉ-●" class="headerlink" title="在实验楼（当然还在其他网站看了很多教程）学习整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ|･∀･|ﾉ*~●"></a>在实验楼（当然还在其他网站看了很多教程）学习整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ|･∀･|ﾉ*~●</h1><hr>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p><strong>grep命令用于打印输出文本中匹配的模式串</strong>，它使用正则表达式作为模式匹配的条件。grep支持三种<strong>正则表达式引擎</strong>，分别用三个参数指定：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-E</td>
<td>POSIX扩展正则表达式，ERE</td>
</tr>
<tr>
<td>-G</td>
<td>POSIX基本正则表达式，BRE</td>
</tr>
<tr>
<td>-P</td>
<td>Perl正则表达式，PCRE</td>
</tr>
</tbody>
</table>
<p>普通参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>将二进制文件作为文本来进行匹配</td>
</tr>
<tr>
<td>-c</td>
<td>统计以模式匹配的数目</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>-n</td>
<td>显示匹配文本所在行的行号</td>
</tr>
<tr>
<td>-v</td>
<td>反选，输出不匹配行的内容</td>
</tr>
<tr>
<td>-r</td>
<td>递归匹配查找</td>
</tr>
<tr>
<td>-A n</td>
<td>n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行</td>
</tr>
<tr>
<td>-B n</td>
<td>n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行</td>
</tr>
<tr>
<td>--color=auto</td>
<td>将输出中的匹配项设置为自动颜色显示</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：在大多数发行版中是默认设置了grep的颜色的，你可以通过参数指定或修改<strong>GREP_COLOR</strong>环境变量。</p>
</blockquote>
<h3 id="使用基本正则表达式，BRE"><a href="#使用基本正则表达式，BRE" class="headerlink" title="使用基本正则表达式，BRE"></a>使用基本正则表达式，BRE</h3><p><strong>位置：</strong><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grep</span> <span class="string">'mail'</span> /etc/group    <span class="comment">#过滤出所有含mail字符串的行</span></div><div class="line"><span class="keyword">grep</span> <span class="string">'^mail'</span> /etc/group   <span class="comment">#过滤出以mail开头的行</span></div><div class="line"></div><div class="line">echo <span class="string">'geek|good'</span> | <span class="keyword">grep</span> <span class="string">'[^o]'</span>    <span class="comment"># 排除字符</span></div><div class="line"><span class="comment">#注意:当^放到[中括号内]为排除字符，否则表示行首。</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>数量：</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># \n是换行符</div><div class="line"># 将匹配以<span class="string">'z'</span>开头以<span class="string">'o'</span>结尾的所有字符串</div><div class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> <span class="string">'z.*o'</span></div><div class="line"></div><div class="line"># 将匹配以<span class="string">'z'</span>开头以<span class="string">'o'</span>结尾，中间包含一个任意字符的字符串</div><div class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> <span class="string">'z.o'</span></div><div class="line"></div><div class="line"># 将匹配以<span class="string">'z'</span>开头,以任意多个<span class="string">'o'</span>结尾的字符串</div><div class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> <span class="string">'zo*'</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>选择：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># grep默认是区分大小写的，这里将匹配所有的小写字母</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[a-z]'</span></div><div class="line"></div><div class="line"><span class="comment"># 将匹配所有的数字</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[0-9]'</span></div><div class="line"></div><div class="line"><span class="comment"># 将匹配所有的数字</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[[:digit:]]'</span></div><div class="line"></div><div class="line"><span class="comment"># 将匹配所有的小写字母</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[[:lower:]]'</span></div><div class="line"></div><div class="line"><span class="comment"># 将匹配所有的大写字母</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[[:upper:]]'</span></div><div class="line"></div><div class="line"><span class="comment"># 将匹配所有的字母和数字，包括0-9,a-z,A-Z</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[[:alnum:]]'</span></div><div class="line"></div><div class="line"><span class="comment"># 将匹配所有的字母</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1234\nabcd'</span> | grep <span class="string">'[[:alpha:]]'</span></div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>[:alnum:]</td>
<td>代表英文大小写字节及数字，亦即 0-9, A-Z, a-z</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>代表任何英文大小写字节，亦即 A-Z, a-z</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>代表空白键与 [Tab] 按键两者</td>
</tr>
<tr>
<td>[:cntrl:]</td>
<td>代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>代表数字而已，亦即 0-9</td>
</tr>
<tr>
<td>[:graph:]</td>
<td>除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>代表小写字节，亦即 a-z</td>
</tr>
<tr>
<td>[:print:]</td>
<td>代表任何可以被列印出来的字节</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>代表标点符号 (punctuation symbol)，亦即：” ‘ ? ! ; : # $…</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>代表大写字节，亦即 A-Z</td>
</tr>
<tr>
<td>[:space:]</td>
<td>任何会产生空白的字节，包括空白键, [Tab], CR 等等</td>
</tr>
<tr>
<td>[:xdigit:]</td>
<td>代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：之所以要使用特殊符号，是因为上面的[a-z]不是在所有情况下都管用，这还与主机当前的语系有关，即设置在LANG环境变量的值，zh_CN.UTF-8的话[a-z]，即为所有小写字母，其它语系可能是大小写交替的如，”a A b B…z Z”，[a-z]中就可能包含大写字母。所以在使用[a-z]时请确保当前语系的影响，使用[:lower:]则不会有这个问题。</p>
</blockquote>
<hr>
<h3 id="使用扩展正则表达式，ERE"><a href="#使用扩展正则表达式，ERE" class="headerlink" title="使用扩展正则表达式，ERE"></a>使用扩展正则表达式，ERE</h3><p>要通过grep使用扩展正则表达式需要加上<strong>-E</strong>参数，或使用egrep。</p>
<p><strong>数量:</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 只匹配<span class="string">"zo"</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> -E <span class="string">'zo&#123;1&#125;'</span></div><div class="line"># 匹配以<span class="string">"zo"</span>开头的所有单词</div><div class="line"><span class="keyword">echo</span> <span class="string">'zero\nzo\nzoo'</span> | <span class="keyword">grep</span> -E <span class="string">'zo&#123;1,&#125;'</span></div></pre></td></tr></table></figure></p>
<p>注意：推荐掌握<strong>{n,m}</strong>即可，+,?,*，这几个不太直观，且容易弄混淆。</p>
<hr>
<p><strong>选择:</strong><br><figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 匹配<span class="string">"www.baidu.com"</span>和<span class="string">"www.google.com"</span></div><div class="line">echo <span class="symbol">'www</span>.leolan.top\nwww.baidu.com\nwww.google.com' | grep -<span class="type">E</span> <span class="symbol">'www</span>\.(baidu|google)\.com'</div><div class="line"># 或者匹配不包含<span class="string">"baidu"</span>的内容</div><div class="line">echo <span class="symbol">'www</span>.leolan.top\nwww.baidu.com\nwww.google.com' | grep -<span class="type">Ev</span> <span class="symbol">'www</span>\.baidu\.com'</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：因为<strong>.号有特殊含义</strong>，所以需要转义。</p>
</blockquote>
<p>正则表达式和grep命令的内容就介绍这么多，下面两个更强大的工具sed和awk，因为这两个工具的强大，无法包含全部内容，只做基本介绍。</p>
<hr>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p><strong>sed 流编辑器</strong>;在 man 手册里面的全名为”sed - stream editor for filtering and transforming text “，意即，<strong>用于过滤和转换文本的流编辑器</strong>。</p>
<p>在 Linux/UNIX 的世界里敢称为编辑器的工具，大都非等闲之辈，比如前面的”vi/vim(编辑器之神)”,”emacs(神的编辑器)”,”gedit”这些个编辑器。sed与上述的最大不同之处在于它是一个非交互式的编辑器。</p>
<h3 id="sed-命令基本格式"><a href="#sed-命令基本格式" class="headerlink" title="sed 命令基本格式"></a>sed 命令基本格式</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sed [参数]... [执行命令] [输入文件]...</div><div class="line"># 形如：</div><div class="line">sed -i <span class="string">'1s/sad/happy/'</span> test # 表示将test文件中第一行的<span class="string">"sad"</span>替换为<span class="string">"happy"</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>安静模式，只打印受影响的行，默认打印输入数据的全部内容</td>
</tr>
<tr>
<td>-e</td>
<td>用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数</td>
</tr>
<tr>
<td>-f</td>
<td>filename    指定执行filename文件中的命令</td>
</tr>
<tr>
<td>-r</td>
<td>使用扩展正则表达式，默认为标准正则表达式</td>
</tr>
<tr>
<td>-i</td>
<td>将直接修改输入文件内容，而不是打印到标准输出设备</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="sed执行命令格式"><a href="#sed执行命令格式" class="headerlink" title="sed执行命令格式"></a>sed执行命令格式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="string">n1</span>][<span class="symbol">,n2</span>]command</div><div class="line">[<span class="string">n1</span>][<span class="symbol">~step</span>]command</div><div class="line"><span class="section"># 其中一些命令可以在后面加上作用范围，形如：</span></div><div class="line">sed -i 's/sad/happy/g' test # g表示全局范围</div><div class="line">sed -i 's/sad/happy/4' test # 4表示指定行中的第四个匹配字符串</div></pre></td></tr></table></figure>
<p>其中n1,n2表示输入内容的行号，它们之间为,逗号则表示从n1到n2行，如果为～波浪号则表示从n1开始以step为步进的所有行；command为执行动作，下面为一些常用动作指令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>行内替换</td>
</tr>
<tr>
<td>c</td>
<td>整行替换</td>
</tr>
<tr>
<td>a</td>
<td>插入到指定行的后面</td>
</tr>
<tr>
<td>i</td>
<td>插入到指定行的前面</td>
</tr>
<tr>
<td>p</td>
<td>打印指定行，通常与-n参数配合使用</td>
</tr>
<tr>
<td>d</td>
<td>删除指定行</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="sed操作举例"><a href="#sed操作举例" class="headerlink" title="sed操作举例"></a>sed操作举例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cp /etc/passwd ~</div><div class="line"></div><div class="line"># 打印<span class="number">2</span><span class="number">-5</span>行</div><div class="line">nl passwd | sed -n '<span class="number">2</span>,<span class="number">5</span>p'</div><div class="line"># 打印奇数行</div><div class="line">nl passwd | sed -n '<span class="number">1</span>~<span class="number">2</span>p'</div></pre></td></tr></table></figure>
<p><strong>行内替换</strong><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 将输入文本中<span class="string">"shiyanlou"</span> 全局替换为<span class="string">"hehe"</span>,并只打印替换的那一行，注意这里不能省略最后的<span class="string">"p"</span>命令</span></div><div class="line">sed -n <span class="string">'s/shiyanlou/hehe/gp'</span> passwd</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意： 行内替换可以结合正则表达式使用。</p>
</blockquote>
<p><strong>行间替换</strong><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nl passwd | <span class="keyword">grep</span> <span class="string">"leolan"</span></div><div class="line"><span class="comment"># 删除第21行</span></div><div class="line">sed -n <span class="string">'21c\www.leolan.top'</span> passwd</div></pre></td></tr></table></figure></p>
<p>参考链接：</p>
<ul>
<li><a href="http://coolshell.cn/articles/9104.html" target="_blank" rel="external">sed简明教程</a></li>
<li><a href="http://sed.sourceforge.net/sed1line_zh-CN.html" target="_blank" rel="external">sed单行脚本快速参考</a></li>
<li><a href="http://www.gnu.org/software/sed/manual/sed.html" target="_blank" rel="external">sed完全手册(英文)</a></li>
</ul>
<hr>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><blockquote>
<p>AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一.其名称得自于它的创始人Alfred Aho（阿尔佛雷德·艾侯）、Peter Jay Weinberger（彼得·温伯格）和Brian Wilson Kernighan（布莱恩·柯林汉)姓氏的首个字母.AWK程序设计语言，三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。最简单地说，AWK是一种用于处理文本的编程语言工具。</p>
</blockquote>
<hr>
<h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>awk所有的操作都是基于pattern(模式)—action(动作)对来完成的，如下面的形式：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">pattern</span> &#123;action&#125;</div></pre></td></tr></table></figure></p>
<p>你可以看到就如同很多编程语言一样，它将所有的动作操作用一对<strong>{}</strong>花括号包围起来。其中pattern通常是是表示用于匹配输入的文本的“关系式”或“正则表达式”，action则是表示匹配后将执行的动作。在一个完整awk操作中，这两者可以只有其中一个，如果没有pattern则默认匹配输入的全部文本，如果没有action则默认为打印匹配内容到屏幕。</p>
<p><strong>awk</strong>处理文本的方式，是将文本分割成一些“字段”，然后再对这些字段进行处理，默认情况下，awk以<strong>空格</strong>作为一个字段的分割符，不过这不是固定了，你可以任意指定分隔符，下面将告诉你如何做到这一点。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-<span class="symbol">F</span> fs] [-v var=value] [-f prog-file | <span class="string">'program text'</span>] [file...]</div></pre></td></tr></table></figure></p>
<p>其中<strong>-F</strong>参数用于预先指定前面提到的字段分隔符（还有其他指定字段的方式） ，-v用于预先为awk程序指定变量，-f参数用于指定awk命令要执行的程序文件，或者在不加-f参数的情况下直接将程序语句放在这里，最后为awk需要处理的文本输入，且可以同时输入多个文本文件。</p>
<hr>
<h3 id="awk操作"><a href="#awk操作" class="headerlink" title="awk操作"></a>awk操作</h3><p><strong>将文本内容打印到终端</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">touch <span class="keyword">test</span>.txt &amp;&amp; echo <span class="string">"I like linux"</span> &gt;&gt; <span class="keyword">test</span>.txt &amp;&amp; echo <span class="string">"www.leolan.top"</span> &gt;&gt; <span class="keyword">test</span>.txt</div><div class="line"></div><div class="line"># <span class="string">"quote&gt;"</span> 不用输入</div><div class="line">awk '&#123;</div><div class="line">&gt; <span class="keyword">print</span></div><div class="line">&gt; &#125;' <span class="keyword">test</span>.txt</div><div class="line"># 或者写成一行</div><div class="line">awk '&#123;<span class="keyword">print</span>&#125;' <span class="keyword">test</span>.txt</div></pre></td></tr></table></figure></p>
<p>说明:在这个操作中省略了<strong>patter</strong>，所以awk会默认匹配输入文本的全部内容，然后在”{}”花括号中执行动作，即print打印所有匹配项，这里是全部文本内容</p>
<hr>
<p><strong>将test.txt的第一行的每个字段单独显示为一行</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">awk '&#123;</div><div class="line">&gt; <span class="keyword">if</span>(NR==1)&#123;</div><div class="line">&gt; <span class="keyword">print</span> <span class="variable">$1</span> <span class="string">"\n"</span> <span class="variable">$2</span> <span class="string">"\n"</span> <span class="variable">$3</span></div><div class="line">&gt; &#125; <span class="keyword">else</span> &#123;</div><div class="line">&gt; <span class="keyword">print</span>&#125;</div><div class="line">&gt; &#125;' <span class="keyword">test</span>.txt</div><div class="line"></div><div class="line"># 或者</div><div class="line">awk '&#123;</div><div class="line">&gt; <span class="keyword">if</span>(NR==1)&#123;</div><div class="line">&gt; OFS=<span class="string">"\n"</span></div><div class="line">&gt; <span class="keyword">print</span> <span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span></div><div class="line">&gt; &#125; <span class="keyword">else</span> &#123;</div><div class="line">&gt; <span class="keyword">print</span>&#125;</div><div class="line">&gt; &#125;' <span class="keyword">test</span>.txt</div></pre></td></tr></table></figure></p>
<p>说明:这里使用了awk语言的分支选择语句if,它的使用和很多高级语言如C/C++语言基本一致，如果你有这些语言的基础，这里将很好理解。另一个你需要注意的是<strong>NR与OFS</strong>，这两个是awk内建的变量，<strong>NR表示当前读入的记录数</strong>，你可以简单的理解为当前处理的行数，<strong>OFS表示输出时的字段分隔符</strong>，默认为<strong>“ “</strong>空格，用OFS将字段分隔符设置为<strong>\n</strong>换行符，所以第一行原本以空格为字段分隔的内容就分别输出到单独一行了。<br>然后是<strong>$N</strong>其中N为相应的字段号，这也是awk的内建变量，它<strong>表示引用相应的字段</strong>，因为第一行只有三个字段，所以只引用到了$3。除此之外另一个这里没有出现的<strong>$0</strong>，它<strong>表示引用当前记录（当前行）的全部内容</strong>。</p>
<hr>
<p><strong>将test的第二行的以点为分段的字段换成以空格为分隔</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">awk -F'.' '&#123;</div><div class="line">&gt; <span class="keyword">if</span>(NR==2)&#123;</div><div class="line">&gt; <span class="keyword">print</span> <span class="variable">$1</span> <span class="string">"\t"</span> <span class="variable">$2</span> <span class="string">"\t"</span> <span class="variable">$3</span></div><div class="line">&gt; &#125;&#125;' <span class="keyword">test</span>.txt</div><div class="line"></div><div class="line"># 或者</div><div class="line">awk '</div><div class="line">&gt; BEGIN&#123;</div><div class="line">&gt; FS=<span class="string">"."</span></div><div class="line">&gt; OFS=<span class="string">"\t"</span>  # 如果写为一行，两个动作语句之间应该以<span class="string">";"</span>号分开  </div><div class="line">&gt; &#125;&#123;</div><div class="line">&gt; <span class="keyword">if</span>(NR==2)&#123;</div><div class="line">&gt; <span class="keyword">print</span> <span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span></div><div class="line">&gt; &#125;&#125;' <span class="keyword">test</span>.txt</div></pre></td></tr></table></figure></p>
<p>说明：这里的<strong>-F</strong>参数，它是用来<strong>预先指定待处理记录的字段分隔符</strong>。除了指定OFS还可以在print 语句中直接打印特殊符号如这里的\t，<strong>print打印的非变量内容都需要用””一对引号包围起来</strong>。第二种方法中实现预先指定变量分隔符的另一种方式，即使用<strong>BEGIN</strong>，就这个表达式指示了，<strong>其后的动作将在所有动作之前执行，这里是FS赋值了新的”.”点号代替默认的” “空格</strong></p>
<hr>
<h3 id="awk常用的内置变量"><a href="#awk常用的内置变量" class="headerlink" title="awk常用的内置变量"></a>awk常用的内置变量</h3><table>
<thead>
<tr>
<th>变量名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>FILENAME</td>
<td>当前输入文件名，若有多个文件，则只表示第一个。如果输入是来自标准输入，则为空字符串</td>
</tr>
<tr>
<td>$0</td>
<td>当前记录的内容</td>
</tr>
<tr>
<td>$N</td>
<td>N表示字段号，最大值为NF变量的值</td>
</tr>
<tr>
<td>FS</td>
<td>字段分隔符，由正则表达式表示，默认为” “空格</td>
</tr>
<tr>
<td>RS</td>
<td>输入记录分隔符，默认为”\n”，即一行为一个记录</td>
</tr>
<tr>
<td>NF</td>
<td>当前记录字段数</td>
</tr>
<tr>
<td>NR</td>
<td>已经读入的记录数</td>
</tr>
<tr>
<td>FNR</td>
<td>当前输入文件的记录数，请注意它与NR的区别</td>
</tr>
<tr>
<td>OFS</td>
<td>输出字段分隔符，默认为” “空格</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分隔符，默认为”\n”</td>
</tr>
</tbody>
</table>
<p>参考资料：</p>
<ul>
<li><a href="http://awk.readthedocs.io/en/latest/chapter-one.html" target="_blank" rel="external">awk程序设计语言</a></li>
<li><a href="http://coolshell.cn/articles/9070.html" target="_blank" rel="external">awk简明教程</a></li>
<li><a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="external">awk用户指南(英文)</a></li>
</ul>
<hr>
<hr>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote>
<p>正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</p>
</blockquote>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列符合某个句法规则的字符串。</p>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p><strong>|</strong>竖直分隔符表示选择，例如”boy|girl”可以匹配”boy”或者”girl”</p>
<h3 id="数量限定"><a href="#数量限定" class="headerlink" title="数量限定"></a>数量限定</h3><p>数量限定除了我们举例用的*,还有+加号,?问号,如果在一个模式中不加数量限定符则表示出现一次且仅出现一次：</p>
<ul>
<li><strong>+表示</strong>：前面的字符必须出现至少一次(1次或多次)，例如，”goo+gle”,可以匹配”gooogle”,”goooogle”等；</li>
<li><strong>?表示</strong>：前面的字符最多出现一次(0次或1次)，例如，”colou?r”,可以匹配”color”或者”colour”;</li>
<li><strong>*星号</strong>：代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，“0*42”可以匹配42、042、0042、00042等。</li>
</ul>
<h3 id="范围和优先级"><a href="#范围和优先级" class="headerlink" title="范围和优先级"></a>范围和优先级</h3><p><strong>()圆括号</strong>：可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。例如，”gr(a|e)y”等价于”gray|grey”，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），”(grand)?father”匹配father和grandfather（这里体验了范围，<strong>?</strong>将圆括号内容作为一个整体匹配）。</p>
<h3 id="语法-少部分"><a href="#语法-少部分" class="headerlink" title="语法(少部分)"></a>语法(少部分)</h3><p>正则表达式有多种不同的风格，下面列举一些常用的作为 <strong>PCRE 子集</strong>的适用于<strong>perl</strong>和<strong>python</strong>编程语言及<strong>grep</strong>或<strong>egrep</strong>的正则表达式匹配规则</p>
<blockquote>
<p>PCRE（Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式）是一个用 C 语言编写的正则表达式函数库，由菲利普.海泽(Philip Hazel)编写。PCRE是一个轻量级的函数库，比Boost 之类的正则表达式库小得多。PCRE 十分易用，同时功能也很强大，性能超过了 POSIX 正则表达式库和一些经典的正则表达式库。</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\”匹配“\”而“(”则匹配“(”。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置。</td>
</tr>
<tr>
<td>{n}</td>
<td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>*</td>
<td><strong>匹配前面的子表达式零次或多次。</strong>例如，zo<em>能匹配“z”、“zo”以及“zoo”。</em>等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td><strong>匹配前面的子表达式一次或多次。</strong>例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>
</tr>
<tr>
<td>?</td>
<td><strong>匹配前面的子表达式零次或一次。</strong>例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td>
</tr>
<tr>
<td>?</td>
<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“(.｜\n)”的模式。</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“(”或“)”。</td>
</tr>
<tr>
<td>x｜y</td>
<td>匹配x或y。例如，“z｜food”能匹配“z”或“food”。“(z｜f)ood”则匹配“zood”或“food”。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合（character class）。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。其中特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>排除型（negate）字符集合。匹配未列出的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>
</tr>
</tbody>
</table>
<p>参考WiKi：<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="external">正则表达式</a></p>
<hr>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级为从上到下从左到右，依次降低：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td>转义符</td>
</tr>
<tr>
<td>(), (?:), (?=), []</td>
<td>括号和中括号</td>
</tr>
<tr>
<td>*、+、?、{n}、{n,}、{n,m}</td>
<td>限定符</td>
</tr>
<tr>
<td>^、$、\任何元字符</td>
<td>定位点和序列</td>
</tr>
<tr>
<td>｜</td>
<td>　选择</td>
</tr>
</tbody>
</table>
<hr>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;在实验楼（当然还在其他网站看了很多教程）学习整理的一些笔记，目前
    
    </summary>
    
      <category term="Shell" scheme="https://www.leolan.top/categories/Shell/"/>
    
    
      <category term="Shell编程入门" scheme="https://www.leolan.top/tags/Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python入门</title>
    <link href="https://www.leolan.top/posts/21062/"/>
    <id>https://www.leolan.top/posts/21062/</id>
    <published>2016-12-18T03:32:15.000Z</published>
    <updated>2017-02-27T08:47:33.047Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="学习廖雪峰老师的博客整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ-･∀･-ﾉ-●"><a href="#学习廖雪峰老师的博客整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ-･∀･-ﾉ-●" class="headerlink" title="学习廖雪峰老师的博客整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ|･∀･|ﾉ*~●"></a>学习廖雪峰老师的博客整理的一些笔记，目前还很凌乱，很惭愧，还没有掌握知识，大脑中还没有一个清晰的思路，之后会不断的学习和完善ﾍ|･∀･|ﾉ*~●</h1><hr>
<h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p>官网：www.python.org</p>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>系统是OS X 10.8~10.10，那么系统自带的Python版本是2.7。要安装最新的Python 3.5，有两个方法：<br>方法一：从Python官网下载Python 3.5的<a href="https://www.python.org/ftp/python/3.5.0/python-3.5.0-macosx10.6.pkg" target="_blank" rel="external">安装程序</a>，双击运行并安装；<br>方法二：如果安装了Homebrew，直接通过命令<code>brew install python3</code>安装即可。</p>
<hr>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>从Python的官方网站下载Python 3.5对应的<a href="https://www.python.org/ftp/python/3.5.0/python-3.5.0-amd64.exe" target="_blank" rel="external">64位安装程序</a>或<a href="https://www.python.org/ftp/python/3.5.0/python-3.5.0.exe" target="_blank" rel="external">32位安装程序</a><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/125905986.png" alt="mark"></p>
<p>特别要注意勾上<strong>Add Python 3.5 to PATH</strong>，然后点“Install Now”即可完成安装。<br>不打勾则需要自己设置环境变量。</p>
<hr>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>安装2.X版本<br><code>yum install python -y</code></p>
<p><strong>Ubuntu</strong>自带有</p>
<p>安装3.X版本<br><code>yum install python3 -y</code>    (部分源可以这样安装)<br>源码编译通用：<br>版本选择：<strong><a href="https://www.python.org/ftp/python/" target="_blank" rel="external">https://www.python.org/ftp/python/</a></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> gcc cmake -y        </div><div class="line">apt-<span class="keyword">get</span>  <span class="keyword">install</span> gcc cmake   #一般Ubuntu自带了</div><div class="line">wget <span class="keyword">http</span>://www.python.org/<span class="keyword">ftp</span>/python/<span class="number">3.3</span><span class="number">.0</span>/Python<span class="number">-3.3</span><span class="number">.0</span>.tgz</div><div class="line">tar -zxvf Python<span class="number">-3.3</span><span class="number">.0</span>.tgz</div><div class="line">cd Python<span class="number">-3.3</span><span class="number">.0</span></div></pre></td></tr></table></figure></p>
<p>在编译前先在<strong>/usr/local</strong>建一个文件夹<strong>python3</strong>（作为python的安装路径，以免覆盖老的版本）<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/<span class="keyword">local</span>/python3</div><div class="line">./configure --prefix=/usr/<span class="keyword">local</span>/python3    (指定安装路径，不指定则覆盖老版本)</div><div class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</div><div class="line"><span class="meta">#Ubuntu不用进行以下设置，自动添加变量路径了。</span></div></pre></td></tr></table></figure></p>
<p>覆盖老版本(有需要可以这样做，也可以不覆盖，共存)<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv <span class="regexp">/usr/</span>bin<span class="regexp">/python /u</span>sr<span class="regexp">/bin/</span>python_old</div><div class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python     <span class="comment">#（建立软连接）</span></div></pre></td></tr></table></figure></p>
<p>此时运行python的是新版本，老版本要使用命令/usr/bin/python_old才能运行。<br>双版本自由切换（增加Python3的用户变量）：<code>vim ~/.bash_profile</code><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/python3/bin/</span></div><div class="line">source .bash_profile      <span class="comment">#(立刻生效)</span></div></pre></td></tr></table></figure></p>
<p>如果是<code>export PATH=&quot;$var_PATH&quot;</code>  则只在当前shell有效，一旦关闭就失效了。<br>此时可以自由运行Python或Python3<br><code>rm -rf ~/Python*</code><br>OK安装完成。</p>
<hr>
<p>Python解释器：<br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000</a></p>
<hr>
<hr>
<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>Python提供了一个<strong>input()</strong>，可以让用户输入字符串，并存放到一个变量里。<br>当你输入<code>name = input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。<br>输入完成后，不会有任何提示，Python交互式命令行又回到<strong>&gt;&gt;&gt;</strong>状态了。输入name可以直接查看变量内容：<br>例：<code>name = input(&#39;please input your name:&#39;)</code>   (此时输入姓名后是把姓名输入到变量name中，如果再让<strong>n＝name</strong>的话，在&gt;&gt;&gt;状态下输入n，显示的是就是姓名，当然print(‘hello , ‘,name)也行。)<strong>python会把逗号显示为空格</strong>。</p>
<p>print()函数也可以接受多个字符串（单双引号引起来的都是字符串），用逗号“<strong>,</strong>”隔开，就可以连成一串输出：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(<span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span>)</div></pre></td></tr></table></figure>
<p>The quick brown fox jumps over the lazy dog</p>
<p>print()会依次打印每个字符串，遇到逗号“<strong>,</strong>”会输出一个空格，因此，输出的字符串是这样拼起来的：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/131354039.png" alt="mark"></p>
<hr>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>以<strong>#</strong>开头的语句是注释，可以是任意内容，解释器会忽略掉注释。<br>其他每一行都是一个语句，当语句以<strong>冒号:结尾</strong>时，缩进的语句视为代码块。</p>
<p>缩进有利有弊。好处是强迫你写出格式化且缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。但没有规定缩进是几个空格还是<strong>Tab</strong>。按照约定俗成的管理，应该始终坚持使用4<strong>个空格的缩进</strong>。<br>缩进的另一个好处是强迫你写出缩进较少的代码，<br>缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像格式化Java代码那样格式化Python代码。<br>最后，请务必注意，<strong>Python程序是大小写敏感的</strong>，如果写错了大小写，程序会报错。<br>Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。<br>在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。<strong>最少也要加tab键或空格，不然报错</strong>。</p>
<p>科学计数法表示，把10用e替代，1.23x109就是<strong>1.23e9</strong>，或者<strong>12.3e8</strong>，0.000012可以写成<strong>1.2e-5</strong>，等等。整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>
<hr>
<p>字符串是以<strong>单引号’</strong>或<strong>双引号”</strong>括起来的任意文本。<strong>‘’</strong>或<strong>“”</strong>本身只是一种表示方式，不是字符串的一部分，因此，字符串<strong>‘abc’</strong>只有<strong>a，b，c</strong>这3个字符。如果<strong>‘</strong>本身也是一个字符，那就可以用<strong>“”</strong>括起来，比如”I’m OK”包含的字符是<strong>I，’，m，空格，O，K</strong>这6个字符。<br>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：<br><strong>‘I\’m \”OK\”!’</strong></p>
<p>表示的字符串内容是：<br>I’m “OK”!</p>
<p>转义字符<strong>\可以转义很多字符</strong>，比如<strong>\n表示换行</strong>，<strong>\t表示制表符（tab键）</strong>，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用<strong>print()</strong>打印字符串看看：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">'I\'m ok.'</span>)</div><div class="line">I<span class="string">'m ok.</span></div><div class="line">&gt;&gt;&gt; print('I<span class="string">\'m</span> learning<span class="string">\nPython.')</span></div><div class="line">I<span class="string">'m learning</span></div><div class="line">Python.</div><div class="line">&gt;&gt;&gt; print('<span class="string">\\\n\\')</span></div><div class="line"><span class="string">\</span></div><div class="line"><span class="string">\</span></div></pre></td></tr></table></figure></p>
<p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\t\\'</span>)</div><div class="line">\       \</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\t\\'</span>)</div><div class="line">\\\t\\</div></pre></td></tr></table></figure></p>
<p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></div><div class="line"><span class="meta">... </span>line2</div><div class="line"><span class="meta">... </span>line3''')</div><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div></pre></td></tr></table></figure></p>
<p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入。如果写成程序，就是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'''line1</span></div><div class="line">line2</div><div class="line">line3''')</div></pre></td></tr></table></figure></p>
<p>多行字符串’’’…’’’还可以在前面加上<strong>r</strong>使用，请自行测试。</p>
<hr>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写）<br>布尔值可以用and、or和not运算。<br><strong>and运算</strong>是与运算，只有所有都为True，and运算结果才是True：<br><strong>or运算</strong>是或运算，只要其中有一个为True，or运算结果就是True：<br><strong>not运算</strong>是非运算，它是一个单目运算符，把True变成False，False变成True：<br>布尔值经常用在条件判断中，比如：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div><div class="line"><span class="built_in">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</div></pre></td></tr></table></figure></p>
<p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。<br>此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p>
<p>在Python中，等号=是赋值语句，可以把任意数据类型（整型，浮点，字符串，布尔值，变量等等）赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量<br>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int <span class="keyword">a</span> = <span class="number">123</span>;<span class="comment"> // a是整数类型变量</span></div><div class="line"><span class="keyword">a</span> = <span class="string">"ABC"</span>;<span class="comment"> // 错误：不能把字符串赋给整型变量</span></div></pre></td></tr></table></figure></p>
<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<hr>
<p>把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：<br>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)<br>最后一行打印出变量b的内容到底是’ABC’呢还是’XYZ’？如果从数学意义上理解，就会错误地得出b和a相同，也应该是’XYZ’，但实际上b的值是’ABC’，让我们一行一行地执行代码，就可以看到到底发生了什么事：<br>执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，并把a指向’ABC’：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/135540676.png" alt="mark"><br>执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：<strong>(b是找到a所指向的地址，再把自己的指向那个地址，然后b就和a没关系了。）</strong><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/135625547.png" alt="mark"><br>执行a = ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/135733123.png" alt="mark"><br>所以，最后打印变量b的结果自然是’ABC’了。</p>
<hr>
<p>常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：<br>Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</p>
<p>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">10</span> / <span class="number">3</span></div><div class="line"><span class="number">3.3333333333333335</span></div></pre></td></tr></table></figure></p>
<p>/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">9</span> / <span class="number">3</span></div><div class="line"><span class="number">3.0</span></div></pre></td></tr></table></figure></p>
<p>还有一种除法是//，称为地板除，两个整数的除法仍然是整数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">10</span> <span class="comment">// 3</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。<br>因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">10</span> % <span class="number">3</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>
<hr>
<h2 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h2><p>最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(<span class="string">'包含中文的str'</span>)</div><div class="line">包含中文的str</div></pre></td></tr></table></figure></p>
<p>对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; ord(<span class="string">'A'</span>)</div><div class="line"><span class="number">65</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ord(<span class="string">'中'</span>)</div><div class="line"><span class="number">20013</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; chr(<span class="number">66</span>)</div><div class="line"><span class="string">'B'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; chr(<span class="number">25991</span>)</div><div class="line"><span class="string">'文'</span></div></pre></td></tr></table></figure></p>
<p>如果知道字符的整数编码，还可以用十六进制这么写str：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\u4e2d\u6587'</span></div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure></p>
<p>两种写法完全是等价的。<br>由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。<br>Python对bytes类型的数据用带b前缀的单引号或双引号表示：<code>x = b&#39;ABC&#39;</code></p>
<p>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。<br>以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line">b<span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line">b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'中文'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">UnicodeEncodeError:</span> <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></div></pre></td></tr></table></figure></p>
<p>纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。<br>在bytes中，无法显示为ASCII字符的字节，用\x##显示。<br>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; b<span class="string">'ABC'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure></p>
<p>要计算str包含多少个字符，可以用len()函数：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(<span class="string">'ABC'</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(<span class="string">'中文'</span>)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(b<span class="string">'ABC'</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。<br>在操作字符串时，我们经常遇到<strong>str</strong>和<strong>bytes</strong>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。<br>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python3</span></div><div class="line"># -*- coding: utf-<span class="number">8</span> -*-</div></pre></td></tr></table></figure></p>
<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；<br>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。<br>申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/140952776.png" alt="mark"><br>如果.py文件本身使用UTF-8编码，并且也申明了<code># -*- coding: utf-8 -*-</code>，打开命令提示符测试就可以正常显示中文：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/141100866.png" alt="mark"></p>
<hr>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似<strong>‘亲爱的xxx你好！你xx月的话费是xx，余额是xx’</strong>之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p>
<p>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Hello, %s'</span> % <span class="string">'world'</span></div><div class="line"><span class="string">'Hello, world'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</div><div class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></div></pre></td></tr></table></figure></p>
<p><strong>%运算符</strong>就是用来格式化字符串的。在字符串内部，<strong>%s表示用字符串替换</strong>，<strong>%d表示用整数替换</strong>，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<strong>%?</strong>，括号可以省略。</p>
<p>常见的占位符有：</p>
<p>|–|–|<br>|%d|整数|<br>|%f|浮点数|<br>|%s|字符串|<br>|%x|十六进制整数|</p>
<p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; '%<span class="number">2</span>d-%<span class="number">02</span>d' % (<span class="number">3</span>, <span class="number">1</span>)</div><div class="line">' <span class="number">3</span><span class="number">-01</span>'</div><div class="line">&gt;&gt;&gt; '%<span class="number">.2</span>f' % <span class="number">3.1415926</span>        （<span class="number">.2</span>f表示小数点后保留两位）</div><div class="line">'<span class="number">3.14</span>'</div></pre></td></tr></table></figure></p>
<p>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="symbol">'Age</span>: %s. Gender: %s' % (<span class="number">25</span>, <span class="literal">True</span>)</div><div class="line"><span class="symbol">'Age</span>: <span class="number">25</span>. Gender: <span class="literal">True</span>'</div></pre></td></tr></table></figure></p>
<p>有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'growth rate: %d %%'</span> % <span class="number">7</span></div><div class="line"><span class="string">'growth rate: 7 %'</span></div></pre></td></tr></table></figure></p>
<p>练习<br>小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出’xx.x%’，只保留小数点后1位：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">s1 = 72</div><div class="line">s2 = 85</div><div class="line">r = 100*(s2/s1-1)</div><div class="line">print('提升了: %.2f' %r)</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> x = <span class="keyword">float</span>(input(<span class="string">'请输入上次得分：'</span>))</div><div class="line">    y = <span class="keyword">float</span>(input(<span class="string">'请输入这次得分：'</span>))</div><div class="line">    z = (y-x)/x*<span class="number">100</span></div><div class="line">    <span class="keyword">if</span> z&gt;=<span class="number">0</span>:</div><div class="line">        <span class="keyword">print</span>(<span class="string">'这次进步了：%.1f'</span> %z+<span class="string">'%'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span>(<span class="string">'这次退步了：%.1f'</span> %-z+<span class="string">'%'</span>)</div><div class="line">except Exception:</div><div class="line">    <span class="keyword">print</span>(<span class="string">'请输入正确的分数！'</span>)</div></pre></td></tr></table></figure>
<hr>
<h2 id="使用list和tuple"><a href="#使用list和tuple" class="headerlink" title="使用list和tuple"></a>使用list和tuple</h2><p>list是一种有序的集合，可以随时添加和删除其中的元素。比如，列出班里所有同学的名字，就可以用一个list表示：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p>
<p>变量classmates就是一个list。用len()函数可以获得list元素的个数：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(classmates)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>用索引来访问list中每一个位置的元素，记得索引是从0开始的：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">0</span>]</div><div class="line"><span class="string">'Michael'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">1</span>]</div><div class="line"><span class="string">'Bob'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">2</span>]</div><div class="line"><span class="string">'Tracy'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">3</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">IndexError:</span> list index out of range</div></pre></td></tr></table></figure></p>
<p>当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - 1。<br>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[-<span class="number">1</span>]</div><div class="line"><span class="string">'Tracy'</span></div></pre></td></tr></table></figure></p>
<p>以此类推，可以获取倒数第2个、倒数第3个：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[-<span class="number">2</span>]</div><div class="line"><span class="string">'Bob'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[-<span class="number">3</span>]</div><div class="line"><span class="string">'Michael'</span></div></pre></td></tr></table></figure></p>
<p>list是一个可变的有序表，所以，可以往list中追加元素到末尾：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.append(<span class="string">'Adam'</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</div></pre></td></tr></table></figure></p>
<p>也可以把元素插入到指定的位置，比如索引号为1的位置：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</div></pre></td></tr></table></figure></p>
<p>要删除list末尾的元素，用pop()方法：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.pop()</div><div class="line"><span class="string">'Adam'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p>
<p>要删除指定位置的元素，用pop(i)方法，其中i是索引位置：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.pop(<span class="number">1</span>)</div><div class="line"><span class="string">'Jack'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p>
<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">1</span>] = <span class="string">'Sarah'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p>
<p>list里面的元素的数据类型也可以不同，比如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; L = [<span class="string">'Apple'</span>, <span class="number">123</span>, True]</div></pre></td></tr></table></figure></p>
<p>list元素也可以是另一个list，比如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s = [<span class="string">'python'</span>, <span class="string">'java'</span>, [<span class="string">'asp'</span>, <span class="string">'php'</span>], <span class="string">'scheme'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(s)</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; p = [<span class="string">'asp'</span>, <span class="string">'php'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s = [<span class="string">'python'</span>, <span class="string">'java'</span>, p, <span class="string">'scheme'</span>]</div></pre></td></tr></table></figure></p>
<p>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。<br>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; L = []</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(L)</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</div></pre></td></tr></table></figure></p>
<p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。<br>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。<br>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = (<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>如果要定义一个空的tuple，可以写成()：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = ()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line">()</div></pre></td></tr></table></figure></p>
<p>但是，要定义一个只有1个元素的tuple，如果你这么定义：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = (<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。<br>所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = (<span class="number">1</span>,)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line">(<span class="number">1</span>,)</div></pre></td></tr></table></figure></p>
<p>Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。<br>最后来看一个“可变的”tuple：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])</div><div class="line">&gt;&gt;&gt; t[<span class="string">2</span>][<span class="symbol">0</span>] = 'X'</div><div class="line">&gt;&gt;&gt; t[<span class="string">2</span>][<span class="symbol">1</span>] = 'Y'</div><div class="line">&gt;&gt;&gt; t</div><div class="line">('a', 'b', ['X', 'Y'])</div></pre></td></tr></table></figure></p>
<p>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？<br>别急，我们先看看定义的时候tuple包含的3个元素：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/144646287.png" alt="mark"><br>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/144720550.png" alt="mark"></p>
<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<strong>‘a’</strong>，就不能改成指向<strong>‘b’</strong>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！<br>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p>
<p>练习：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="section"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">L = [</div><div class="line"><span class="code">    ['Apple', 'Google', 'Microsoft'],</span></div><div class="line"><span class="code">    ['Java', 'Python', 'Ruby', 'PHP'],</span></div><div class="line"><span class="code">    ['Adam', 'Bart', 'Lisa']</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="section"># 打印Apple:</span></div><div class="line">print(L[<span class="string">0</span>][<span class="symbol">0</span>])</div><div class="line"><span class="section"># 打印Python:</span></div><div class="line">print(L[<span class="string">1</span>][<span class="symbol">1</span>]) 或 print(L[<span class="string">-2</span>][<span class="symbol">-3</span>])</div><div class="line"><span class="section"># 打印Lisa:</span></div><div class="line">print(L[<span class="string">2</span>][<span class="symbol">2</span>])  或 print(L[<span class="string">-1</span>][<span class="symbol">-1</span>])</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。<br>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用if语句实现：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">20</span></div><div class="line"><span class="built_in">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'your age is'</span>, age)</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div></pre></td></tr></table></figure></p>
<p>根据Python的缩进规则，如果if语句判断是True，就把缩进的两行print语句执行了，否则，什么也不做。<br>也可以给if添加一个else语句，意思是，如果if判断是False，不要执行if的内容，去把else执行了：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="built_in">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'your age is'</span>, age)</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div><div class="line"><span class="built_in">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'your age is'</span>, age)</div><div class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</div></pre></td></tr></table></figure></p>
<p><strong>注意不要少写了冒号:</strong>。<br>当然上面的判断是很粗略的，完全可以用elif做更细致的判断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = 3</div><div class="line"><span class="keyword">if</span> age &gt;= 18:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= 6:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure></p>
<p>elif是else if的缩写，完全可以有多个elif，所以if语句的完整形式就是：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if <span class="params">&lt;条件判断<span class="number">1</span>&gt;</span>:</div><div class="line">    <span class="params">&lt;执行<span class="number">1</span>&gt;</span></div><div class="line">elif <span class="params">&lt;条件判断<span class="number">2</span>&gt;</span>:</div><div class="line">    <span class="params">&lt;执行<span class="number">2</span>&gt;</span></div><div class="line">elif <span class="params">&lt;条件判断<span class="number">3</span>&gt;</span>:</div><div class="line">    <span class="params">&lt;执行<span class="number">3</span>&gt;</span></div><div class="line"><span class="symbol">else:</span></div><div class="line">    <span class="params">&lt;执行<span class="number">4</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>if语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = 20</div><div class="line"><span class="keyword">if</span> age &gt;= 6:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= 18:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure></p>
<p>if判断条件还可以简写，比如写：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">if</span> x:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'True'</span>)</div></pre></td></tr></table></figure></p>
<p>只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。<br>再议 input<br>最后看一个有问题的条件判断。很多同学会用input()读取用户的输入，这样可以自己输入，程序运行得更有意思：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">birth = <span class="built_in">input</span>(<span class="string">'birth: '</span>)</div><div class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</div><div class="line">    <span class="keyword">print</span>(<span class="string">'00前'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>(<span class="string">'00后'</span>)</div><div class="line"></div><div class="line"># 输入<span class="number">1982</span>，结果报错</div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></div><div class="line">TypeError: unorderable <span class="built_in">type</span><span class="variable">s:</span> str() &gt; <span class="keyword">int</span>()</div></pre></td></tr></table></figure></p>
<p>这是因为<strong>input()返回的数据类型是str</strong>，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="keyword">input</span>(<span class="string">'birth: '</span>)</div><div class="line">birth = <span class="keyword">int</span>(s)</div><div class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</div><div class="line">    <span class="keyword">print</span>(<span class="string">'00前'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>(<span class="string">'00后'</span>)</div></pre></td></tr></table></figure></p>
<p>再次运行，就可以得到正确地结果。但是，如果输入abc呢？又会得到一个错误信息：<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ValueError: invalid literal for int() with base 10: ‘abc’</module></stdin></p>
<p>原来int()函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p>
<p>练习<br>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：<br>  ● 低于18.5：过轻<br>  ● 18.5-25：正常<br>  ● 25-28：过重<br>  ● 28-32：肥胖<br>  ● 高于32：严重肥胖<br>用if-elif判断并打印结果：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="attr">height</span> = <span class="number">1.75</span></div><div class="line"><span class="attr">weight</span> = <span class="number">80.5</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>要计算1+2+3，我们可以直接写表达式：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span></div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>要计算1+2+3+…+10，勉强也能写出来。<br>但是，要计算1+2+3+…+10000，直接写表达式就不可能了。<br>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。<br>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="keyword">for</span> <span class="keyword">name</span> <span class="keyword">in</span> names:</div><div class="line">    print(<span class="keyword">name</span>)</div></pre></td></tr></table></figure></p>
<p>执行这段代码，会依次打印names的每一个元素：<br>Michael<br>Bob<br>Tracy</p>
<p>所以<strong>for x in …</strong>循环就是把每个元素代入变量x，然后执行缩进块的语句。<br>再比如我们想计算1-10的整数之和，可以用一个sum变量做累加：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sum</span> = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</div><div class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</div><div class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</div></pre></td></tr></table></figure></p>
<p>如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从0开始小于5的整数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="type">list</span>(range(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<p>range(101)就可以生成0-100的整数序列，计算如下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sum</span> = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</div><div class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</div><div class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</div></pre></td></tr></table></figure></p>
<p>请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。<br>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sum</span> = <span class="number">0</span></div><div class="line"><span class="built_in">n</span> = <span class="number">99</span></div><div class="line">while <span class="built_in">n</span> &gt; <span class="symbol">0:</span></div><div class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">n</span></div><div class="line">    <span class="built_in">n</span> = <span class="built_in">n</span> - <span class="number">2</span></div><div class="line">print(<span class="built_in">sum</span>)</div></pre></td></tr></table></figure></p>
<p>在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。<br>练习<br>请利用循环依次对list中的每个名字打印出Hello, xxx!：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">L = [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>, <span class="string">'Adam'</span>]</div><div class="line"><span class="keyword">for</span> L in L:</div><div class="line">    <span class="keyword">print</span>(<span class="string">"hello,%s!"</span> %L)</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="使用dict和set"><a href="#使用dict和set" class="headerlink" title="使用dict和set"></a>使用dict和set</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br>查成绩如果用list实现，需要两个list：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">names</span> = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="attr">scores</span> = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>]</div></pre></td></tr></table></figure></p>
<p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。<br>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div></pre></td></tr></table></figure></p>
<p>假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。<br>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p>
<p>dict就是第二种实现方式，给定一个名字，比如’Michael’，dict在内部就可以直接计算出Michael对应的存放成绩的“页码”，也就是95这个数字存放的内存地址，直接取出来，所以速度非常快。<br>你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。</p>
<p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Adam'</span>] = <span class="number">67</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Adam'</span>]</div><div class="line"><span class="number">67</span></div></pre></td></tr></table></figure></p>
<p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>] = <span class="number">90</span>        dict_name[<span class="string">'key'</span>] = value</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>]</div><div class="line"><span class="number">90</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>] = <span class="number">88</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>]</div><div class="line"><span class="number">88</span></div></pre></td></tr></table></figure></p>
<p>如果key不存在，dict就会报错：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Thomas'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">KeyError:</span> <span class="string">'Thomas'</span></div></pre></td></tr></table></figure></p>
<p>要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d.get(<span class="string">'Thomas'</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d.get(<span class="string">'Thomas'</span>, -<span class="number">1</span>)</div><div class="line">-<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>注意：返回None的时候Python的交互式命令行不显示结果。<br>要删除一个key，用pop(key)方法，对应的value也会从dict中删除：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d.pop(<span class="string">'Bob'</span>)</div><div class="line"><span class="number">75</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d</div><div class="line">&#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div></pre></td></tr></table></figure></p>
<p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。<br>和list比较，dict有以下几个特点：</p>
<ul>
<li><ol>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
</ol>
</li>
<li><ol>
<li>需要占用大量的内存，内存浪费多。</li>
</ol>
</li>
</ul>
<p>而list相反：</p>
<ul>
<li><ol>
<li>查找和插入的时间随着元素的增加而增加；</li>
</ol>
</li>
<li><ol>
<li>占用空间小，浪费内存很少。</li>
</ol>
</li>
</ul>
<p>所以，<strong>dict是用空间来换取时间的一种方法</strong>。<br>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。<br>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。<br>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[key] = <span class="string">'a list'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">TypeError:</span> unhashable <span class="symbol">type:</span> <span class="string">'list'</span></div></pre></td></tr></table></figure></p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>要创建一个set，需要提供一个list作为输入集合：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<p>注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。<br>重复元素在set中自动被过滤：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<p>通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure></p>
<p>通过remove(key)方法可以删除元素：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.remove(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">&gt;&gt;&gt; s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">&gt;&gt;&gt; s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">&gt;&gt;&gt; s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure></p>
<p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。把list放入set，则会报错。</p>
<p>再议不可变对象<br>上面我们讲了，str是不变对象，而list是可变对象。<br>对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = [<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a.sort()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div></pre></td></tr></table></figure></p>
<p>而对于不可变对象，比如str，对str进行操作呢：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</div><div class="line"><span class="string">'Abc'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line"><span class="string">'abc'</span></div></pre></td></tr></table></figure></p>
<p>虽然字符串有个replace()方法，也确实变出了’Abc’，但变量a最后仍是’abc’，应该怎么理解呢？<br>我们先把代码改成下面这样：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = <span class="string">'abc'</span></div><div class="line">&gt;&gt;&gt; <span class="selector-tag">b</span> = <span class="selector-tag">a</span>.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</div><div class="line">&gt;&gt;&gt; <span class="selector-tag">b</span></div><div class="line"><span class="string">'Abc'</span></div><div class="line">&gt;&gt;&gt; <span class="selector-tag">a</span></div><div class="line"><span class="string">'abc'</span></div></pre></td></tr></table></figure></p>
<p>要始终牢记的是，<strong>a是变量</strong>，而<strong>‘abc’</strong>才是字符串对象！有些时候，我们经常说，对象a的内容是’abc’，但其实是指，a本身是一个变量，它指向的对象的内容才是’abc’：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/150425099.png" alt="mark"></p>
<p>当我们调用<strong>a.replace(‘a’, ‘A’)</strong>时，实际上调用方法<strong>replace</strong>是作用在字符串对象’abc’上的，而这个方法虽然名字叫replace，但却没有改变字符串’abc’的内容。相反，replace方法创建了一个新字符串’Abc’并返回，如果我们用变量b指向该新字符串，就容易理解了，变量a仍指向原有的字符串’abc’，但变量b却指向新字符串’Abc’了：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161218/150947182.png" alt="mark"></p>
<p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p>
<p>小结<br>使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。<br>tuple虽然是不变对象，但试试把<strong>(1, 2, 3)</strong>和<strong>(1, [2, 3])</strong>放入dict或set中，并解释结果。</p>
<hr>
<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>我们知道圆的面积计算公式为：<br>S = πr2<br>当代码出现有规律的重复的时候，你就需要当心了，每次写3.14 <em> x </em> x不仅很麻烦，而且，如果要把3.14改成3.14159265359的时候，得全部替换。<br>有了函数，我们就不再每次写s = 3.14 <em> x </em> x，而是写成更有意义的函数调用s = area_of_circle(x)，而函数area_of_circle本身只需要写一次，就可以多次调用。</p>
<hr>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>抽象是数学中非常常见的概念。举个例子：<br>计算数列的和，比如：1 + 2 + 3 + … + 100，写起来十分不方便，于是数学家发明了求和符号∑，可以把1 + 2 + 3 + … + 100记作：</p>
<p>$$\sum\limits_{n = 1}^{100} n $$</p>
<p>这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。<br>而且，这种抽象记法是可扩展的，比如：</p>
<p>$$\sum\limits_{n = 1}^{100} n^2+1 $$</p>
<p>还原成加法运算就变成了：<br>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + … + (100 x 100 + 1)<br>可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。<br>写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p>
<hr>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>官方文档：<a href="http://docs.python.org/3/library/functions.html#abs" target="_blank" rel="external">http://docs.python.org/3/library/functions.html#abs</a><br>也可以在交互式命令行通过help(abs)查看abs函数的帮助信息。</p>
<p>调用函数的时候，如果传入的参数数量不对，会报TypeError的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">abs</span>(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></div><div class="line">TypeError: <span class="built_in">abs</span>() takes exactly one <span class="keyword">argument</span> (<span class="number">2</span> given)</div></pre></td></tr></table></figure></p>
<p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError的错误，并且给出错误信息：str是错误的参数类型：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">abs</span>(<span class="string">'a'</span>)</div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></div><div class="line">TypeError: <span class="keyword">bad</span> operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">'str'</span></div></pre></td></tr></table></figure></p>
<p>而max函数max()可以接收任意多个参数，并返回最大的那个：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; max(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt; max(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">-5</span>)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; bool(<span class="number">1</span>)</div><div class="line">True</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; bool(<span class="string">''</span>)</div><div class="line">False</div></pre></td></tr></table></figure></p>
<p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = abs <span class="comment"># 变量a指向abs函数</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br>我们以自定义一个求绝对值的my_abs函数为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure></p>
<p>请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>
<p>如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。<br>return None可以简写为return。</p>
<p>在Python交互环境中定义函数时，注意Python会出现…的提示。函数定义结束后需要按两次回车重新回到&gt;&gt;&gt;提示符下：</p>
<p>如果你已经把<strong>my_abs()</strong>的函数定义保存为<strong>abstest.py</strong>文件了，那么，可以在该文件的当前目录下启动Python解释器，用<code>from abstest import my_abs</code>来导入my_abs()函数，<strong>注意abstest是文件名（不含.py扩展名）</strong></p>
<hr>
<h3 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用pass语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。<br>pass还可以用在其他语句里，比如：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>缺少了pass，代码运行就会有语法错误。</p>
<hr>
<h3 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h3><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：</p>
<p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试my_abs和内置函数abs的差别：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; my_abs(<span class="string">'A'</span>)</div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">2</span>, in my_abs</div><div class="line">TypeError: unorderable <span class="built_in">type</span><span class="variable">s:</span> str() &gt;= <span class="keyword">int</span>()</div><div class="line">&gt;&gt;&gt; <span class="built_in">abs</span>(<span class="string">'A'</span>)</div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></div><div class="line">TypeError: <span class="keyword">bad</span> operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">'str'</span></div></pre></td></tr></table></figure></p>
<p>当传入了不恰当的参数时，内置函数abs会检查出参数错误，而我们定义的my_abs没有参数检查，会导致if语句出错，出错信息和abs不一样。所以，这个函数定义不够完善。<br>让我们修改一下my_abs的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数isinstance()实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure></p>
<p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; my_abs(<span class="symbol">'A</span>')</div><div class="line">Traceback (most recent call last):</div><div class="line">  <span class="keyword">File</span> <span class="string">"&lt;stdin&gt;"</span>, <span class="literal">line</span> <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  <span class="keyword">File</span> <span class="string">"&lt;stdin&gt;"</span>, <span class="literal">line</span> <span class="number">3</span>, <span class="keyword">in</span> my_abs</div><div class="line">TypeError: bad operand <span class="keyword">type</span></div></pre></td></tr></table></figure></p>
<p>错误和异常处理将在后续讲到。</p>
<hr>
<h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math   [导入math包]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure></p>
<p>import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。<br>然后，我们就可以同时获得返回值：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line">&gt;&gt;&gt; print(x, y)</div><div class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></div><div class="line"></div><div class="line">但其实这只是一种假象，Python函数返回的仍然是单一值：</div><div class="line">&gt;&gt;&gt; r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line">&gt;&gt;&gt; print(r)</div><div class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</div></pre></td></tr></table></figure></p>
<p>原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p>
<hr>
<p><strong>小结</strong><br>定义函数时，需要确定函数名和参数个数；<br>如果有必要，可以先对参数的数据类型做检查；<br>函数体内部可以用return随时返回函数结果；<br>函数执行完毕也没有return语句时，自动return None。<br>函数可以同时返回多个值，但其实就是一个tuple。</p>
<p><strong>练习</strong><br>请定义一个函数quadratic(a, b, c)，接收3个参数，返回一元二次方程：<br>ax2 + bx + c = 0<br>的两个解。<br>提示：计算平方根可以调用math.sqrt()函数：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import math</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; math.sqrt(<span class="number">2</span>)</div><div class="line"><span class="number">1.4142135623730951</span></div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> not ( isinstance(a,(<span class="keyword">int</span>,<span class="keyword">float</span>)) and isinstance(b,(<span class="keyword">int</span>,<span class="keyword">float</span>)) and isinstance(c,(<span class="keyword">int</span>,<span class="keyword">float</span>)) ):</div><div class="line">        raise TypeError('Bad opearand type')</div><div class="line">    <span class="keyword">if</span> a==0:</div><div class="line">        print(<span class="string">"没有输入正确的参数,此方程为一元一次方程."</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    dalta = b**2-4*a*c</div><div class="line">    <span class="keyword">if</span> dalta &lt; 0:</div><div class="line">        print(<span class="string">"没有实数解."</span>)</div><div class="line">    <span class="keyword">if</span> dalta ==0:</div><div class="line">        print(<span class="string">"此方程只有一个解."</span>)</div><div class="line">        <span class="keyword">return</span> ( -b/(2*a) )</div><div class="line">    <span class="keyword">if</span> dalta &gt;0:</div><div class="line">        ans1 = ( -b +dalta**0.5 )/( 2*a )</div><div class="line">        ans2 = ( -b -dalta**0.5 )/( 2*a )</div><div class="line">        <span class="keyword">return</span>(ans1,ans2)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000</a></p>
<hr>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。<br>举个例子，我们来计算阶乘<strong>n! = 1 x 2 x 3 x … x n</strong>，用函数fact(n)表示，可以看出：<br><code>fact(n) = n! = 1 x 2 x 3 x ... x (n-1) x n = (n-1)! x n = fact(n-1) x n</code><br>所以，fact(n)可以表示为<code>n x fact(n-1)</code>，只有n=1时需要特殊处理。<br>于是，fact(n)用递归的方式写出来就是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>如果我们计算fact(5)，可以根据函数定义看到计算过程如下：<br>===&gt; fact(5)<br>===&gt; 5 <em> fact(4)<br>===&gt; 5 </em> (4 <em> fact(3))<br>===&gt; 5 </em> (4 <em> (3 </em> fact(2)))<br>===&gt; 5 <em> (4 </em> (3 <em> (2 </em> fact(1))))<br>===&gt; 5 <em> (4 </em> (3 <em> (2 </em> 1)))<br>===&gt; 5 <em> (4 </em> (3 <em> 2))<br>===&gt; 5 </em> (4 <em> 6)<br>===&gt; 5 </em> 24<br>===&gt; 120</p>
<p>上面的fact(n)函数由于<code>return n * fact(n - 1)</code>引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> fact_iter(n, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_iter</span><span class="params">(num, product)</span>:</span></div><div class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> product</div><div class="line">    <span class="keyword">return</span> fact_iter(num - <span class="number">1</span>, num * product)</div></pre></td></tr></table></figure></p>
<p>可以看到 <code>return fact_iter(num - 1, num * product)</code>仅返回递归函数本身，<strong>num - 1</strong>和<strong>num * product</strong> 在函数调用前就会被计算，不影响函数调用。<br>fact(5)对应的<strong>fact_iter(5, 1)</strong>的调用如下：<br>===&gt; fact_iter(5, 1)<br>===&gt; fact_iter(4, 5)<br>===&gt; fact_iter(3, 20)<br>===&gt; fact_iter(2, 60)<br>===&gt; fact_iter(1, 120)<br>===&gt; 120</p>
<hr>
<p><strong>练习</strong><br>汉诺塔的移动可以用递归函数非常简单地实现。<br>请编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：</p>
<p>要理解递归首先你得理解递归。<br>递归题就是找感觉，要有要把大象装冰箱总共分几步？这样的思维方式，<br>一但去抠细节你就中计了。<br>汉诺塔问题有三根柱子，我给它们分别命名为起始柱src，临时柱tmp，目的柱dst<br>盘子一共分两种情况：<br>1.只有1个盘子<br>这种情况下，直接从起始柱src 移动到 目的柱dst ,完成任务。<br>2.有1个以上的盘子<br>假如有n个盘子在起始柱，</p>
<ol>
<li>首先把第n个盘子上方的n-1个盘子搬到临时柱。</li>
<li>然后把第n个盘子从起始柱移动到目的柱</li>
<li>最后把n-1个盘子从临时柱搬到目的柱 任务完成<br>知道这些就够了，千万别XJB去想细节！！！<br>知道这些就够了，千万别XJB去想细节！！！<br>知道这些就够了，千万别XJB去想细节！！！<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(from,to)</span>:</span> <span class="comment">#将盘子从from移动到to，动画效果需要脑补</span></div><div class="line">    print(<span class="keyword">from</span>,<span class="string">'-&gt;'</span>,to)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span><span class="params">(n,src,tmp,dst)</span>:</span><span class="comment">#将n个盘子从src搬到dst</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="comment">#只有一个盘子的情况</span></div><div class="line">        move(src,dst)</div><div class="line">    <span class="keyword">else</span>: <span class="comment">#有一个以上盘子的情况</span></div><div class="line">        hanoi(n<span class="number">-1</span>,src,dst,tmp) <span class="comment">#将上方的n-1个盘子从src搬到tmp</span></div><div class="line">        move(src,dst) <span class="comment">#将第n个盘子从src轻松愉快地移动到dst</span></div><div class="line">        hanoi(n<span class="number">-1</span>,tmp,src,dst) <span class="comment">#擦屁股，将tmp上的n-1个盘子搬到dst上</span></div><div class="line"></div><div class="line">hanoi(<span class="number">3</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756919644a792ee4ead724ef7afab3f7f771b04f5000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756919644a792ee4ead724ef7afab3f7f771b04f5000</a></p>
<hr>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;学习廖雪峰老师的博客整理的一些笔记，目前还很凌乱，很惭愧，还没有
    
    </summary>
    
      <category term="Python" scheme="https://www.leolan.top/categories/Python/"/>
    
    
      <category term="Python入门" scheme="https://www.leolan.top/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux 硬件篇</title>
    <link href="https://www.leolan.top/posts/37486/"/>
    <id>https://www.leolan.top/posts/37486/</id>
    <published>2016-12-12T09:10:36.000Z</published>
    <updated>2017-02-27T08:47:33.064Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h1><p>学习鸟哥Linux，积累的一点点知识</p>
<h2 id="内核捕捉到得网卡信息："><a href="#内核捕捉到得网卡信息：" class="headerlink" title="内核捕捉到得网卡信息："></a>内核捕捉到得网卡信息：</h2><p>确认内核捕捉到了网卡 ：<code>dmesg |grep -in eth</code><br>其他设备方法差不多。 </p>
<h2 id="查询设备芯片：-lspci"><a href="#查询设备芯片：-lspci" class="headerlink" title="查询设备芯片： lspci"></a>查询设备芯片： <code>lspci</code></h2><p>查看内核是否顺利加载：<code>lsmod | grep &quot;对应模块号，比如e1000&quot;</code><br>模块的相关信息可以用：<code>modinfo &quot;对应模块号，比如e1000&quot;</code>查看。 </p>
<p>由于用的是阿里云服务器，虚拟的网卡，查不到具体模块号，图就不上了</p>
<p>如果网卡没有被捕捉到，但系统是支持的，在/etc/modprobe.d/下建立ether.conf文件：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">vim</span> /<span class="selector-tag">etc</span>/<span class="selector-tag">modprobe</span><span class="selector-class">.d</span>/<span class="selector-tag">ether</span><span class="selector-class">.conf</span></div><div class="line">修改文件：</div><div class="line"><span class="selector-tag">alias</span>(网卡名) <span class="selector-tag">eth0</span> <span class="selector-tag">e1000</span>(模块号)</div><div class="line"><span class="selector-tag">alias</span>(网卡名) <span class="selector-tag">eth1</span> <span class="selector-tag">e1000</span>(模块号)</div><div class="line"></div><div class="line"><span class="selector-tag">sync</span>; <span class="selector-tag">reboot</span></div></pre></td></tr></table></figure></p>
<p>重启后<strong>ifconfig</strong>查看相关信息。</p>
<hr>
<h2 id="网络参数与配置文件对应关系"><a href="#网络参数与配置文件对应关系" class="headerlink" title="网络参数与配置文件对应关系"></a>网络参数与配置文件对应关系</h2><table>
<thead>
<tr>
<th>网络参数</th>
<th>主要配置文件</th>
<th>重要参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>IP Netmask<br>DHCP<br>Gateway等</td>
<td>/etc/sysconfig/network-scripts/ifcfg-eth0</td>
<td>DEVICE=网卡名<br>BOOTPROTO=是否dhcp<br>HWADDR=IP地址<br>NETMASK=子网掩码<br>ONBOOT=是否默认启动此接口<br>GATEWAY=网关<br>NM_CONTROLLED=额外网管软件(不建议使用)</td>
</tr>
<tr>
<td>主机名</td>
<td>/etc/sysconfig/network</td>
<td>NETWORKING=是否使用网络<br>NETWORKING_IPV6=是否支持ipv6<br>HOSTNAME=主机名</td>
</tr>
<tr>
<td>DNS IP</td>
<td>/etc/resolv.conf</td>
<td>Name Server DNS的IP地址</td>
</tr>
<tr>
<td>私有(公网)IP对应的主机名</td>
<td>/etc/hosts</td>
<td>私有主机名 别名</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="etc-services"><a href="#etc-services" class="headerlink" title="/etc/services"></a>/etc/services</h2><p><strong>/etc/services</strong>此文件记录了构建在TCP/IP上面的各种协议，包括HTTP、FTP、Telnet等，以及服务器所定义的端口，定义新端口也要修改此文件。</p>
<h2 id="重启整个网络："><a href="#重启整个网络：" class="headerlink" title="重启整个网络："></a>重启整个网络：</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/network <span class="built_in">restart</span> (或service network <span class="built_in">restart</span>)(centos7以下) </div><div class="line">systemctl <span class="built_in">restart</span> network(centos7以上) </div><div class="line">开启关闭某个网络接口： </div><div class="line">ifup eth0 （ifdown eth0）(centos7以下)</div></pre></td></tr></table></figure>
<hr>
<h1 id="IP及子网划分"><a href="#IP及子网划分" class="headerlink" title="IP及子网划分"></a>IP及子网划分</h1><p>把这部分归为硬件篇是因为比较少去使用，也没有单独开一篇网络。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/172545770.png" alt=""><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/172609407.png" alt=""><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/172627309.png" alt=""></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;网卡&quot;&gt;&lt;a href=&quot;#网卡&quot; class=&quot;headerl
    
    </summary>
    
      <category term="系统管理" scheme="https://www.leolan.top/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Linux 硬件篇" scheme="https://www.leolan.top/tags/Linux-%E7%A1%AC%E4%BB%B6%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>创业手册</title>
    <link href="https://www.leolan.top/posts/6179/"/>
    <id>https://www.leolan.top/posts/6179/</id>
    <published>2016-12-08T06:46:20.000Z</published>
    <updated>2017-02-27T08:47:33.053Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>我们花了很多时间在为创业团队提供建议。尽管一对一的建议会一直很重要，但是我们认为对广泛建议进行提炼，并提供给 YC 和 YC 旗下公司会有助于 YC 的成长。所以我们觉得我们需要把这些都公开给大家。</p>
<p>本剧本适合且只适合刚来到创业世界的人阅读。本剧本大部分内容对于已阅读过我们的合伙人所写的东西的人来说已不新鲜 — 本剧本的目的就是将内容做成合集。关于如何规模化一家创业公司的说明或许会有第二部分 — 但本剧本已基本覆盖了创业起步的部分。</p>
<p>作为一家创业公司，你的目标就是做一些用户喜欢的东西。如果你要做的话，接下来你还需要考虑如何得到更多用户。但是这第一部分是非常关键的 — 思考下今天非常成功的公司吧。他们都开始于一个非常受用户欢迎且用户自愿为其宣传的产品。如果你在这个部分失败了，你就永远失败了。如果你欺骗你自己，认为你的用户喜欢你的产品但实际上他们不喜欢，你仍然会失败。</p>
<p>创业公司坟墓里充斥着这类自认为他们可以跳过此步的人。</p>
<p>打造一个受一小群用户热爱的产品会比打造一个受很多用户喜欢（请注意”喜欢”与”热爱”的区别）的产品更好。尽管”一小群热爱”和”一大群喜欢”看起来的积极感觉一样多，但比起后者需要将用户从”喜欢”转化为”热爱”，前者获取更多用户会很简单。</p>
<p>如果要用一个词汇来警告一个准备创业的人：（你的产品）弱爆了！我们从 YC 创业者中收集到的最一致的一条反馈是，创业是他们无法想象的难，因为他们没有一个针对此工作和启动强度的框架。加入一家正在火箭飞船轨道上高速发展的创业公司是更为明智的选择。</p>
<p>在另一方面，实际上创建一个创业公司并不会对你的职业生涯产生很多威胁 — 如果你非常善于技术的话，失败了还会找到工作。大部分人非常不善于评估风险。我个人认为更为危险的是你有一个自己非常热衷的想法和产品，但你仍然待在一个安全，舒适，不过瘾的工作岗位上。</p>
<p>为了创业成功，你需要有：一个好想法（包括一个好市场），一个好团队，一个好产品，和强大的执行。</p>
<hr>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>在 YC ，我们首先会问创业团队他们正在打造的产品以及其理由。对于这个问题我们期待清晰且简洁的答案。这将作为对创始人及其想法的评估。作为一个创始人，能够清晰地思考并交流是很重要的 — 对于招聘，融资，销售，等其他。想法在广义上需要可以清楚地表达并传播，复杂的想法常常是其混乱思维和虚构问题的表现。如果一个想法没能让第一次听到的人感到兴奋，这并不好。</p>
<p><strong>我们问的另外一个问题是：谁迫切需要他们的产品。</strong></p>
<p>最理想的情况是，你自己也是目标用户。其次的理想情况是，你对目标用户非常了解。</p>
<p>如果一个公司已经有用户了，我们会问其用户数量及其增长速度。我们会分析该产品为什么没有增长得更快，我们会着重搞清楚其用户是否真正热爱其产品。很多情况下是他们告诉他们的朋友去用这个产品，而不是公司推动其增长。我们还会问其公司是否已开始盈利，如果不，为什么？</p>
<p>如果该公司还没有用户，我们会考虑搭建最小化的产品以便测试该想法—比如，如果我们从最佳用户体验的反方向入手，我们会先去做内核部分。</p>
<p>对想法进行测试的办法无非是先启动它并去看结果是什么，或者去贩卖它（比如：在你开始写代码前去获得一份用户意向书。）前者对了解用户想法更好（用户或许会告诉你他们将使用你的产品，但实际上并没有），后者对面向企业的想法更佳（如果一个公司告诉你他们会使用你的产品，那就去做吧。）特别的，如果你是一家面向企业的公司，我们会问你首要的问题就是，你有没有一个用户会买你正在打造的产品的意向或信息。对于大多数生物科技和硬件科技公司，他们检测想法的办法是先和潜在用户聊聊并试图找出可以做出第一代产品的最小集合。</p>
<p>让你的想法和你从用户得到的反馈一起成长是很重要的。你需要非常了解你的用户—这对于你评估一个想法，打造一个产品，和创办一个好公司至关重要。</p>
<p>正如前面提到的，创业是非常难的。它需要很长时间，及持续的异常的努力。创始人及其员工需要有共同的使命感去维系它。所以我们会问创始人为什么他要创办这个特别的公司。.</p>
<p>我们还会问该公司什么时候会形成垄断。关于这个问题有很多描述，但我们使用了 Peter Thiel 的词汇。显然，我们不希望你的公司通过不道德的手段攻击竞争对手。相反，我们会寻找那些在规模化更有力且难以被复制的公司。</p>
<p>最后，我们询问市场。市场今天有多大，市场增长得多快，以及为什么这个市场会在十年内具有大规模。我们试图搞清楚为什么这个市场在快速发展，以及为什么这是一个适合创业公司发展的市场。我们喜欢那种当主流技术正在发生变化但大部分人未察觉到的 — 大公司不擅长此道。还有一个与直觉相反的最佳答案是去切一个小蛋糕的大部分（而不是一个大蛋糕的小部分）。</p>
<p><strong>与想法有关的其他思考：</strong></p>
<p>比起一些衍生产品我们更喜欢新东西。很多大公司都开始于一些全新的东西（一个广被接受的关于”全新”的定义是 10 倍的好。）如果已经有 10 家其他公司在同一时间做同样的事情，这听起来像已存在的东西，我们对此怀疑态度。</p>
<p>一个违反直觉的原因是，做一些新东西比做衍生且简单的产品是更容易的。而且如果你是前者的话人们会帮助你；如果你是后者，他们不会帮助你。</p>
<p>好想法都是听起来很糟糕但实际上不错的。所以你不需要对你的想法过于保密 — 如果这确实是一个好想法，那它听起来不会像值得剽窃的想法。如果它听起来很值得剽窃，有好想法的人比将其执行并成立公司去实践的人多 1000 倍。如果你告诉别人你在做什么，人们或许会帮助你。</p>
<p>谈到告诉别人你的想法 — 尽管当人们第一次听到它时感到兴奋是很重要的，很大一部分人会说你的想法太烂了。或许他们是正确的，或许他们不擅长评估创业公司，又或者他们仅仅是嫉妒。不管原因如何，这种情况会时常发生，他会很伤害，或者尽管你认为自己不会受其影响，你仍然会。此时你越保持自信并不被其他人影响，你就越会保持好状态。不管你取得了多大的成功，喷子永远不会走开。</p>
<p>如果你没有想法但是想成立一个创业公司呢？你最好别。有了好想法后再通过创业公司让其传播到世界才是上策。</p>
<p>我们曾经尝试过一个实验，资助一些没有想法的初创团队，在一个他们在得到资助后着陆在一个有前途的想法上。</p>
<p>他们都失败了。我认为其一部分原因就是好的创始人倾向于有很多好想法（经常是过多了）。但你有一家创业公司后面临的更大的一个问题是，你需要赶快想出一个好想法，因为这已经是一家正式公司了，你的想法不能太疯狂。你最终获得一个貌似有理的但走歪的想法。这就是核心威胁。</p>
<p>因此，最好不要过于积极地强迫自己想出创业点子。相反，学习很多不同的东西。练习发现问题，那些似乎效率不高的事情，和重大技术转变。为你觉得有趣的项目工作。走出自己的方式去和聪明，有趣的人打交道。在某些时候，想法就出现了。</p>
<hr>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="一个好团队"><a href="#一个好团队" class="headerlink" title="一个好团队"></a>一个好团队</h2><p>平庸的团队建不成伟大的公司。我们看创始人最重要的一个事情就是其实力。当我做后期投资时，我同样看重创始人的雇员的实力。</p>
<p>什么让一个创始人伟大？最重要的特质就是永不止步，决心，坚韧性和智慧。智力与激情也是很重要的。这些特质都比经验和 “擅长 X 语言和 Y 框架” 更为重要。</p>
<p>我们发现最成功的创始人都是一些具有低应力处理事务的人，因为你会感觉到”不管这件事是什么，他 / 她将做成这件事。”有时你可以通过意志的纯粹力量取得成功。</p>
<p>好的创始人有一些看似矛盾的特质。一个重要的例子就是刚性和柔性。当创业涉及到几乎一切事情时，你需要保持对公司和它的使命的核心强烈信念，并依然非常灵活且愿意学习新的东西。</p>
<p>最好的创始人都异常敏捷。这是果断，专注，力度，并把事情做好的能力的一个指标。</p>
<p>不善言谈的创始人都很糟糕。沟通是一项创始人必备的技能 — 实际上，我认为这是最重要的且常被忽视的创始人技能。</p>
<p>科技创业公司必须至少有一个创办人可以建立公司的产品或服务，以及至少一个创始人（或可以成为）擅长销售和与用户沟通。这可以是同一个人。</p>
<p>当你在选择合伙人时请考虑这些标准 — 这将会是你做过最重要的决定，而且这一步经常会被做得很随意。你需要一个你非常了解的人，而不是你在合伙人聚会中刚遇到的一个人。你可以通过更多信息来评估你的合伙人，你不能走错这一步。同时，在某些时候，创业公司的期望值可能处于 X 坐标轴的下方。此时如果你和你的联合创始人预先存在联系，你们不能甩掉一个人并保持前行。联合创始人的关系破裂是一个早期创业团队死亡的最大原因，我们会常常看到联合创始人们抱着共同目的去成立一家创业公司。</p>
<p>目前为止最好的情况是，找一个好的联合创始人。其次的最佳做法是成为一个独立的创业者。目前最坏的情况是，找一个不好的联合创始人。如果事情没搞头了，你应该迅速分道扬镳。</p>
<p>一个关于净资产的简报：随着时间的推移，关于股权分配的话题并没有变简单 — 所以早点把它做好吧。平分是最好的选择，为了防止当两个创始人分离时造成死锁，有一个人多拿一份股权也是不错的选择。</p>
<hr>
<h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><h2 id="一个好产品"><a href="#一个好产品" class="headerlink" title="一个好产品"></a>一个好产品</h2><p>有一个好产品，这就是通往成功的秘密。这是所有伟大的公司仅有的唯一共同点。</p>
<p>如果你不去做一个你的用户会喜欢的东西你最终会失败。尽管创始人都去寻找其他技巧。但创业是你人生中唯一不需要寻找技巧的事情。</p>
<p>一个好产品是保持长期增长的唯一方法。最终你的公司会变很大以至于所有的增长黑技巧（Growth Hack）都不起作用，你需要借助那些期望用你的产品的用户来保持增长。这是关于超级成功的公司最重要的事情。别无他法。想一下所有非常成功的技术公司—他们都在做这件事。</p>
<p>你需要在你的公司里建立一个“产品改进引擎”。你应该和你的用户交谈，并观看他们使用你的产品，找出哪些部分是分杆，然后把你的产品做更好。然后再重复做一遍。这个周期应该是该公司的头号重点，它应该推动一切。如果你每周都能提高你的产品 5%，它就真的会复合。</p>
<p>这个周期的重复速率越快，公司通常就越好。在 YC，我们告诉创业者应除了吃，睡，运动，并花时间与他们的亲人外，要专注建立产品与用户交流。</p>
<p>要把这个周期做好，你还需与你的用户更进一步接触。甚至是观察用户使用你的产品。如果可以的话，请坐到他们的办公室。衡量他对你说的和他实际上在做的。你不应该在你和用户之间加入中间人，这个状态保持越久越好 — 这意味着创始人需要做销售，客服，等等。</p>
<p>尽全力搞懂你的用户。真正弄清楚他们需要什么，在哪里找到他们，以及他们在哪里感到不满。</p>
<p>“从小事做起（Do things that don’t scale）” 显然已成为了创业团队的口头禅。 通常你需要在一定时间招募种子用户（Ben Silbermann 过去常在咖啡馆邀请陌生人使用 Pinterest）然后打造一款他们需要的产品。很多创始人讨厌 这一步，然后仅仅想在媒体宣传其产品。但那常常不会成功。人工招募用户，然后去做一款你的种子用户会告诉他们朋友的好产品吧。</p>
<p>你还需要把东西分成小片，一边走一边重复和适应。不要尝试做很长期的计划，特别不要把成批的东西做一次公开发行。你需要从简单处着手 — 其表面积越小越好 — 然后将其更快地打造出来。实际上，简单永远是好的，你需要保持你的产品和公司尽可能简单。</p>
<p>我们都会问创业团队一些相同问题：用户使用你的产品超过一次了吗？你的用户对你的产品狂热吗？你的用户会在你的公司消失后变得很沮丧吗？你的用户会在不是你要求的情况下向别人推荐你的产品吗？如果你是 B2B 的公司，你有至少 10 家付费用户吗？</p>
<p>如果没有，那这就是潜在的问题，然后我们会告诉该公司把产品做的更好。对于一家公司为何没在成长的原因我都持怀疑态度 — 因为大多数情况下真正的原因是他们的产品还不够好。</p>
<p>但如果初创团队不清楚他们接下来要对其产品干什么，或者他们的产品就是不够好，我们就派他们去找用户谈谈。虽然这也不是每次都会有效 — 人们会问福特寻求更快的马 — 但这种办法会常常惊人的有效。事实上，更普遍的是，在公司内有任何分歧时，请和你的用户谈谈。</p>
<p>最好的创始人都很关心产品质量，甚至是看似无关紧要的细节。但这看来是有效的办法。同时，“产品” 应包括所有与该公司的用户的交互。你需要提供优秀的支持，好的销售互动等。</p>
<p>请记住，如果你没有做出好产品，什么东西都救不了你。</p>
<hr>
<h1 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h1><h2 id="好的执行"><a href="#好的执行" class="headerlink" title="好的执行"></a>好的执行</h2><p>尽管打造一款好产品是重要的，但这还不够。你还需要将其转变成一个好公司，你必须亲自去做 — 雇佣一个“经验丰富的经理”去帮你招聘这种很常见的行为是失败创业公司的墓地。在创业中很长一段时间内，你不能把招聘这个职位外包出去。</p>
<p>你还需要盈利，这听起来很明显。这时候你该考虑如何盈利了。</p>
<p>CEO 的唯一职位描述就是保证公司成功。作为 CEO 即使你有很多不足，你仍可以雇佣那些弥补你的不足的人才来让他们来把事情做好。有经验的 CEO 与一个理想的工商管理硕士可能会有技能的差距，但他/她也是不会理解用户，不会有和你相同的产品嗅觉，也并不会太在意产品。</p>
<h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>增长和动力是伟大执行的关键。（只要不是 “以 90 美分的价格出售 1 美元”的）增长就解决了所有的问题，而缺乏增长的问题除了增长这个办法外无解的。如果你在增长，就会感觉到你在成功，大家都很高兴。如果你在增长，每个时间段都会有新的角色和责任，大家会觉得自己的事业正在进步。如果你不在增长，这感觉就像你失败了，大家不快乐并且离开。如果你不在增长，大家就只会推卸责任和抱怨了。</p>
<p>创业公司没有动力的话，创始人和雇员都会焦灼起来，很难形容的沮丧。</p>
<p>好的执行的首要方针就是“永不失去动力”。但是你该如何做到呢？</p>
<p>最重要的办法就是让它成为你的首要任务。公司会按 CEO 去执行。为公司优化找到一个指标是很具价值的，也值得花时间去找到正确的增长指标。如果你关注增长，然后设定一个目标，公司其他人都会专注于该目标。</p>
<p><strong>以下是一些例子</strong>。</p>
<p>Airbnb 的创办者构建了一个他们想达到的前瞻性图谱。他们把这个图谱挂到了所有地方 — 在他们的冰箱上，桌子上，卫生间镜子上。如果他们这周达到了目标，那很好，如果没有，他们就会一直对此进行研究。</p>
<p>Mark Zuckerberg 曾说道 Facebook 最重要的革新就是在增长缓慢时设立了一个增长团队。在其公司这一团队是（也许仍然是）一个最负盛名的团体—每个人都知道它是多么重要。</p>
<p>对增长不利的东西要记录下来。以公司的角度去讨论你如何可以增长得更快。如果你知道局限是什么，你自然需要思考如何解决它。</p>
<p>对于你准备去做的任何一件事，请问自己“这是优化增长的最佳做法吗？”比如，去参加一个会议并不是优化增长的最佳做法，除非你期望去那里销售你的产品。</p>
<p>透明公开的内部指标报表（包括财务状况）是一个很好的事情。因为某些原因，创始人总是很害怕这一点。但它是好的，可以让整个公司专注于增长。专注于指标的员工和他们目前做到的状况有直接联系。如果你隐藏了这些标准，人们很难集中在他们身上。</p>
<p>关于指标，请勿欺骗自己设定虚高的指标。这里常见的问题就是专注于注册量而忽视了留存。而对于增长，留存是和获取新用户同样重要的。</p>
<p>建立一个内部节奏去保持动力也是很重要的。你的增长过程需要一个“律动” — 新功能，客户，新员工，盈利里程碑，合作伙伴，等等其他需要内部和外部去发布的。</p>
<p>你应该设定富有野心的但大体可以实现的指标，并每个月审查进度。庆祝成功吧！保持将策略告诉内部人员，告诉每个员工你从客户那里听到的东西，等等。你在内部越分享更多 — 包括好消息和坏消息 — 你的公司就会越好。</p>
<p>这里有几个创始人经常陷入的陷阱。其中一个就是如果公司疯狂成长但一切都看起来难以置信的破败和低效率，大家都担心其破碎。在实践中，这似乎很少发生（我可以指出 Friendster 是一个最近因为技术债务而死亡的创业公司。）相反，如果你增长很快但其他事情没有优化，这其实是很好的事情 — 你需要做的就是解决它以得到更快的增长！我最喜欢投资那些增长很快但未做优化的公司 — 他们都被严重低估了。</p>
<p>另一个相关的陷阱就是有关长期问题—比如“我们在规模大后该怎么办？”答案就是等你先把规模做大后再考虑这个问题吧。很多创业公司在考虑这个问题时死掉了，因为他们没有想通。一个好经验就是只考虑比目前 10 倍规模大的情况。大多数早期创业团队都应该把“从小事做起”贴到他们的墙上并执行它。比如，好的创业公司常常在早期做很好的客户服务，不好的公司则担心这些小钱不够多（而不做）。但是好的客户服务会让种子用户充满惊喜，随着产品越来越好你需要减少客服工作，因为你已经知道客户纠结的东西并对此提高了产品/体验。（顺便强调下，这是个很好的例子 —去做好客服工作）</p>
<p>关于 “从小事做起” 这里有个很大的误区 — 这不应该成为你最终不去盈利的借口。在早期有差点的单元经济是允许的，但你在后期如果还没做好盈利的话，你最好去找个好点的理由吧。</p>
<p>另外一个陷阱是在增长绝对数值变坏时（尽管在比例上看起来还好）变得沮丧。对于指数增长，人类的直觉很不擅长。请提醒你的团队，所有的大公司都增长自一个小团队。</p>
<p>一些最大的陷阱是创始人相信会带来增长，但在实践中长时间几乎从不。常见的例子是处理其他公司和“大型新闻发布会”。小心这些，并了解他们实际上从未有效。相反，所有的大公司都通过 — 打造一个用户喜爱的产品，在起初亲自招募用户，然后测试大量的增长策略（广告，引荐计划，销售和营销等），并做更多的工作。问你的客户在哪里找到更多的类似你的用户的人。</p>
<p>请记住销售和市场营销不是差的词汇。尽管如果你没有一个伟大的产品，他们也不会拯救你，但他们可以帮助加速增长。如果你是一个面向企业的公司，那这是你的公司必备的。</p>
<p>特别是不要害怕去销售。创始人中至少要有一个擅长邀请人们使用你的产品并付费的人。</p>
<p>Alex Schultz 有一个关于消费产品增长的很值得观看的讲座。 对于 B2B 产品，我认为正确的答案就是一直跟踪每月的收入增长，并记住更长的销售周期意味着前几个月的数据不会好看的（虽然有时向创业公司销售，使其作为种子用户可以解决这个问题）。</p>
<hr>
<h2 id="专注-amp-强度"><a href="#专注-amp-强度" class="headerlink" title="专注 &amp; 强度"></a>专注 &amp; 强度</h2><p>如果我必须把我的建议提炼成两个词，我会挑专注和力度。这些词汇似乎真的匹配于我所认识的最优秀的创始人。</p>
<p>他们不屈地专注于他们的产品和增长。事实上，他们不想做其他任何事情，他们说很多“不”（这是很难的，因为存在很多刚开始创业的人喜欢做新的事情。）</p>
<p>一个通用规则是，在你控制好了第一件事之前不要让你的公司开始做下一件事。我认识的好公司没有同时开始做很多事的，他们要确认才去做，并一直做好。你可以做的事情比你想象的要少得多。一个非常常见的创业公司死亡的原因是做太多错误的事情。优先次序是关键且困难的。（同样重要的是要确定公司的优先顺序是设置你自己的战术优先级。我发现最适合我的是一张笔记的清单，每天少于 3 个的主要任务和少于 30 个的小任务，还有一张年度的总体目标的工作清单。）</p>
<p>虽然伟大的创始人不做很多大的项目，他们要做就做到极致。他们把事情做得很快。这是是决定性的，但你有一家创业公司时这是很难的 — 你会得到很多矛盾的意见，这都是因为做一件事有多种方式，且因为存在很多不好的建议。好的创始人听取所有的建议，然后迅速作出自己的决定。 .</p>
<p>请注意，这并不意味着做任何事情都要做到极致—这是很重要的一点。你必须选择去做正确的事情。Paul Buchheit 说过，要去找到用 10% 的努力得到 90% 价值的方法。市场不在乎你工作如何努力 — 只在乎你是否做了正确的事情。</p>
<p>同时专注于产品质量和快速行动很难。但能做到这些就是好的创始人。</p>
<p>我从未见过一个行动缓慢的创始人真正成功过。你和其他创业公司都一样。你也需要保持专注和快速行动。那些建造火箭和核反应堆的公司都致力于此。所有失败的公司都有个糟糕的理由解释其为何不一样且不需要快速行动。</p>
<p>但你发现某件事有效时，保持前行。不要被其他事情分心。不要关闭脚下的喷气机。</p>
<p>不要沉沦于早期的成功，你还没有一个很有前途的开始，如通过大量的网络事件，并在大量的网站上发言。初步成功的创业者们面临一个选择：要么一直在做他们正在做的事情，要么他们开始花很多时间考虑自己的 “个人品牌” 和享受成为创始人的状态。</p>
<p>拒绝会议和新闻发布会是很难的 — 他们感觉良好，在你的空间看到其他创始人受关注也是令人不爽的。但这不会持续很长时间。最终，新闻界人士会看出谁是胜者，如果你的公司是真正成功的话，你会得到你想不到的更多关注。极端的情况是，早期创始人带着自己的公关团队 — 他们认为在电视上看的在现实中也是一样的，然后他们大部分都失败了。</p>
<p>专注和强度在长跑中会赢得胜利。（Charlie Rose 曾说过结合专注和个人联系就能把事情做成，这句话一直伴随着我。）</p>
<hr>
<h2 id="CEO的工作"><a href="#CEO的工作" class="headerlink" title="CEO的工作"></a>CEO的工作</h2><p>我之前提到的 CEO 的唯一普遍的工作描述是确保公司成功。虽然这是真的，我还想谈一点特别是关于 CEO 应如何花他/她的时间。</p>
<p><strong>一个 CEO 需要:</strong><br>1）设定公司的愿景和战略，<br>2）向公司的每一个人布道，<br>3）招募和管理团队，尤其是在你自己不擅长的领域里，<br>4）筹集资金，确保公司不缺钱，<br>5）设置执行质量标准，</p>
<p>除此之外，找到你最喜爱的部分，并坚持在那里。</p>
<p>正如我在开始时提到的，这是一个强度很高的工作。如果你成功了，它会把你的生活带到一个你想象不到的程度，这个公司会一直在你的脑海里。极致的专注和极高的强度意味着它不是平衡工作和生活的最佳选择。你还可以有一个很大的选择 — 你的家人，参加很多的比赛，等等 — 或另一个并没有那么丰富的生活。还有很多选择只有你自己可以做出决定，你会一直在做选择，不论你在委派方面做得多好。</p>
<p>你的目标应该是超级响应你的团队和世界，要很清楚地知道战略和事件优先级别，出席一切重要的事情，并快速执行（特别是当其阻止到其他选择时。）你也应该采取一种“不惜一切代价”的态度 — 仍会有讨厌的笨蛋。如果团队看到你在做这些事情，他们也会这样做。</p>
<p>管理自己的心理是非常困难且重要的。这一点已经成为老生常谈，但它是正确的—情感的高点和低点都是非常激烈的，如果你不知道如何在其中保持一定水平，你就会纠结。当 CEO 是孤独的。重要的是在一切都融化时，可以与其他 CEO 打电话（YC 的一个重要的意外发明是有一个让创始人找同伴的方式。）</p>
<p>一个成功的创业需要很长的时间，当然比大多数创业者在一开始设想的要长得多。你不能把它当作一个通宵。你必须吃好，睡好，并锻炼身体。你得花时间和你的家人和朋友在一起。你还需要在一个你真正充满激情的领域工作，除了这些，没有其他东西能够长期支持你。</p>
<p>所有的一切都会感觉破碎，多样和规模不一的灾难会让你惊讶。你的工作是用你的微笑来解决他们，让你的团队放心，一切都会好的。通常事情并不像他们看起来那么坏，但有时他们实际上是真的坏了。在任何情况下，只要继续走，不断成长。</p>
<p>CEO 不找借口。很多不好和不公正的事情会发生。但是不要去说，当然更不要对团队说，“如果我们有更多的钱的话” 或 “如果我们有另一个工程师的话”。要么找出一个使这发生的方法，要么找出没有它的方法。那些让自己制造很多借口的人和创业公司的 CEO 们几乎总是失败。让自己在不公正中感到 1 分钟的不安即可，然后要清楚，想出一个解决办法这取决于你。努力做到让人们在谈论你时说：“ X 总是能把事情搞定” 。</p>
<p>非初次创业的创业者知道他/她们在做什么。在你位置联系他们，并寻求帮助，你会变更好。如何成为一个好的领导者和管理者是值得投资去学习的。做这件事的最好方法是找一个导师 — 读书似乎不那么有效。</p>
<p>在 YC 我们数量惊人的建议就是 “去问他们” 或 “想做就做吧” 。初次创业者都认为在你需要寻求某人一件事或想做一件新的事情时有秘诀。但我需要重复下，创业时，所有的秘诀都不生效了。你仅需保持直接，自愿去请求就好，但不要成为一个讨厌鬼。.</p>
<p>扭曲他人的现实但不是你自己的现实也是很重要的。你需要说服别人你的公司是注定成为这个年代最重要的创业公司，但你还需要对任何可能出错的事情保持怀疑。</p>
<p>持久。大多数创始人放弃得太快了或转移到下一个产品太快了。如果事情进展得不好，找出问题的根源是什么，确保你得到答案。作为一个成功创业公司 CEO 的一个巨大的特质就是是不放弃（虽然你不想固执于其他原因，这是另一个明显的矛盾，和一个要作出的艰难的判断。）</p>
<p>乐观。虽然在世界某处可能有一个伟大且悲观的 CEO ，但我还没有见过他/她。相信未来会更好，公司将更好地在未来发挥重要的作用，这些对 CEO 和其他被影响的公司是重要的。这在理论上很容易，在短期的现实挑战中缺很难。不要忽视了长期的愿景，并相信每天的挑战将被遗忘，取而代之的是一年一年的进步。</p>
<p>你的工作中定义任务和定义指标是最重要的。这可能有点奇怪，但它是值得早点去做的。无论你在什么时候开始还是在几年之后，随着你的成长，每一个新人都需要先植入公司的使命和价值然后再传播给他人。因此尽早写下你的价值观和使命。</p>
<p>另一个我认为值得重复的陈词滥调是：建立一个公司有点像建立一种宗教。如果人们不把他们的日常生活和他们所关心的更高的目标联系起来，他们就不会做好工作。我认为在 YC 中 Airbnb 在这方面做得最好，我强烈推荐看看他们的文化价值观。</p>
<p>一个 CEO 常见的错误就是致力于商业常见领域而不是在新产品和新方案上。比如，很多创始人认为他们需要在 人力资源，市场，财务，融资，公关等其他事情上寻找新方法。这常常是不好的。在已有事务中工作，把你的创造力用在你正在打造的产品和服务上。</p>
<hr>
<h2 id="招聘-amp-管理"><a href="#招聘-amp-管理" class="headerlink" title="招聘 &amp; 管理"></a>招聘 &amp; 管理</h2><p>招聘是你最重要的工作也是你打造一个成功公司的关键（和打造一个好产品相对。）</p>
<p>我的第一条建议是不要做它。我们在 YC 最成功的公司都是等了比较长的时间后才开始招聘的。员工很贵。员工增加组织的复杂性和沟通开销。你有可以和联合创始人讲但不能和同一间房的员工讲的话。员工也增加了惯性，团队成员越多，在改变方向时难度越（指数级别的）高。抵制从你的雇员人数中获得自我价值的冲动。</p>
<p>最好的人才都有很多机会。他们希望加入一家火箭般的公司。如果你什么都没有，招募他们是很难的。一旦你明显成功了，他们都会来加入你。</p>
<p>值得重复提的是，好人才都有很多选择，你需要好人才来建立一个伟大的公司。要具有很大的公平、信任和责任心。愿意去寻求你认为你不可能得到的人。请记住，你想雇用的人要是那种如果他们想，就可以开始他们自己的公司的人。</p>
<p>当你在招聘模式（即，当你把产品-市场形态为 T-infinity），你应该花你的 25% 的时间在招聘上。至少有一个创始人，通常是 CEO 需要擅长招聘。这是大多数 CEO 的首要任务。每个人都说，CEO 们应该在招聘上花很多时间，但在实践中，只有最好的 CEO 才去做。这里或许有些蹊跷。</p>
<p>不要对你雇佣的人的品质做出妥协。每个人都知道这一点，然而，每个人都会在某些时候对这一点做出绝望的让步。每个人都会后悔，有时甚至会把公司杀死。好的和坏的人都有传染性的，如果你开始与平庸的人，平均值常常不会提高。公司开始与平庸的早期员工几乎从未恢复。相信你的直觉。如果你有疑问，那么答案是否定的。</p>
<p>不要雇佣长期消极的人。他们不适合早期的创业公司 — 世界其他的人每天都会预测你的死亡，公司需要在其内部团结起来，从信念到矛盾。</p>
<p>在任何角色中用态度而不是经验去评估。寻找原认知和把事情搞定的记录。寻找那些你喜欢的人才 — 你需要花费很多时间并陷入紧张的情况。对于你已经认识的人，在他们全职加入前先尝试在一个项目中共同工作。</p>
<p>投资成为一个好管理者，这对于大多数创业者是很难的，它绝对是违反直觉的，但做得这点很重要。找到可以帮助你的导师，如果你不擅长这一点，你会迅速失去员工，如果你不挽留员工，即使你成为世界上最好的招聘官也不重要了。作为一个好管理者的大部分原则都被很好说明过了，但我从来没有讨论的问题是“不要进入英雄模式”。大多数的初次管理者都会在某个时候把变成这种模式受害者，并试着自己做所有的事情，并成为他们的工作人员触不可及的。它通常结束于一次崩溃。请抵制一切切换到这种模式的诱惑，并愿意在项目后期有一个运作良好的团队。</p>
<p>说到管理，争取做到把每个人都弄到同一间办公室。由于某些原因，初创公司总是妥协于此。但几乎所有的最成功的初创公司开始于聚集在一起。我认为远程工作对大公司来说是很好的，但它并不是一个创业公司大范围成功的秘诀。</p>
<p>最后，辞退要快。每个人都知道这个原则，但没有人去做。但我觉得我应该说出来。同样，开除那些那些对文化有毒害的人，不管他们做什么，他们都是多么的好。文化是你雇佣、开除、提升人中定义的。 .</p>
<p>我就此写了一篇详细的博客。</p>
<hr>
<h2 id="竞争对手"><a href="#竞争对手" class="headerlink" title="竞争对手"></a>竞争对手</h2><p>关于竞争对手的一个快速的词：竞争对手是一个创业公司的鬼故事。初次创业者认为他们会杀死 99% 的创业者，但 99% 的创业者死于自杀，而不是谋杀。去考虑你的内部问题吧。如果你失败了，很可能是因为你没能成功地制造一个伟大的产品和/或未能建立一个伟大的公司。99% 的时候，你应该忽略竞争对手。特别是当他们在报纸中筹集了大量的钱或是制造很多噪音的时候。不要担心一个竞争对手，直到他们交付出一个真正的，跨时代的产品。新闻稿比代码更容易编写，比制作一个伟大的产品更容易。Henry Ford 说过：“竞争对手害怕的人永远是不在乎其他的一切，且依旧在做更好的生意的人。”</p>
<p>每一个大公司在规模小的时候，都面临比你现在面临的更糟糕的竞争威胁，他们都走了出来。万事总有一个对策。</p>
<hr>
<h2 id="盈利"><a href="#盈利" class="headerlink" title="盈利"></a>盈利</h2><p>哦对了，盈利。你需要搞清楚如何做到它。</p>
<p>一个简短版本是你需要让人们在你交付产品/服务中成本越高时付更多钱。因为一些原因，大家总是忘了如何把交付成本计算到账本里。</p>
<p>如果你有一个免费的产品，不要打算购买用户。这对广告支持的企业真的很难。你需要让一些人与他们的朋友分享。</p>
<p>如果你有一个低于1000美元的客户终身价值（LTV）的付费产品，你通常不要去销售。尝试不同的用户获取方法如 SEO / SEM，广告，邮件，等等，但要在 3 个月偿还你的客户获取成本（CAC）。如果你有一个超过1000美元的 LTV（净给你）付费产品，你也许可以直接销售，如果你的产品好卖。但除非你的 LTV 是 5000 美元或更高，它可能无效。试着通过推销自己的产品学习什么是有效的。销售黑技巧是一本有用的书。</p>
<p>在任何情况下，试着去做到 “拉面盈利” — 即，赚的钱可以维持创始人吃拉面即可。当你来到这一步，你可以控制自己的命运，不在受到来自投资者和金融市场波动的影响。</p>
<p>观察你的现金流。虽然这听起来令人难以置信，但我们已经看到很多创始人在没有意识到的情况下，钱花完了(然后 阅读 Paul Graham 的文章).</p>
<hr>
<h2 id="融资"><a href="#融资" class="headerlink" title="融资"></a>融资</h2><p>大多数初创公司在某个时候筹集资金。</p>
<p>你应该在你需要的时候，或是在条件成熟时筹集资金。要小心，不要失去你的节俭或开始扔钱去解决问题。没有足够的钱可能是坏的，但有太多的钱几乎总是坏的。</p>
<p>成功筹集到资金的秘诀是成为一个好的公司。所有其他的东西的创始人做了尝试优化的过程可能只占到 5% 的重要性。投资者寻找的是不论他们是否投资都会很成功的，但在得到外部资金会成长得更快的公司。“真正成功”这部分是重要的，因为巨大成功才会使得投资者得到回报，如果投资者相信你有 100% 的机会创造一个价值 1000 万美元的公司，但几乎没有机会建立一个更大的公司，他/她仍然可能不会投资，即使在估值非常低的情况下。所以要一直去解释为什么你的公司会是一个巨大的成功。</p>
<p>投资者在错过下一个谷歌和在回想起来显然是愚蠢的东西上浪费钱的双重担心下所驱动（对于最好的公司，他们两者都担心。）</p>
<p>如果你的公司不足以吸引资金就去融资，这不是一个好主意。你会抹黑名誉和并浪费时间。</p>
<p>如果你在努力筹集资金，不要让情绪低落下去。很多优秀的公司都纠结于此，因为最好的公司在开始时看起来很糟糕（而且他们几乎总是看起来过时了。）当投资者告诉你没有，请记住“不”但别记住原因。同时请记住所有的“可以”都意味着“不”—投资人擅长用 “或许可以” 来表达 “不”。</p>
<p>在融资对话中平等是很重要的 — 你不要去把你最喜欢的投资者列在名单上。让投资者采取行动的方法是担心其他投资者会抢走他们的机会。</p>
<p>把融资看成是一种必要的邪恶，并尽可能迅速地完成这些事。有些创始人爱上融资，这是不好的。最好是有一个创始人这样做，以便公司不停顿下来。</p>
<p>记住，大多数风投不了解很多行业。指标总是最有说服力的。</p>
<p>不幸的是，大多数投资者（Y Combinator 是一个显著的例外）还需要通过你们都认识的人的引荐后才把你当回事，这种模式将开始变化。.</p>
<p>坚持干净的条款（复杂的条款在每一轮融资后会更糟糕），但不要过度优化，特别是在估值上。估值是一种定量的竞争，所以创始人爱竞争最高估值。但中间估值不重要。</p>
<p>第一次检查是最难得到的，所以集中精力去获取，这通常意味着你的注意力集中在谁最喜欢的人身上。总是常备多个计划，其中一个就是不融资，并且依据利息灵活的，如果你能把更多的钱更良好地利用，并且在其合理范围内，请保持开放心态去谈论这个。</p>
<p>擅长 pitching 的一个重要关键是让你的故事尽可能清晰易懂。当然，最重要的关键是要有一个好的公司。有包括在 pitch 上有很多需要注意的，但至少你要有：使命，痛点，产品/服务，商业模式，团队，市场和市场增长率，财务。</p>
<p>请记住，每一轮的资金的指标会越来越高。如果你只是为你的种子轮做一个引人注目的演示，不要惊讶于你的A轮。</p>
<p>好的投资者真的做了大量的增值。坏的投资者会有损。大多数投资者陷在中间，既不增加也不减少。一个只投资小数额的投资者通常不会为你做任何事情（例如，请注意排队轮）。</p>
<p>伟大的董事会成员是除了用户外对公司最佳的外部驱动力，外部驱动力具有大多数创始人想不到的价值。请愿意接受较低的估值，以获得一个伟大的愿意参与董事会成员。</p>
<p>我认为 这篇由 Paul Graham 写的文章 是最好的关于融资的文章。作为一个战术点，你通常需要成为一个特拉华的 C 类公司，以提高机构的资本，所以最好是组成那样的。</p>
<hr>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>请记住每个好想法都至少有一千人拥有。他们其中一个会成功。区别就是执行。这是一个磨练，每个人都希望有其他别的将想法变成功的办法，但是他们至今没找到。所以你需要的就是一个好想法，一个好产品，一个好团队，一个好执行。就是这么简单！; )</p>
<p>感谢 Paul Buchheit, Erica Carpenter, Brian Chesky, Adam D’Angelo, Paul Graham, Drew Houston, Justin Kan, Matt Krisiloff, Aaron Levie, Gabriel Leydon, Jessica Livingston, Dustin Moskovitz, David Rusenko 和 Colleen Taylor 贡献了主意。</p>
<p>作者：Sam Altman<br>原文链接：<a href="http://playbook.samaltman.com/" target="_blank" rel="external">http://playbook.samaltman.com/</a></p>
<p>这田舍君的一篇博文，觉得还不错，原地址：<a href="https://ipro.xin/2016/09/28/%E5%88%9B%E4%B8%9A%E6%89%8B%E5%86%8C/" target="_blank" rel="external">创业手册</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;我们花了很多时间在为创业团队提供建议。尽管一对一的建议会一直很重要，但是我
    
    </summary>
    
      <category term="文章阅读" scheme="https://www.leolan.top/categories/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="创业手册" scheme="https://www.leolan.top/tags/%E5%88%9B%E4%B8%9A%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>React Native</title>
    <link href="https://www.leolan.top/posts/55168/"/>
    <id>https://www.leolan.top/posts/55168/</id>
    <published>2016-12-08T03:30:55.000Z</published>
    <updated>2017-02-27T08:47:33.046Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="React-Native开发环境搭建"><a href="#React-Native开发环境搭建" class="headerlink" title="React Native开发环境搭建"></a>React Native开发环境搭建</h1><p>找Hexo的问题时，无意间看到一篇关于React Native的博文，想起一次源创会上有以为大牛讲过React Native。React Native是使用javascript编写移动跨平台原生app的框架, Facebook已经在多项产品中使用了React Native，并且将持续地投入建设React Native。</p>
<p>官网：<a href="http://reactnative.cn/docs/0.39/getting-started.html" target="_blank" rel="external">搭建开发环境</a></p>
<hr>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="快速构件运行app"><a href="#快速构件运行app" class="headerlink" title="快速构件运行app"></a>快速构件运行app</h3><p>安装依赖环境<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>node</div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>watchman</div><div class="line">(sudo) npm <span class="keyword">install </span>-g react-native-cli</div></pre></td></tr></table></figure></p>
<p>生成项目<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-<span class="keyword">native</span> init demo</div></pre></td></tr></table></figure></p>
<p>构件运行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><p>执行上面命令后, 会自动启动模拟器, <strong>ctrl+command+z</strong> 可以调出调试菜单.</p>
<p> <strong>Reload</strong> 刷新app页面,让js代码的更改立刻生效,</p>
<p> <strong>Enable Remote JS Debugging</strong> 调出<strong>Chrome开发者工具</strong>, 可以看到异常, 打印日志, 使用debugger断点.<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'something'</span>);</div><div class="line"><span class="keyword">debugger</span>;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><p><strong>android生成离线包</strong><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">react</span>-native <span class="keyword">bundle </span>--platform <span class="keyword">android </span>--<span class="meta">entry</span>-file index.<span class="keyword">android.js </span>--<span class="keyword">bundle-output </span>./<span class="keyword">bundles/index.android.bundle </span>--dev false</div></pre></td></tr></table></figure></p>
<p><strong>配置签名</strong></p>
<p><strong>生成apk</strong>：<code>cd android &amp;&amp; ./gradlew installRelease</code></p>
<p><strong>ios生成离线包</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --platform ios --entry-file index<span class="selector-class">.ios</span><span class="selector-class">.js</span> --bundle-output ./bundles/index<span class="selector-class">.ios</span><span class="selector-class">.bundle</span> --dev false</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="http://reactnative.cn/docs/0.39/running-on-device-ios.html#content" target="_blank" rel="external">原生代码中使用离线包</a></li>
<li><a href="http://jingyan.baidu.com/article/ceb9fb10f4dffb8cad2ba03e.html" target="_blank" rel="external">使用xcode生成ipa</a></li>
</ul>
<p>原文：<a href="https://ipro.xin/2016/07/06/react-native%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">react-native极简教程</a></p>
<hr>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>参考官网：<a href="http://reactnative.cn/docs/0.39/getting-started.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.39/getting-started.html#content</a></p>
<hr>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>参考官网：<a href="http://reactnative.cn/docs/0.39/getting-started.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.39/getting-started.html#content</a></p>
<hr>
<h1 id="—未完成—"><a href="#—未完成—" class="headerlink" title="—未完成—"></a>—未完成—</h1><hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;React-Native开发环境搭建&quot;&gt;&lt;a href=&quot;#Re
    
    </summary>
    
      <category term="Dev" scheme="https://www.leolan.top/categories/Dev/"/>
    
    
      <category term="React Native" scheme="https://www.leolan.top/tags/React-Native/"/>
    
      <category term="构建原生APP" scheme="https://www.leolan.top/tags/%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%94%9FAPP/"/>
    
  </entry>
  
  <entry>
    <title>博客中插入音乐_视频</title>
    <link href="https://www.leolan.top/posts/27125/"/>
    <id>https://www.leolan.top/posts/27125/</id>
    <published>2016-12-06T08:18:15.000Z</published>
    <updated>2017-02-27T08:47:33.055Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>本文是参考Raintons的博文写的。感谢Raintons的文章。</p>
<h1 id="Markdown-通用插入方法"><a href="#Markdown-通用插入方法" class="headerlink" title="Markdown 通用插入方法"></a>Markdown 通用插入方法</h1><p>Markdown 作为轻量级的标记语言，兼容 html 语法，可以直接在 Markdown 文档中使用 html 语法。<br>大部分音乐、视频网站都可以直接生成播放器代码(尽量用直接生成的代码)，直接粘贴到 Markdown 文档中即可。有些标签不支持 https，尽量选支持https的网站，因为<strong>https网站加载http资源会被屏蔽掉，简单的在http地址后加个s测试即可知道是否支持https</strong> 。</p>
<p><strong>Html居中代码</strong>：<br><code>&lt;center&gt;我是内容，替换我&lt;/center&gt;</code><br>或<code>&lt;blockquote class=&quot;blockquote-center&quot;&gt;我是内容，替换我&lt;/blockquote&gt;</code></p>
<h2 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"480"</span> <span class="attr">height</span>=<span class="string">"320"</span> <span class="attr">controls</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>经测试不支持内嵌优酷之类的flash播放，<strong>src</strong>后面的地址要指向视频文件。<strong>width</strong>和<strong>height</strong>最好填写好对应视频的大小，不然周围有边框不好看。视频居中要用<code>&lt;blockquote class=&quot;blockquote-center&quot;&gt;我是内容，替换我&lt;/blockquote&gt;</code>才行。下面给大家放女票的可爱小短片，希望不要打我(=^ ^=)</p>
<blockquote class="blockquote-center"><br><video width="270" height="480" controls><br><source src="http://ofyfogrgx.bkt.clouddn.com/1009_cbc659118e3b4856b1a3a966bb0ac230.f0.mp4"><br></video><br></blockquote>

<p>网站生成代码，点分享即可生成播放代码。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161206/173516104.png" alt="mark"></p>
<hr>
<blockquote>
<p><strong>来两段B站小仙女微小微的舞蹈，不谢。</strong></p>
</blockquote>
<p><strong>HTML</strong></p>
<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="https://static.hdslb.com/miniloader.swf" flashvars="aid=4013860&page=1" pluginspage="https://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">

<p><strong>Flash</strong></p>
<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="https://static.hdslb.com/miniloader.swf?aid=5553924&page=1">


<hr>
<h2 id="音频："><a href="#音频：" class="headerlink" title="音频："></a>音频：</h2><p>音频分享和视频分享是一样的，也能生成外链播放器代码（有多种标签自由选择），只有网易云音乐是单独有生成按钮的。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161206/164604641.png" alt="mark"></p>
<center><br><embed src="//music.163.com/style/swf/widget.swf?sid=32196804&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all"><br></center>


<hr>
<h1 id="dplayer插件插入"><a href="#dplayer插件插入" class="headerlink" title="dplayer插件插入"></a>dplayer插件插入</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>两款插件基于 DIYgod 编写的 html5 播放器 APlayer 和 DPlayer 开发。</p>
<p>首先安装两款插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-tag-dplayer <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-tag-aplayer <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>安装到最后 npm 可能会报错，忽视即可。</p>
<p>安装成功后，在 Markdown 文档中添加 APlayer 和 DPlayer 标签即可,比如添加如下代码使用 APlayer 和 DPlayer(此处无耻的copy代码)：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="meta">%</span> aplayer <span class="string">"Caffeine"</span> <span class="string">"Jeff Williams"</span> <span class="string">"http://7xq131.com1.z0.glb.clouddn.com/Preparation.mp3"</span> <span class="string">"autoplay"</span> <span class="meta">%</span>&#125;</div><div class="line">&#123;<span class="meta">%</span> dplayer <span class="string">"url=http://devtest.qiniudn.com/若能绽放光芒.mp4"</span> <span class="string">"api=http://dplayer.daoapp.io"</span> <span class="string">"pic=http://devtest.qiniudn.com/若能绽放光芒.png"</span> <span class="string">"id=9E2E3368B56CDBB4"</span> <span class="string">"loop=yes"</span> <span class="string">"theme=#FADFA3"</span> <span class="string">"autoplay=false"</span> <span class="string">"token=tokendemo"</span> <span class="meta">%</span>&#125;</div></pre></td></tr></table></figure></p>
<p><code>hexo s</code>时如果报错，看看报什么错，<strong>报找不到目录</strong>或<strong>找不到文件</strong>错误就按提示创建目录或文件（文件内容可以为空，但必须存在该文件）</p>
<hr>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>参考：<br><a href="https://github.com/DIYgod/APlayer" target="_blank" rel="external">https://github.com/DIYgod/APlayer</a><br><a href="https://github.com/grzhan/hexo-tag-aplayer#upstream-issue" target="_blank" rel="external">https://github.com/grzhan/hexo-tag-aplayer#upstream-issue</a></p>
<div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div><script>var aplayer0 = new APlayer({element: document.getElementById("aplayer0"),narrow: false,autoplay: false,showlrc: 0,music : {title: "Apple Stone",author: "Lost",url: "autoplay",pic: ":music=http://ofyfogrgx.bkt.clouddn.com//blog/Apple%20&%20Stone%20-%20Lost.mp3"}});aplayer0.init();</script>
<hr>
<h2 id="视频：-1"><a href="#视频：-1" class="headerlink" title="视频："></a>视频：</h2><p>参考：<br><a href="https://github.com/NextMoe/hexo-tag-dplayer" target="_blank" rel="external">https://github.com/NextMoe/hexo-tag-dplayer</a><br><a href="https://github.com/DIYgod/DPlayer" target="_blank" rel="external">https://github.com/DIYgod/DPlayer</a></p>
<div id="dplayer0" class="dplayer" style="margin-bottom: 20px;"></div><script>var dplayer0 = new DPlayer({"element":document.getElementById("dplayer0"),"autoplay":false,"theme":"#FADFA3","loop":true,"video":{"url":"http://devtest.qiniudn.com/若能绽放光芒.mp4","pic":"http://devtest.qiniudn.com/若能绽放光芒.png"},"danmaku":{"api":"http://dplayer.donot.help/dplayerpy","id":"2622668","addition":["https://dplayer.daoapp.io/bilibili?aid=4157142"]}});</script>
<hr>
<h1 id="HTML标签和dplayer对比"><a href="#HTML标签和dplayer对比" class="headerlink" title="HTML标签和dplayer对比"></a>HTML标签和dplayer对比</h1><table>
<thead>
<tr>
<th>项目</th>
<th>使用难度</th>
<th>是否支持https</th>
<th>是否使用html5</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入html语言</td>
<td>小</td>
<td>大部分不支持</td>
<td>大部分使用Flash</td>
</tr>
<tr>
<td>使用Hexo插件</td>
<td>中等</td>
<td>支持</td>
<td>使用html5</td>
</tr>
</tbody>
</table>
<hr>
<p>此功能太实用了，看了Raintons的博文不禁心动，自己尝试了一番，感觉甚好，原文地址：<a href="http://login926.top/2016/07/20/HexoMedia/" target="_blank" rel="external">http://login926.top/2016/07/20/HexoMedia/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;本文是参考Raintons的博文写的。感谢Raintons的文章。&lt;/p&gt;
    
    </summary>
    
      <category term="杂项" scheme="https://www.leolan.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="博客中插入音乐_视频" scheme="https://www.leolan.top/tags/%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90-%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>群晖DSM_Synology</title>
    <link href="https://www.leolan.top/posts/26301/"/>
    <id>https://www.leolan.top/posts/26301/</id>
    <published>2016-11-29T06:04:23.000Z</published>
    <updated>2017-02-27T08:47:33.046Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="群晖"><a href="#群晖" class="headerlink" title="群晖"></a>群晖</h1><p>官网：<a href="https://www.synology.cn" target="_blank" rel="external">https://www.synology.cn</a><br>开发者专区：<a href="https://www.synology.cn/zh-cn/support/developer" target="_blank" rel="external">https://www.synology.cn/zh-cn/support/developer</a><br>开源项目：<a href="https://sourceforge.net/u/synology/profile/" target="_blank" rel="external">https://sourceforge.net/u/synology/profile/</a><br>CPU信息查询：<a href="https://www.synology.com/en-global/knowledgebase/DSM/tutorial/General/What_kind_of_CPU_does_my_NAS_have" target="_blank" rel="external">https://www.synology.com/en-global/knowledgebase/DSM/tutorial/General/What_kind_of_CPU_does_my_NAS_have</a><br>群晖中文论坛：<a href="https://forum.synology.com/cht/" target="_blank" rel="external">https://forum.synology.com/cht/</a><br>群晖英文论坛（内容更全面）：<a href="https://forum.synology.com/enu/index.php" target="_blank" rel="external">https://forum.synology.com/enu/index.php</a></p>
<p>第三方套件地址：<br><a href="http://www.gebi1.com/thread-84115-1-1.html?_dsign=b839635c" target="_blank" rel="external">http://www.gebi1.com/thread-84115-1-1.html?_dsign=b839635c</a><br>原文：<a href="http://xpenology.com/forum/viewtopic.php?f=2&amp;t=2994" target="_blank" rel="external">http://xpenology.com/forum/viewtopic.php?f=2&amp;t=2994</a></p>
<hr>
<h1 id="黑群晖"><a href="#黑群晖" class="headerlink" title="黑群晖"></a>黑群晖</h1><p>一般都是黑群晖的型号都为DS3615xs(高配置)，这样才能适应不同硬件环境。在虚拟机中安装可以设置硬件，很容易洗白；一般家用都是用低配机子安装，这里主要是实体机安装。</p>
<p>如果是虚拟机安装可以用VMware、EXSI、Virtual（<a href="https://www.synology.com/zh-cn/support/download/VirtualDSM" target="_blank" rel="external">VirtualDSM</a>）或者Docker（<a href="https://www.synology.com/zh-cn/support/download/DockerDSM" target="_blank" rel="external">Docker版的群晖</a>）</p>
<p>黑群晖中<strong>引导</strong>是很重要的。<br>引导有Nanoboot、gnoboot和XPEnoboot（xpenology）建议用XPEnoboot，支持的主板多，更新快。</p>
<h2 id="黑群晖所需工具下载"><a href="#黑群晖所需工具下载" class="headerlink" title="黑群晖所需工具下载"></a>黑群晖所需工具下载</h2><p><strong>引导下载</strong>：<a href="http://xpenology.me/downloads/" target="_blank" rel="external">xpenology</a>　　<a href="http://nanoboot.eu.org/" target="_blank" rel="external">nanoboot</a><br><strong>写U盘引导工具</strong>：<a href="http://sourceforge.net/projects/win32diskimager/files/latest/download" target="_blank" rel="external">win32diskimager</a>或<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/104059350.exe" target="_blank" rel="external">Roadkil DiskImage</a>或<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20170114/120704544.zip" target="_blank" rel="external">USBImageTool_v1.66汉化版</a><br><strong>代码编辑工具</strong>：<a href="https://notepad-plus-plus.org/download/v7.2.2.html" target="_blank" rel="external">Notepad++</a>或<a href="http://www.sublimetext.com/3" target="_blank" rel="external">sublimetext</a><br><strong>启动测试</strong>：<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/105826397.exe" target="_blank" rel="external">Qemu启动测试器</a></p>
<p>虚拟机可能会用到的镜像转换工具，img-虚拟磁盘格式互转：<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20170114/120751140.zip" target="_blank" rel="external">StarWind Converter</a></p>
<hr>
<h2 id="黑群晖DSM-5-2"><a href="#黑群晖DSM-5-2" class="headerlink" title="黑群晖DSM_5.2"></a>黑群晖DSM_5.2</h2><p>引导下载：<a href="http://xpenology.me/downloads/" target="_blank" rel="external">xpenology官网</a><br>5.2_5592是比较新的版本，也相对稳定一些，5.2_5644和<a href="http://source.wifihell.com/8-NAS-BUFFALO/ts5000/DSM5.2-5967/" target="_blank" rel="external">5.2_5967</a>也是可以的。<br>用写U盘引导工具，把下载的img镜像文件用工具写进U盘中（U盘数据全无，做好备份），写好后重插U盘，U盘空间显示很小，其他空间被屏蔽掉了。用<strong>Qemu启动测试器</strong>测试一下能否启动，正常就插入主机设置U盘启动（事先没有设置好的要接显示器）。</p>
<p><strong>选择机型是DS3615xs的</strong><br>官网下载DSM系统：<a href="https://www.synology.com/zh-cn/support/download/DS3615xs" target="_blank" rel="external">DS3615xs</a>下载PAT文件。<br>历史版本：<a href="http://cndl.synology.cn/download/DSM/release" target="_blank" rel="external">http://cndl.synology.cn/download/DSM/release</a></p>
<p><strong>开始安装：</strong><br>如果局域网内只有少量待安装的机子直接浏览器输入：<strong><a href="http://find.synology.com" target="_blank" rel="external">http://find.synology.com</a></strong> 即可直接跳转到安装界面（对于黑群晖，用的sn码如果网上有人使用了，可能看到的是别人的机子）。如果你知道机子分配的IP地址也可以输入：<strong><a href="http://IP:5000" target="_blank" rel="external">http://IP:5000</a></strong></p>
<p>当然也可以用群晖官方的管理工具：<strong>群晖助手Synology Assistant</strong><br><a href="https://global.download.synology.com/download/Tools/Assistant/6.0-7319/Windows/SynologyAssistantSetup-6.0-7319.exe" target="_blank" rel="external">windows</a><br><a href="https://global.download.synology.com/download/Tools/Assistant/6.0-7319/Mac/Synology-Assistant-6.0-7319.dmg" target="_blank" rel="external">mac</a><br><a href="https://global.download.synology.com/download/Tools/Assistant/6.0-7319/Ubuntu/x86_64/synology-assistant_6.0-7319_amd64.deb" target="_blank" rel="external">Ubuntu</a></p>
<hr>
<h2 id="黑群晖DSM-6-0"><a href="#黑群晖DSM-6-0" class="headerlink" title="黑群晖DSM_6.0"></a>黑群晖DSM_6.0</h2><p>引导下载：<a href="http://ofyfogrgx.bkt.clouddn.com/DS3615xs%206.0.2%20Jun%27s%20Mod%20V1.01.zip" target="_blank" rel="external">DS3615xs 6.0.2 Jun’s Mod V1.01</a>或<a href="http://source.wifihell.com/8-NAS-BUFFALO/ts5000/DSM6.02-v1.01/" target="_blank" rel="external">Jun’s的网盘</a><br>此压缩文件包含了img引导文件和VMware虚拟机配置文件（支持6.0.2_8451），虚拟机配置文件点开即可使用（自己设置网卡桥接并添加硬盘（设置为SATA接口），硬盘空间小于5G无法安装）。img镜像刻录到U盘后是<strong>GPT+BIOS/UEFI</strong>格式的分区，太老的主板可能无法识别到分区。</p>
<p>用写U盘引导工具，把下载的img镜像文件用工具写进U盘中（U盘数据全无，做好备份），写好后重插U盘，U盘空间显示很小，其他空间被屏蔽掉了。用<strong>Qemu启动测试器</strong>测试一下能否启动，正常就插入主机设置U盘启动（事先没有设置好的要接显示器）。</p>
<p><strong>选择机型是DS3615xs的</strong><br>官网下载DSM系统：<a href="https://www.synology.com/zh-cn/support/download/DS3615xs" target="_blank" rel="external">DS3615xs</a>下载PAT文件。<br>历史版本：<a href="http://cndl.synology.cn/download/DSM/release" target="_blank" rel="external">http://cndl.synology.cn/download/DSM/release</a></p>
<p><strong>开始安装：</strong><br>如果局域网内只有少量待安装的机子直接浏览器输入：<strong><a href="http://find.synology.com" target="_blank" rel="external">http://find.synology.com</a></strong> 即可直接跳转到安装界面（对于黑群晖，用的sn码如果网上有人使用了，可能看到的是别人的机子）。如果你知道机子分配的IP地址也可以输入：<strong><a href="http://IP:5000" target="_blank" rel="external">http://IP:5000</a></strong></p>
<p>当然也可以用群晖官方的管理工具：<strong>群晖助手Synology Assistant</strong><br><a href="https://global.download.synology.com/download/Tools/Assistant/6.0-7319/Windows/SynologyAssistantSetup-6.0-7319.exe" target="_blank" rel="external">windows</a>  |  <a href="https://global.download.synology.com/download/Tools/Assistant/6.0-7319/Mac/Synology-Assistant-6.0-7319.dmg" target="_blank" rel="external">mac</a>  |  <a href="https://global.download.synology.com/download/Tools/Assistant/6.0-7319/Ubuntu/x86_64/synology-assistant_6.0-7319_amd64.deb" target="_blank" rel="external">Ubuntu</a></p>
<p>新的6.0设定好mac,sn,vid,pid和老的5.2系统一样的话，可以无损数据直接从5.2升级到6.0；个人不建议，有时会出现数据升天的情况。那就有的玩咯，建议全新安装。附升级教程原文：<a href="http://xpenology.com/forum/viewtopic.php?f=2&amp;t=22100" target="_blank" rel="external">Migrate from DSM 5.2 to 6.0 - Baremetal</a></p>
<hr>
<hr>
<h1 id="配置设置技巧"><a href="#配置设置技巧" class="headerlink" title="配置设置技巧"></a>配置设置技巧</h1><p><strong>以下软硬件配置都是本人实验过的，确实可行，偶尔经常断线，不稳定，报错等，首先检查是不是用的大天朝的长城宽带，如果是，那么恭喜你，很可能是NAT3，连DDNS都没法用，更别说其他什么服务了，鼓励你去申请IP；另外检查你的路由是不是那种多登陆几次就打不开路由管理界面的那种路由，例如K1、K2、newifi（官方固件）等换路由，果断或其他路由测试你就明白了</strong></p>
<h2 id="洗白"><a href="#洗白" class="headerlink" title="洗白"></a>洗白</h2><h3 id="修改引导U盘syslinux-cfg文件"><a href="#修改引导U盘syslinux-cfg文件" class="headerlink" title="修改引导U盘syslinux.cfg文件"></a>修改引导U盘syslinux.cfg文件</h3><p>把U盘插入电脑，查看VID和PID<br><strong>linux</strong>：命令行输入<code>lsusb</code><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161129/151859616.png" alt="mark"></p>
<p><strong>mac</strong>：终端输入<code>system_profiler SPUSBDataType</code><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161129/152000090.png" alt="mark"></p>
<p><strong>windows</strong>:在设备管理器的属性中，或用什么芯片无忧、芯片精灵等工具都可以看得到。</p>
<p><strong>SN生成并计算Mac</strong><br>1.<a href="https://onedrive.live.com/view.aspx?resid=AFD1164BAADDF81C!168&amp;ithint=file%2cxlsm&amp;app=Excel&amp;authkey=!AAQuOGpVwRe7bu8" target="_blank" rel="external">群晖所有型号官方SN和MAC生成器(在线版，需翻墙)</a><br>2.<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/110736454.xlsm" target="_blank" rel="external">群晖所有型号官方SN和MAC生成器下载</a><br>Exelc打开后启用宏，选择型号后<strong>在空白地方双击生成SN</strong>，记录下来，底部选项卡选择Mac<strong>已经计算出对应了SN的Mac</strong>了，也记录下来备用。</p>
<p>在U盘根目录下有个<strong>syslinux.cfg</strong>文件（如果是6.0版本则修改grub下的<strong>grub.cfg</strong>文件），修改该文件的sn、vid、pid、mac的值，三处都要修改,mac1在群晖硬件版本DS3615xs之后，在sn前面，如果多网卡再加上mac2…别忘了空格是整行的没有换行，是编辑器显示区域不够了。<br>类似于这样：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/111813709.png" alt="mark"><br>改好后插回机子中启动系统，顺利的话在DSM中看不到此U盘外接设备了，在群晖助手中的MAC和序列号也是对应设定的，这时<strong>Quickconnect ID</strong>已经可以正常使用了。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/120106459.png" alt=""></p>
<p>6.0.x系统在升级过程中，不管是在线升级，还是手动上传pat档，均提示pat损毁，升级失败的问题。修改U盘<strong>grub.cfg</strong>文件中<strong>SataPortMap=x</strong>的值（这是指主板原生SATA接口数，主板固件总线中已经定义了，而不是通过外设方式集成的），默认为1 改成<strong>SataPortMap=2</strong>试试。可以搜索主板厂商去核实主板原生的SATA口的个数，也就是 x 的值，自己对应更改，错误的值可能启动不了系统的。</p>
<hr>
<p>如果要设置网卡远程唤醒（当然路由已经设置了5000端口转发）要刷网卡MAC<strong>（不建议这么做，这里只提供方法，不提供工具，由此造成的任何问题，本人不负责。）</strong>根据网卡型号的不同方法不同，一般有通用的MSDOS工具刷，用软碟通制作MSDOS启动U盘并把MAC刷写工具拷到U盘根目录，插上黑群晖主机启动到DOS，进入U盘根目录命令行刷写MAC（先备份网卡BIOS），一般刷网卡MAC只需要改前面六位就行了(改为00:11:32)，后面的保持原来的不变。刷好后远程唤醒功能就正常使用了。如果没刷成功很可能网卡就废了（用备份的BIOS恢复）。</p>
<p><strong>启动盘与系统盘集成</strong>可参考：<a href="http://www.xxxxxbbs.com/thread/95147.html" target="_blank" rel="external">洗白+启动盘与系统盘集成</a></p>
<hr>
<h3 id="修改synoinfo-conf（高级定制系统，不建议这么做，除非你是极客）"><a href="#修改synoinfo-conf（高级定制系统，不建议这么做，除非你是极客）" class="headerlink" title="修改synoinfo.conf（高级定制系统，不建议这么做，除非你是极客）"></a>修改synoinfo.conf（高级定制系统，不建议这么做，除非你是极客）</h3><p><strong>synoinfo.conf文件是整个群晖系统的主要配置文件，几乎所有的网络端口、主板接口、系统功能都在这里设定。配置错误将导致系统崩溃，请谨慎修改。</strong></p>
<hr>
<h4 id="修改SATA、eSATA"><a href="#修改SATA、eSATA" class="headerlink" title="修改SATA、eSATA"></a>修改SATA、eSATA</h4><p>开启DSM系统的终端登录功能，自己用shell工具连接群晖主机，账号密码是群晖系统中的用户和密码。<br>用admin账户登陆，编辑<code>vi /etc.defaults/synoinfo.conf</code>文件。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161129/154631465.png" alt="mark"></p>
<ul>
<li>修改指定的SATA口为eSATA口，这样原来装有资料的硬盘就不用格式化，作为eSATA外接硬盘接入，群晖中SATA设备是不支持NTFS格式的。<br>修改<strong>esataportcfg</strong>和<strong>internalportcfg</strong>对应的16进制的值，<strong>esataportcfg</strong>值不够位数就写最后三位；<strong>internalportcfg</strong>值要写全。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161129/154246686.PNG" alt="mark"><br>1-12代表1-12号SATA接口，用作群晖系统盘的那个接口必须是SATA接口，必须由群晖系统来初始化硬盘（数据提前做好备份）<br>参考：<a href="http://www.7po.com/thread-456016-1-1.html" target="_blank" rel="external">http://www.7po.com/thread-456016-1-1.html</a></li>
</ul>
<hr>
<h4 id="修改网络端口"><a href="#修改网络端口" class="headerlink" title="修改网络端口"></a>修改网络端口</h4><ul>
<li>可以修改默认的管理端口<strong>admin_port=”5000”</strong>；及各种端口修改，一般不建议随便修改（部分端口在DSM系统中可以修改）。</li>
</ul>
<hr>
<h2 id="DMS6-0后无法用root登陆的问题"><a href="#DMS6-0后无法用root登陆的问题" class="headerlink" title="DMS6.0后无法用root登陆的问题"></a><strong>DMS6.0后无法用root登陆的问题</strong></h2><p>shell登陆后输入 sudo -i，可切换root账号登陆（root账号密码同admin密码）<br>直接输入<code>chmod 7777 /etc/ssh/sshd_config</code>然后就可以修改这个文件了，把root登陆那一块被打上了注释符  “//”，删除即可。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161129/161120656.png" alt="mark"></p>
<hr>
<h2 id="DMS6-0后无法用迅雷远程下载（官方不支持了）"><a href="#DMS6-0后无法用迅雷远程下载（官方不支持了）" class="headerlink" title="DMS6.0后无法用迅雷远程下载（官方不支持了）"></a><strong>DMS6.0后无法用迅雷远程下载（官方不支持了）</strong></h2><p>安装Docker套件，搜索<strong>xware</strong>，安装yinheli/docker-thunder-xware；配置启动时端口什么的都不用管，设置好<strong>挂载目录</strong>就行了，要有<strong>读写权限</strong>！启动后看容器日志，<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161129/161802732.png" alt="mark"><br>在迅雷远程下载官网登录账号绑定即可。</p>
<hr>
<h2 id="虚拟机U盘启动无法挂载问题"><a href="#虚拟机U盘启动无法挂载问题" class="headerlink" title="虚拟机U盘启动无法挂载问题"></a><strong>虚拟机U盘启动无法挂载问题</strong></h2><p>虚拟机U盘启动有两种，一种是直接U盘连接进虚拟机并设置可移动磁盘启动（前提是虚拟机能正常识别到你的U盘）；另一种是对于虚拟机无法识别到U盘的情况，就只能在虚拟机中添加硬盘，在创建新硬盘时有个使用物理磁盘选项，选择它，之后选择物理磁盘时一般最后一个就是你的U盘，最后确定后能看到U盘容量；开机启动提示：<img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/122419252.png" alt="mark"><br>勾选独立，永久模式，即可解决问题。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161202/122615977.png" alt="mark"></p>
<hr>
<h2 id="硬盘分区模式-RAID、SHR、BASIC、JBOD"><a href="#硬盘分区模式-RAID、SHR、BASIC、JBOD" class="headerlink" title="硬盘分区模式 RAID、SHR、BASIC、JBOD"></a>硬盘分区模式 RAID、SHR、BASIC、JBOD</h2><p>SATA接口数量不多，挂的硬盘不多，但不想RAID的（RAID0不安全，RAID1太浪费，自带的SHR混合模式数据恢复麻烦一点；JBOD是类似SHR的软阵列模式，没用过，不评论），建议用BASIC方式(硬盘挂久了就知道原因了)，一个新硬盘怎么也得3-5年才会出现坏道，用BASIC方式创建ext4或btrfs分区，对于更换硬盘特别方便挂载在其他系统下转移数据。组RAID0的目的在于合并容量和提升速度，一般大于2T家用级以上的的硬盘，读写速度都有100M左右，千兆网口速度也差不多，瓶颈不在硬盘上。<br><strong>群晖双盘位机器SHR、RAID1阵列模式拆分、降级为BASIC教程</strong>参考：<br><a href="https://www.chiphell.com/thread-1392816-1-1.html" target="_blank" rel="external">https://www.chiphell.com/thread-1392816-1-1.html</a><br><a href="http://support-cn.synology.me/wordpress/?p=589" target="_blank" rel="external">http://support-cn.synology.me/wordpress/?p=589</a></p>
<p>官网容量计算器：<a href="https://www.synology.com/zh-cn/support/RAID_calculator" target="_blank" rel="external">RAID 容量计算器</a></p>
<hr>
<h2 id="硬盘数据恢复"><a href="#硬盘数据恢复" class="headerlink" title="硬盘数据恢复"></a>硬盘数据恢复</h2><p>当系统或硬盘出现问题导致无法启动时，可以恢复数据，当时心疼数据，折腾了2天终于找到办法了，原谅我忘记截图了。后来换硬盘了，补上<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161229/083143984.png" alt="mark"><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161229/083232912.png" alt="mark"></p>
<p><strong>重要：</strong>群晖在初次安装系统时，不管有几块硬盘，则默认且必须有一块硬盘是SHR阵列，这样在之后添加的硬盘不管选用何种模式，分区都为RAID类型；恢复数据有以下<strong>三种方法</strong></p>
<h3 id="克隆DSM系统分区"><a href="#克隆DSM系统分区" class="headerlink" title="克隆DSM系统分区"></a>克隆DSM系统分区</h3><p>这种方法对于喜欢装系统的朋友来说很好理解，群晖DSM是在每个硬盘之前分了三个分区（第一个空闲，第二个系统分区，第三个SWAP分区），之后第四个分区开始才是存储数据的，这也是为什么拔掉任何一块硬盘，系统也不会崩溃的原因（因为其他硬盘上还是有DSM系统的）。<br>那么我们只要克隆系统分区就行了，注意<strong>GPT分区格式的硬盘只能克隆到GPT分区上，MBR的也同理</strong>，混刻是启动不了系统的，但是可以插入正常运行的DSM系统（有SHR阵列）中恢复（会自动挂载，就要要等10分钟左右）这样也比装Ubuntu恢复省了不少时间。</p>
<hr>
<h3 id="群晖系统内恢复"><a href="#群晖系统内恢复" class="headerlink" title="群晖系统内恢复"></a>群晖系统内恢复</h3><p><strong>适用于：BASIC、SHR等等</strong><br>随便一块能正常启动群晖的硬盘，就是SHR阵列，带有系统的那个硬盘（就是所谓的“必须有一块硬盘是SHR阵列”），没有这种硬盘可以随便找一块没有存数据的硬盘安装群晖或用别的群晖机子初始化并建立SHR阵列。</p>
<p>完成后，用该硬盘启动群晖系统，启动后把要恢复数据的硬盘连接主机，DSM检测到硬盘显示为未初始化，不用管，就这样等上10分钟左右就会自动挂载（这时文件管理器里可以看到数据了），这时DSM是橙色报警，显示无法访问该硬盘的系统分区，只要点修复就行啦（怕丢失数据的先不要点，在文件管理器中先备份或转移资料），数据是无损的，但还是强烈建议备份（例如扇区复制）</p>
<hr>
<h3 id="安装Ubuntu进行恢复"><a href="#安装Ubuntu进行恢复" class="headerlink" title="安装Ubuntu进行恢复"></a>安装Ubuntu进行恢复</h3><p><strong>适用于：SHR、RAID0、RAID1、JDOB等等阵列（<code>fdisk -l</code>显示有RAID字样的）</strong></p>
<p><strong>下载Ubuntu镜像：</strong><a href="http://www.ubuntu.com/download/desktop" target="_blank" rel="external">http://www.ubuntu.com/download/desktop</a><br>制作U盘启动或虚拟机什么的都行，能进入系统就行，注意考虑恢复数据的速度及时间，这就决定了多长时间内要稳定运行，要是U盘启动用live模式，恢复时突然崩溃就白玩了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo -i</div><div class="line">apt-get <span class="keyword">update</span></div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> lvm2</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> mdadm</div></pre></td></tr></table></figure></p>
<p>安装mdadm的时候如果是Ubuntu14的选No configuration 来完成安装。<br>Ubuntu16的不会有这个选择窗口，默认就行。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161228/111920349.png" alt="mark"><br>安装完成后运行：<code>mdadm -Asf &amp;&amp; vgchange -ay</code><br>可能会报错，不用管，打开文件管理器就能看到了</p>
<p>参考：<a href="https://www.synology.cn/zh-cn/knowledgebase/faq/579" target="_blank" rel="external">还原存储在 DiskStation 中的数据</a></p>
<hr>
<h2 id="群晖绑定自己的域名"><a href="#群晖绑定自己的域名" class="headerlink" title="群晖绑定自己的域名"></a>群晖绑定自己的域名</h2><p>方法有很多，可以在DDNS里设置花生壳、万网账号、用已备案的域名跳转到quickconnectID等等。</p>
<p><a href="http://post.smzdm.com/p/306444/" target="_blank" rel="external">用NAT123做无公网IP的远程连接</a></p>
<hr>
<h2 id="永久屏蔽黑群晖升级或去除更新提示"><a href="#永久屏蔽黑群晖升级或去除更新提示" class="headerlink" title="永久屏蔽黑群晖升级或去除更新提示"></a>永久屏蔽黑群晖升级或去除更新提示</h2><h3 id="替换图形文件（法1）"><a href="#替换图形文件（法1）" class="headerlink" title="替换图形文件（法1）"></a>替换图形文件（法1）</h3><p>用WinSCP使用root权限登录到群辉。<br>定位到<strong>/usr/syno/synoman/synoSDSjslib/images</strong>目录。<br>下载文件：<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20161222/105033516.zip" target="_blank" rel="external">http://ofyfogrgx.bkt.clouddn.com/blog/20161222/105033516.zip</a><br>替换该目录下的<strong>dsm5_badge_num.png</strong>和<strong>dsm5_notification_num.png</strong>文件</p>
<hr>
<h3 id="修改VERSION文件（法2）"><a href="#修改VERSION文件（法2）" class="headerlink" title="修改VERSION文件（法2）"></a>修改VERSION文件（法2）</h3><p>开启群晖系统的终端SSH功能，用任意ssh工具连接，账号密码是群晖系统的管理员账号和密码，连接进入系统sshell后；输入<code>su</code>(5.2及以下版本的系统)；<code>sudo -i</code>(6.0及以上版本的系统)后输入密码，进行提权（#号开头拥有root权限）<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161222/090936723.png" alt="mark"><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /etc.defaults/</div><div class="line">vi <span class="keyword">VERSION</span></div></pre></td></tr></table></figure></p>
<p>文件内容是类似下面这样子的<br>进官网查参数：<a href="https://www.synology.cn/zh-cn/releaseNote/DS3615xs" target="_blank" rel="external">https://www.synology.cn/zh-cn/releaseNote/DS3615xs</a><br>经群晖系统升级界面看看可升级的最新版本是多少？最好不要跨大版本。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161222/101644792.png" alt="mark"></p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161222/101602040.png" alt="mark"><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">majorversion</span>=<span class="string">"5"</span>        #大版本号</div><div class="line"><span class="attr">minorversion</span>=<span class="string">"2"</span>         #小版本</div><div class="line"><span class="attr">buildphase</span>=<span class="string">"hotfix"</span></div><div class="line"><span class="attr">buildnumber</span>=<span class="string">"5967"</span>       #细分版本号</div><div class="line"><span class="attr">smallfixnumber</span>=<span class="string">"2"</span>       #Update版本号，这是是DSM <span class="number">5.2</span>-<span class="number">5967</span> Update <span class="number">2</span></div><div class="line"><span class="attr">builddate</span>=<span class="string">"2016/07/27"</span>   #版本时间</div><div class="line"><span class="attr">buildtime</span>=<span class="string">"17:15:53"</span></div></pre></td></tr></table></figure></p>
<p><code>:wq</code>或<code>ZZ</code>保存退出vi编辑器。</p>
<p>实际上我的是5.2_5592的，但目前5.2最新的是5.2-5967 Update 2就更改为此版本，这样就会显示为最新版本了。不要改为远大于官方的版本，比如10.1_9999之类的，会出现所有套件无法安装的情况。</p>
<hr>
<h3 id="一行代码搞定（法3）"><a href="#一行代码搞定（法3）" class="headerlink" title="一行代码搞定（法3）"></a>一行代码搞定（法3）</h3><p><code>vi /usr/syno/synoman/synoSDSjslib/sds-default.css</code><br>按<code>shift+$</code>跳到行尾，增加以下这行代码，同一行，不要换行。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sds-application-notify-badge-num</span>&#123;<span class="attribute">display</span>:none <span class="meta">!important</span>;&#125;</div></pre></td></tr></table></figure>
<p>保存退出，刷新一下网页桌面的控制面板就不会显示小角标了（所有提示都不显示小角标了，所以不建议此法），不过设置中还是会显示的。</p>
<hr>
<h2 id="DDNS设置3322"><a href="#DDNS设置3322" class="headerlink" title="DDNS设置3322"></a>DDNS设置3322</h2><p>DSM6.0后的DDNS没<a href="http://www.pubyun.com/" target="_blank" rel="external">3322.org</a>了。<br>在自定义中添加以下代码就行啦！<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://members.<span class="number">3322</span>.net/dyndns/<span class="keyword">update</span>?<span class="built_in">system</span>=dyndns&amp;<span class="built_in">hostname</span>=__HOSTNAME__</div></pre></td></tr></table></figure></p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161222/141001114.png" alt="mark"><br>之后新建就能看到3322了。</p>
<hr>
<h2 id="SVN-和-Git"><a href="#SVN-和-Git" class="headerlink" title="SVN 和 Git"></a>SVN 和 Git</h2><p>SVN的话直接安装套件，设置用户，设置仓库名就可以正常使用了。</p>
<h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>Git的话先安装git server套件<br>进入<strong>“控制面板”“用户账户”</strong>，然后新增一个用户，当然也可以用现用账户（如果单独增加的是git用户，最好修改用户和用户组的权限，其他任何权限什么都没有，不能登陆，不能同步文件，不能ssh登陆等等，普通用户因为要用这些功能就不用改了），然后再git server中对应用户打钩，允许访问。群晖的用户改权限可以用图形化界面，当然也可以用命令行，参考：<a href="https://www.leolan.top/posts/41310/">自己搭建Git服务器</a></p>
<p>接着开启群晖的ssh功能，用root或admin管理员账户登录shell。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /volume1     <span class="comment">#硬盘挂载点一般是/volume1或者/volume2，你可以通过 ls /来查看</span></div><div class="line">mkdir git       <span class="comment">#在硬盘中创建一个git目录，我们会把所有的git repos放在这里</span></div><div class="line"><span class="built_in">cd</span> git</div><div class="line">git init --bare testgit.git         <span class="comment">#初始化一个版本库，并创建一个testgit.git项目仓库</span></div><div class="line">chown -R leolan:users testgit.git   </div><div class="line"><span class="comment"># 格式【用户名:用户组】让git用户对这个板块库目录拥有可执行的权限，否则push的时候，是没有权限写入文件的</span></div></pre></td></tr></table></figure>
<p>服务端就OK了，接下来本地电脑克隆下来。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git clone ssh://leolan@<span class="number">192.168</span>.<span class="number">0.58</span>/volume1/git/testgit.git          </div><div class="line"><span class="comment"># ssh://协议可能会提示某些错误，可以先不要理会，只要能克隆下来就可以了。</span></div><div class="line"><span class="comment">#如果不克隆，可以在本地创建文件夹，绑定ssh://leolan@192.168.0.58/volume1/git/testgit.git源即可。</span></div><div class="line"><span class="comment">#在windows上通过git客户端克隆时，要勾选克隆空项目的一个选项。</span></div><div class="line"></div><div class="line">cd testgit.git</div><div class="line">git remote -v     <span class="comment">#查看项目的远程仓库地址</span></div><div class="line">git config --global <span class="keyword">user</span>.name <span class="string">"leolan"</span>            <span class="comment">#绑定用户名</span></div><div class="line">git config --global <span class="keyword">user</span>.email <span class="number">842632422</span>@qq.com   <span class="comment">#设置邮箱</span></div><div class="line">echo <span class="string">"hello Git"</span> &gt;&gt; hello.txt</div><div class="line">git <span class="keyword">add</span><span class="bash"> . &amp;&amp; git commit -m <span class="string">"first push"</span> &amp;&amp; git push</span></div><div class="line"><span class="comment">#如果正常提交不报错就可以使用啦，如果报错了再看具体内容，解决。</span></div></pre></td></tr></table></figure></p>
<p>以后新建仓库时<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /volume1/git/</div><div class="line">git init --bare newgit.git  <span class="comment">#创建新的仓库并初始化（初始化会清除该项目的所有数据）</span></div><div class="line"><span class="comment">#如果已有目录或需要重新初始化则进入目录执行：git init --bare 命令</span></div></pre></td></tr></table></figure></p>
<p>接着克隆下来，和上面的步骤是一样的。</p>
<h3 id="免密钥登录"><a href="#免密钥登录" class="headerlink" title="免密钥登录"></a>免密钥登录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub  <span class="comment">#查看本地的ssh密钥，copy备用</span></div></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="meta-keyword">/volume1/</span>homes<span class="meta-keyword">/leolan/</span>.ssh</div><div class="line">cd <span class="meta-keyword">/volume1/</span>homes<span class="meta-keyword">/leolan/</span>.ssh/</div><div class="line">vi authorized_keys</div><div class="line"><span class="meta">#粘贴上一步copy的ssh密钥，一行一个</span></div><div class="line">chown -R leolan:users <span class="meta-keyword">/volume1/</span>homes<span class="meta-keyword">/leolan/</span>.ssh</div><div class="line">chmod <span class="number">644</span> <span class="meta-keyword">/volume1/</span>homes<span class="meta-keyword">/leolan/</span>.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>编辑ssh配置文件<code>vim /etc/ssh/sshd_config</code><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">RSAAuthentication</span> <span class="literal">yes</span>     </div><div class="line">PubkeyAuthentication <span class="literal">yes</span>     </div><div class="line">AuthorizedKeysFile  .ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161222/171554297.png" alt="mark"><br>然后在群晖系统中停用ssh功能，再次开启。就能免密钥操作啦！</p>
<hr>
<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p>群晖的VPN服务是安装套件的，简单设置就行<br>但是群晖连接别的VPN并不是在套件中设置的，而是在网络中设置<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161227/164348644.png" alt="mark"><br>填写IP，账号密码就行，其他不知道的参数默认就行。</p>
<hr>
<h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><p>群晖DSM是基于Debain定制的系统，但是移除了apt包管理程序，只支持dpkg安装包，但是我们可以通过第三方软件安装插件的形式来安装说需要的软件。</p>
<p>连接SS本来是路由上设置是比较方便的，但某些路由不支持SS，所以用群晖连接SS，再把代理地址指向群晖的地址。</p>
<h3 id="pip安装SS"><a href="#pip安装SS" class="headerlink" title="pip安装SS"></a>pip安装SS</h3><p><strong>此篇未完成，结尾运行报RuntimeError: can not find library crypto错误，目前还没有找到解决方法，有知道怎么解决的朋友欢迎留言</strong></p>
<p>首先通过套件中心安装python及python3<br>开启SSH服务。并通过SSH连入NAS<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">su </span>        <span class="comment">#DSM5.x</span></div><div class="line">或 </div><div class="line"><span class="string">sudo </span>-i    <span class="comment">#DSM6.x</span></div><div class="line"></div><div class="line"><span class="string">cd </span>/<span class="string">tmp​</span></div><div class="line">​<span class="string">wget </span><span class="string">https:</span>//<span class="string">bootstrap.</span><span class="string">pypa.</span><span class="string">io/</span><span class="built_in">get-pip.py</span></div><div class="line"><span class="string">python </span><span class="built_in">get-pip.py</span></div><div class="line"><span class="string">pip </span><span class="string">install </span><span class="string">shadowsocks</span></div><div class="line"><span class="string">pip </span><span class="string">install </span><span class="string">crypto</span></div><div class="line">​<span class="string">cd </span>/<span class="string">etc/</span></div><div class="line"><span class="string">vi </span><span class="string">shadowsocks.</span><span class="string">json</span></div></pre></td></tr></table></figure></p>
<p>内容如下：配置文件参考：<a href="www.leolan.top/posts/13905">编写配置文件</a><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line"><span class="string">"server"</span>:<span class="string">"远程的SS服务器地址"</span>, </div><div class="line"><span class="string">"server_port"</span>:<span class="number">8388</span>,            <span class="comment">#远程SS服务器的服务端口</span></div><div class="line"><span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>, </div><div class="line"><span class="string">"local_port"</span>:<span class="number">1080</span>,             <span class="comment">#端口随意，不要冲突就行，默认1080</span></div><div class="line"><span class="string">"password"</span>:<span class="string">"mypassword"</span>,       <span class="comment">#SS密码</span></div><div class="line"><span class="string">"timeout"</span>:<span class="number">300</span>, </div><div class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,        <span class="comment">#加密方式</span></div><div class="line"><span class="string">"fast_open"</span>: <span class="literal">false</span>             <span class="comment">#FS加速</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>退出保存并运行服务<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sslocal -c /etc/shadowsocks<span class="selector-class">.json</span> -d start</div></pre></td></tr></table></figure></p>
<p>设置开机自启<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi <span class="regexp">/etc/</span>rc</div><div class="line"><span class="comment">#光标移动到最底下，在exit 0 之前添加以下这一句，保存退出。</span></div><div class="line">sslocal -c <span class="regexp">/etc/</span>shadowsocks.json -d start</div></pre></td></tr></table></figure></p>
<p>添加开机自启也可以通过计划任务添加，只是麻烦一点<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161227/163522654.png" alt="mark"></p>
<hr>
<h3 id="Docker安装SS"><a href="#Docker安装SS" class="headerlink" title="Docker安装SS"></a>Docker安装SS</h3><p>Docker安装也是可行的，直接下载安装，一定要看镜像说明，不同的作者定义的端口不同，打开看了才知道端口是什么。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161227/163803852.png" alt="mark"><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161227/164015157.png" alt="mark"><br>这里的端口是1984，运行Docker容器后，代理的端口,设置1984就OK了（当然，1984只是容器端口，真正的端口取决于你映射出来的端口）</p>
<hr>
<h3 id="shadowsocks-libev-C语言版"><a href="#shadowsocks-libev-C语言版" class="headerlink" title="shadowsocks-libev(C语言版)"></a>shadowsocks-libev(C语言版)</h3><p><strong>这节内容摘录网文，只提供思路，本人没有进行测试，有需求测试后会改写内容并删除此段文字</strong></p>
<blockquote>
<p>先要在 <a href="https://sourceforge.net/projects/dsgpl/files/" target="_blank" rel="external">群晖开源项目(Synology Open Source Project)</a> 找到 DS216Play 的交叉编译工具：monaco-gcc493_glibc220_hard-GPL.txz<br>然后 SSH 连接 VPS 进行编译工作:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">apt-get -y install make binutils</div><div class="line">mkdir ss</div><div class="line">cd ss</div><div class="line">wget <span class="symbol">http:</span>/<span class="regexp">/iweb.dl.sourceforge.net/project</span><span class="regexp">/dsgpl/</span>DSM%<span class="number">206.0</span>%<span class="number">20</span>Tool%<span class="number">20</span>Chains/STMicroelectronics%<span class="number">20</span>Monaco%<span class="number">20</span>Linux%<span class="number">203.10</span>.<span class="number">77</span>/monaco-gcc493_glibc220_hard-GPL.txz</div><div class="line">tar xvf monaco-gcc493_glibc220_hard-GPL.txz</div><div class="line">export PATH=<span class="string">"/root/ss/arm-unknown-linux-gnueabi/bin:$PATH"</span></div><div class="line">export CC=<span class="regexp">/root/ss</span><span class="regexp">/arm-unknown-linux-gnueabi/bin</span><span class="regexp">/arm-unknown-linux-gnueabi-gcc</span></div><div class="line">export LD=/root<span class="regexp">/ss/arm</span>-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-ld</div><div class="line">export RANLIB=<span class="regexp">/root/ss</span><span class="regexp">/arm-unknown-linux-gnueabi/bin</span><span class="regexp">/arm-unknown-linux-gnueabi-ranlib</span></div><div class="line">export CFLAGS="-I/root<span class="regexp">/ss/arm</span>-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/<span class="keyword">include</span><span class="string">"</span></div><div class="line">export LDFLAGS="-L/root/ss/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/<span class="class"><span class="keyword">lib</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># 依赖zlib，下载编译</span></div><div class="line">wget <span class="symbol">http:</span>/<span class="regexp">/zlib.net/zlib</span>-<span class="number">1.2</span>.<span class="number">8</span>.tar.gz</div><div class="line">tar xvf zlib-<span class="number">1.2</span>.<span class="number">8</span>.tar.gz</div><div class="line">cd zlib-<span class="number">1.2</span>.<span class="number">8</span>/</div><div class="line">./configure --prefix=<span class="regexp">/root/dist</span><span class="regexp">/zlib-1.2.8</span></div><div class="line">make &amp; make install</div><div class="line"></div><div class="line"># 依赖openssl，下载编译</div><div class="line">wget https:/<span class="regexp">/www.openssl.org/source</span><span class="regexp">/openssl-1.0.2h.tar.gz</span></div><div class="line">tar xvf openssl-1.0.2h.tar.gz</div><div class="line">cd openssl-1.0.2h</div><div class="line">./Configure dist --prefix=<span class="regexp">/root/dist</span><span class="regexp">/openssl-1.0.2h</span></div><div class="line">make</div><div class="line">make install</div><div class="line"></div><div class="line"># 编译shadowsocks-libev</div><div class="line">wget https:/<span class="regexp">/github.com/shadowsocks</span><span class="regexp">/shadowsocks-libev/archive</span><span class="regexp">/v2.4.6.tar.gz</span></div><div class="line">tar xvf v2.4.6.tar.gz</div><div class="line">cd shadowsocks-libev-2.4.6</div><div class="line"># 配置 需要注意的是--host选项，目标NAS不同值可能也会不同</div><div class="line"># 详见Synology开发指南的Compile Open Source Projects章节</div><div class="line">./configure \</div><div class="line">    --<span class="keyword">with</span>-zlib=<span class="regexp">/root/dist</span><span class="regexp">/zlib-1.2.8 \</span></div><div class="line">    --with-openssl=/root<span class="regexp">/dist/openssl</span>-<span class="number">1.0</span>.<span class="number">2</span>h \</div><div class="line">    --prefix=<span class="regexp">/root/dist</span><span class="regexp">/ss \</span></div><div class="line">    --host=arm-unknown-linux-gnueabi</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样 ss 就会编译到 /root/dist/ss 目录，这个时候打包:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar cvf shadowsocks<span class="selector-class">.tar</span> ss/</div></pre></td></tr></table></figure></p>
<p>登录群晖终端从远程取回文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp xxx@xxx<span class="selector-class">.xxx</span><span class="selector-class">.xxx</span><span class="selector-class">.xxx</span>:/root/dist/shadowsocks<span class="selector-class">.tar</span> .</div></pre></td></tr></table></figure></p>
<p><strong>运行</strong></p>
<p>需要知道的是 shadowsocks 是一个 socket 代理，而群晖 NAS 只支持 HTTP 代理，所以我们需要 Privoxy软件转换下，幸运的是 ipkg 里面刚好有此软件包。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ipkg <span class="keyword">install</span> privoxy</div></pre></td></tr></table></figure></p>
<p>新建 shadowsocks 配置文件 config.json，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attr">"server"</span>:<span class="string">"xxx.xx.xx.xx"</span>,</div><div class="line"> <span class="attr">"server_port"</span>:<span class="number">1984</span>,</div><div class="line"> <span class="attr">"local_port"</span>:<span class="number">16800</span>,</div><div class="line"> <span class="attr">"password"</span>:<span class="string">"xxxx"</span>,</div><div class="line"> <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line"> <span class="attr">"timeout"</span>:<span class="number">60</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建 Privoxy 配置文件 privoxy.config：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen-<span class="selector-tag">address</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16801</span>  #监听本地的<span class="number">16801</span>端口</div><div class="line">forward / .</div><div class="line">forward-socks5 <span class="selector-class">.dropbox</span><span class="selector-class">.com</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16800</span> . #把访问 dropbox 的数据都通过ss 的代理端口转发出去</div><div class="line">forward-socks5 <span class="selector-class">.tmdb</span><span class="selector-class">.org</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16800</span> .  #把访问 tmdb 的数据都通过ss 的代理端口转发出去</div><div class="line"><span class="selector-id">#forward-socks5</span> / <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">16800</span> . #全部转发</div></pre></td></tr></table></figure></p>
<p>表示监听本地 16801 的端口数据转发到本地的socks5 16800 端口。这里只有两个网站的数据经过 ss 代理，一个是 Dropbox ，另一个是 tmdb（VideoStation 封面数据抓取网址）。如果需要更多可以一个个添加进去或者使用 actionfiles。</p>
<p>后台运行：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./ss-local -c <span class="built_in">config</span>.json &amp; </div><div class="line">privoxy privoxy.<span class="built_in">config</span></div></pre></td></tr></table></figure></p>
<p>然后进 NAS 设置一下就 OK 了：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161228/120135818.png" alt="mark"></p>
<hr>
<p><strong>自动运行</strong></p>
<p>最后写一段自动运行脚本，放在 NAS 的任务计划中，设置每二十分钟运行一下，因为发现两个进程会有意外退出的情况，还没找原因：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Please run it with source command!"</span></div><div class="line">i1=`ps -ef | grep -E <span class="string">"ss-local*"</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</div><div class="line"><span class="keyword">if</span> (<span class="built_in">kill</span> -9 <span class="variable">$i1</span>)</div><div class="line"><span class="keyword">then</span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'ss killed'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'no ss found!'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">fi</span></div><div class="line">~/Software/ShadowSocks/bin/ss-local -c ~/Software/ShadowSocks/bin/config.json &amp;</div><div class="line"><span class="built_in">echo</span> <span class="string">"ss lunched!"</span></div><div class="line"></div><div class="line">i2=`ps -ef | grep -E <span class="string">"privoxy*"</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</div><div class="line"><span class="keyword">if</span> (<span class="built_in">kill</span> -9 <span class="variable">$i2</span>)</div><div class="line"><span class="keyword">then</span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'privoxy killed'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'no privoxy found!'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">fi</span></div><div class="line">privoxy ~/Software/ShadowSocks/privoxy.config</div><div class="line"><span class="built_in">echo</span> <span class="string">"privoxy lunched!"</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="ipkg、opkg、dpkg、Entware"><a href="#ipkg、opkg、dpkg、Entware" class="headerlink" title="ipkg、opkg、dpkg、Entware"></a>ipkg、opkg、dpkg、Entware</h2><p>ipkg、opkg、dpkg是包管理程序，类似于yum和apt-get，群晖安装后可以扩展许多功能。<br><strong>Optware</strong>运行库，opkg就是基于此。<br><strong>Entware</strong>本身是一个跨平台运行库，自动识别Intel、ARM平台，可以提供Linux运行环境，严格来说可以算是一种系统，可以实现Linux非常多的功能，神器！<br>实在不懂的进<a href="https://forum.synology.com/enu/" target="_blank" rel="external">群晖英文论坛</a>能找到你想要的。</p>
<h3 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h3><p>群晖自带了dpkg，但好像只能安装下载好的ipk文件，命令也很繁琐，没什么用处。</p>
<hr>
<h3 id="安装ipkg"><a href="#安装ipkg" class="headerlink" title="安装ipkg"></a>安装ipkg</h3><p>ipkg功能很强大，可以在线安装，但是在大天朝完全给墙了，只有Google能访问到<a href="http://webcache.googleusercontent.com/search?q=cache:http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/" target="_blank" rel="external">官网的快照</a>。如果无法安装可用opdk</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo -<span class="selector-tag">i</span></div><div class="line">wget http:<span class="comment">//ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh</span></div><div class="line">chmod +x syno-i686-bootstrap_1.<span class="number">2</span>-<span class="number">7</span>_i686<span class="selector-class">.xsh</span></div><div class="line">sh syno-i686-bootstrap_1.<span class="number">2</span>-<span class="number">7</span>_i686<span class="selector-class">.xsh</span></div><div class="line">rm syno-i686-bootstrap_1.<span class="number">2</span>-<span class="number">7</span>_i686<span class="selector-class">.xsh</span></div><div class="line">vi /root/<span class="selector-class">.profile</span></div><div class="line"></div><div class="line">#在PATH的等号后面加入以下这一句(注意格式和其他一样，千万不要改错了，不然几乎全部命令都失效)</div><div class="line">/opt/bin:</div></pre></td></tr></table></figure>
<p>然后保存退出，重启DSM（必须重启），重启运行<code>ipkg update</code>，之后就可以使用ipkg命令啦。</p>
<hr>
<h3 id="安装opdk"><a href="#安装opdk" class="headerlink" title="安装opdk"></a>安装opdk</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo -i</div><div class="line">wget <span class="symbol">http:</span>/<span class="regexp">/qnapware.zyxmon.org/binaries</span>-x86/installer/qnapware_install_x86.sh</div><div class="line">chmod +x qnapware_install_x86.sh</div><div class="line">./qnapware_install_x86.sh</div><div class="line"><span class="comment">#安装完了可能会报Info:Found a Bug?，不用理。</span></div><div class="line"></div><div class="line">vi /etc/profile</div><div class="line">vi /root/.profile</div><div class="line"><span class="comment">#分别在这两个文件的export CLASSPATH PATH JAVA_HOME LANG # Synology Java runtime enviroment（最后一行）的下一行加入以下这一句(注意格式和其他一样，千万不要改错了，不然几乎全部命令都失效)</span></div><div class="line">PATH=<span class="variable">$PATH</span><span class="symbol">:/Apps/opt/bin</span><span class="symbol">:/Apps/opt/sbin</span></div></pre></td></tr></table></figure>
<p>然后保存退出，重启DSM（必须重启），重启运行<code>opkg update</code>，之后就可以使用opkg命令啦。</p>
<hr>
<h3 id="Entware-ng神器"><a href="#Entware-ng神器" class="headerlink" title="Entware-ng神器"></a>Entware-ng神器</h3><p>Entware-ng是全平台运行库</p>
<p>官方项目：<a href="https://github.com/Entware-ng/Entware-ng" target="_blank" rel="external">https://github.com/Entware-ng/Entware-ng</a><br>README有说明安装在各个平台的链接</p>
<p>安装在群晖上：<a href="https://github.com/Entware-ng/Entware-ng/wiki/Install-on-Synology-NAS" target="_blank" rel="external">https://github.com/Entware-ng/Entware-ng/wiki/Install-on-Synology-NAS</a></p>
<p>安装Entware同时会安装opkg</p>
<hr>
<h2 id="Aria2-下载神器"><a href="#Aria2-下载神器" class="headerlink" title="Aria2 下载神器"></a>Aria2 下载神器</h2><h3 id="Docker安装Aria2"><a href="#Docker安装Aria2" class="headerlink" title="Docker安装Aria2"></a>Docker安装Aria2</h3><p>直接在镜像中心搜索下载镜像运行。<br>添加端口映射和目录挂载，端口默认是6800，不知道的看镜像文档。挂载目录可以把容器目录挂载到群晖的指定目录中。</p>
<hr>
<h3 id="通过opkg安装Aria2"><a href="#通过opkg安装Aria2" class="headerlink" title="通过opkg安装Aria2"></a>通过opkg安装Aria2</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">opkg update</div><div class="line">opkg install aria2</div><div class="line"></div><div class="line"><span class="comment">#启动aria2</span></div><div class="line">aria2c --enable-rpc=<span class="literal">true</span> --rpc-listen-<span class="literal">all</span>=<span class="literal">true</span> --rpc-allow-origin-<span class="literal">all</span>=<span class="literal">true</span> --dir=/volume1/<span class="number">139</span>G/aria2(这里是你的存储位置)/ --file-allocation=<span class="literal">none</span> -s <span class="number">5</span> -j <span class="number">3</span> -x <span class="number">5</span> -c -D</div></pre></td></tr></table></figure>
<p>下载Aria2管理界面：<a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="external">webui-aria2</a><br>解压后得到webui-aria2-master文件夹，改名为aria2放在web网站根目录<br>然后通过：<strong><a href="http://群晖IP/aria2/" target="_blank" rel="external">http://群晖IP/aria2/</a></strong>  访问<br>然后就可以正常使用了，速度还是很快的<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161229/145417486.png" alt="mark"></p>
<p>Aria2配置参考：<a href="http://aria2c.com/usage.html" target="_blank" rel="external">http://aria2c.com/usage.html</a></p>
<hr>
<p><strong>以下功能有时间再折腾，之后完善</strong></p>
<p><strong>开机启动Aria2</strong><br>参考：<a href="http://www.tweaking4all.com/qnap/qnap-aria2-download-manager/" target="_blank" rel="external">http://www.tweaking4all.com/qnap/qnap-aria2-download-manager/</a></p>
<p>放弃迅雷Xware3.0 转投Aria2：<a href="http://www.nasyun.com/thread-25850-1-1.html" target="_blank" rel="external">http://www.nasyun.com/thread-25850-1-1.html</a><br>迅雷离线<a href="https://github.com/binux/ThunderLixianExporter" target="_blank" rel="external">https://github.com/binux/ThunderLixianExporter</a><br>，百度云下载，，，，，，，</p>
<p>远程下载，远程控制，百度云导出<br>若<a href="https://github.com/acgotaku/BaiduExporter/releases" target="_blank" rel="external">BaiduExporter</a>插件不行就用以下这个<br><a href="https://chrome.google.com/webstore/detail/aria2c-integration/edcakfpjaobkpdfpicldlccdffkhpbfk?hl=en-US" target="_blank" rel="external">https://chrome.google.com/webstore/detail/aria2c-integration/edcakfpjaobkpdfpicldlccdffkhpbfk?hl=en-US</a></p>
<p><a href="http://www.cnplugins.com/fuzhu/baiduexporter/detail.html" target="_blank" rel="external">http://www.cnplugins.com/fuzhu/baiduexporter/detail.html</a><br><a href="http://www.nasyun.com/forum.php?mod=viewthread&amp;tid=26077&amp;pid=83563&amp;page=1&amp;extra=" target="_blank" rel="external">http://www.nasyun.com/forum.php?mod=viewthread&amp;tid=26077&amp;pid=83563&amp;page=1&amp;extra=</a></p>
<hr>
<h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><p>在群晖中群晖中安装此第三方套件之后就可以在群晖中运行虚拟机了。目前是还有版本范围限制，目前只支持x86以上且支持虚拟化的CPU。</p>
<p>官网：<a href="http://spk.diablos-netzwerk.de/#showhistory_virtualbox" target="_blank" rel="external">http://spk.diablos-netzwerk.de/#showhistory_virtualbox</a><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170112/110804674.png" alt="mark"></p>
<p>先在设置中打开<strong>Web Station</strong>服务，然后在套件中心添加第三方源：<a href="http://spk.diablos-netzwerk.de" target="_blank" rel="external">http://spk.diablos-netzwerk.de</a><br>保存刷新之后就能在套件中心看到这个插件了。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170112/111010324.png" alt="mark"></p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20170112/112101700.png" alt="mark"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;群晖&quot;&gt;&lt;a href=&quot;#群晖&quot; class=&quot;headerl
    
    </summary>
    
      <category term="NAS" scheme="https://www.leolan.top/categories/NAS/"/>
    
    
      <category term="群晖DSM_Synology" scheme="https://www.leolan.top/tags/%E7%BE%A4%E6%99%96DSM-Synology/"/>
    
      <category term="Aria2" scheme="https://www.leolan.top/tags/Aria2/"/>
    
      <category term="迅雷离线" scheme="https://www.leolan.top/tags/%E8%BF%85%E9%9B%B7%E7%A6%BB%E7%BA%BF/"/>
    
      <category term="opkg、ipkg、dpkg" scheme="https://www.leolan.top/tags/opkg%E3%80%81ipkg%E3%80%81dpkg/"/>
    
      <category term="Entware" scheme="https://www.leolan.top/tags/Entware/"/>
    
      <category term="shadowsocks" scheme="https://www.leolan.top/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://www.leolan.top/posts/48230/"/>
    <id>https://www.leolan.top/posts/48230/</id>
    <published>2016-11-25T03:23:02.000Z</published>
    <updated>2017-02-27T08:47:33.064Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="系统管理类"><a href="#系统管理类" class="headerlink" title="系统管理类"></a>系统管理类</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="搜索历史命令"><a href="#搜索历史命令" class="headerlink" title="搜索历史命令"></a>搜索历史命令</h3><p>快速搜索历史命令并运行<br><strong>Ctrl+r</strong>输入命令关键字即可搜索出来，按<strong>左或右方向键</strong>，或<strong>鼠标左键</strong>（视使用的第三方ssh软件而定）选定该命令，回车执行。</p>
<hr>
<h2 id="ssh免密钥登录"><a href="#ssh免密钥登录" class="headerlink" title="ssh免密钥登录"></a>ssh免密钥登录</h2><p><code>ssh-keygen</code> 创建公钥和密钥。 一路回车就行，会在~/.ssh/下创建相应文件。</p>
<p><code>ssh-copy-id user@IP</code> 把本地主机的公钥复制到远程主机的authorized_keys文件上。这样就能免登录这台主机啦。</p>
<p><strong>ssh-copy-id 也会给远程主机的用户主目录（home）和~/.ssh, 和~/.ssh/authorized_keys设置合适的权限 。</strong></p>
<p>A将公钥发给B，不是说让B来访问A，而是A就可以访问B了。也就是说B不能在.ssh文件夹下的authorized_keys保留A的公钥，如保存就是把自己让给别人来访问！</p>
<p>参考：<br><a href="https://my.oschina.net/emptytimespace/blog/79173" target="_blank" rel="external">https://my.oschina.net/emptytimespace/blog/79173</a><br><a href="http://www.linuxidc.com/Linux/2015-07/119608.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-07/119608.htm</a><br><a href="http://www.runoob.com/w3cnote/set-ssh-login-key.html" target="_blank" rel="external">http://www.runoob.com/w3cnote/set-ssh-login-key.html</a></p>
<hr>
<h2 id="分析空间大小"><a href="#分析空间大小" class="headerlink" title="分析空间大小"></a>分析空间大小</h2><p>分析空间大小（根目录下个文件夹大小）:<code>du -sh /*</code></p>
<hr>
<h2 id="硬盘检测"><a href="#硬盘检测" class="headerlink" title="硬盘检测"></a>硬盘检测</h2><h3 id="badblocks"><a href="#badblocks" class="headerlink" title="badblocks"></a>badblocks</h3><p>badblock命令用于查找磁盘中损坏的区块，是一个很好的检查坏道位置的工具。</p>
<p>语法： <strong>badblock (选项) (参数) </strong></p>
<p>选项<br><strong>-b&lt;区块大小&gt;</strong>：指定磁盘的区块大小，单位为字节；<br><strong>-o&lt;输出文件&gt;</strong>：将检查的结果写入指定的输出文件；<br><strong>-s</strong>：在检查时显示进度；<br><strong>-v</strong>：执行时显示详细的信息；<br><strong>-w</strong>：在检查时，执行写入测试。<br><strong>-c</strong>：指定检查次数。</p>
<p>参数<br><strong>磁盘装置</strong>：指定要检查的磁盘装置；<br><strong>磁盘区块数</strong>：指定磁盘装置的区块总数；<br><strong>启始区块</strong>：指定要从哪个区块开始检查。</p>
<p>使用fdisk命令识别硬盘信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo fdisk <span class="_">-l</span></div></pre></td></tr></table></figure></p>
<p>扫描硬盘的损坏扇区或区块<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo badblocks -v <span class="regexp">/dev/</span>sdb &gt; <span class="regexp">/tmp/</span>bad-blocks.txt</div></pre></td></tr></table></figure></p>
<p>扫描完成后，如果损坏区块被发现了，然后通过e2fsck命令使用“bad-blocks.txt”，强迫操作系统不使用这些损坏的区块存储数据。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo e2fsck -l <span class="regexp">/tmp/</span>bad-blocks.txt  <span class="regexp">/dev/</span>sdb</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：在运行e2fsck命令前，请保证设备没有被挂载。</p>
<h4 id="对可疑的区块多做几次操作"><a href="#对可疑的区块多做几次操作" class="headerlink" title="对可疑的区块多做几次操作"></a>对可疑的区块多做几次操作</h4><p>以4096字节为一个“block”,每一个“block”<strong>检查1次</strong>, 将结果输出到“<strong>/tmp/bad-blocks2.txt</strong>”文件中，由第51000 block开始，到63000 block结束，同时屏幕输出详细信息。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">badblocks -v -b <span class="number">4096</span> -c <span class="number">1</span> /dev/sdb -o /tmp/bad-blocks2.txt <span class="number">63000</span> <span class="number">51000</span></div></pre></td></tr></table></figure></p>
<h4 id="fsck使用badblocks的信息"><a href="#fsck使用badblocks的信息" class="headerlink" title="fsck使用badblocks的信息"></a>fsck使用badblocks的信息</h4><p>badblocks只会在日志文件中标记出坏道的信息，但若希望在检测磁盘时也能跳过这些坏块不检测，可以使用fsck的-l参数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fsck<span class="selector-class">.ext3</span> -l /tmp/bad-blocks<span class="selector-class">.txt</span> /dev/sdb</div></pre></td></tr></table></figure></p>
<h4 id="在创建文件系统前检测坏道"><a href="#在创建文件系统前检测坏道" class="headerlink" title="在创建文件系统前检测坏道"></a>在创建文件系统前检测坏道</h4><p>badblocks可以随e2fsck和mke2fs的-c一起运行（对ext3文件系统也一样），在创建文件系统前就先检测坏道信息，使用<strong>-c在创建文件系统前检查坏道的硬盘</strong>。 mkfs.ext3 -c选项用<strong>read-only</strong>方式检查硬盘，会在格式化硬盘时检查硬盘，并标出错误的硬盘“<strong>block</strong>”。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkfs<span class="selector-class">.ext3</span> -c /dev/sdb1</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">crontab status                <span class="comment">#crontab 状态 </span></div><div class="line">crontab -e                    <span class="comment">#编辑配置文件</span></div><div class="line"><span class="regexp">/sbin/</span>service crond start     <span class="comment">#启动服务 </span></div><div class="line"><span class="regexp">/sbin/</span>service crond stop      <span class="comment">#关闭服务 </span></div><div class="line"><span class="regexp">/sbin/</span>service crond restart   <span class="comment">#重启服务 </span></div><div class="line"><span class="regexp">/sbin/</span>service crond reload    <span class="comment">#重新载入配置</span></div></pre></td></tr></table></figure>
<p>格式：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*<span class="regexp">/25 * * * * /</span>opt<span class="regexp">/xxx/</span>xxx<span class="regexp">/restart.sh</span></div></pre></td></tr></table></figure></p>
<p><strong>crontab文件的含义</strong>：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，<br>格式如下： <strong>minute hour day month week command</strong> 顺序：<strong>分 时 日 月 周 </strong></p>
<ul>
<li><strong>minute</strong>： 表示分钟，可以是从0到59之间的任何整数。</li>
<li><strong>hour</strong>：表示小时，可以是从0到23之间的任何整数。 </li>
<li><strong>day</strong>：表示日期，可以是从1到31之间的任何整数。 </li>
<li><strong>month</strong>：表示月份，可以是从1到12之间的任何整数。 </li>
<li><strong>week</strong>：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。 </li>
<li><strong>command</strong>：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。 </li>
</ul>
<p>可以使用以下特殊字符：<br><strong>星号（*）</strong>：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。<br><strong>逗号（,）</strong>：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”<br><strong>中杠（-）</strong>：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”<br><strong>正斜线（/）</strong>：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p>
<hr>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>顺序执行多条命令可以用<code>;</code>来隔开<strong>（即使前面一条命令没有正确执行，后面的命令也会执行）</strong></p>
<p><code>&amp;&amp;</code>实现选择性执行的，它<strong>表示如果前面的命令执行结果返回0(前一条命令正确执行)，才执行后面的，否则不执行</strong>（不是表示终端输出的内容，而是表示命令执行状态的结果），用<code>echo $?</code>环境变量可以查看上一次命令的执行结果。</p>
<p>shell中的<code>||</code>除了用于表示逻辑与和或之外，还可以实现命令执行顺序的简单控制。<code>||</code>是与<code>&amp;&amp;</code>相反的控制效果，当上一条命令执行结果为<strong>≠0($?≠0)</strong>时(上一条命令执行失败)，则执行它后面的命令。</p>
<hr>
<h2 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h2><ul>
<li>1.<code>screen [command]</code></li>
<li><p>2.<code>[command] &amp;</code><br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161213/112900093.png" alt="mark"><br>图中所显示的 [1] 236分别是该工作的 <strong>job number</strong> 与该进程的 <strong>PID</strong>，而最后一行的 Done 表示该命令已经在后台执行完毕。</p>
</li>
<li><p>3.<code>nohup [command] &amp;</code></p>
</li>
</ul>
<p><strong>nohup命令</strong>：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。 　　<br>该命令的一般形式为：<code>nohup command &amp;</code> 　　使用nohup命令提交作业<br>如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件： 　　<br><code>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</code><br>在上面的例子中，输出被重定向到myout.file文件中。 　　</p>
<ul>
<li>4.<code>Ctrl+Z</code><br>ctrl + z 使当前工作停止并丢到后台中去<br>使用 <code>jobs</code> 查看任务。<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161213/113153965.png" alt="mark"><br>第一列显示的为被放置后台的工作的编号，<br>第二列的 <strong>＋</strong> 表示最近被放置后台的工作，同时也表示预设的工作，也就是若是有什么针对后台的工作的操作，首先对预设的工作，<strong>-</strong> 表示倒数第二被放置后台的工作，倒数第三个以后都不会有这样的符号修饰，<br>第三列表示它们的状态，而最后一列表示该进程执行的命令</li>
</ul>
<p><strong>通过fg命令将后台的工作拿到前台来运行</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#后面不加参数提取预设工作，加参数提取指定工作的编号</span></div><div class="line"><span class="built_in">fg</span> (%jobnumber)  <span class="comment">#使用时不要括号</span></div></pre></td></tr></table></figure></p>
<p><strong>通过bg命令将后台的工作在后台运行</strong><br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#与fg类似，加参则指定，不加参则取预设</span></div><div class="line"><span class="attribute">bg</span><span class="meta"> [%jobnumber]</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>ps命令很强大，选项和参数也多的离谱，参考：<a href="http://man.linuxde.net/ps" target="_blank" rel="external">http://man.linuxde.net/ps</a> </p>
<p>常用命令：<br><code>ps aux</code>　罗列出所有的进程信息<br><code>pa axjf</code>　连同部分的进程呈树状显示出来<br><code>ps -l</code>　显示自己这次登陆的 bash 相关的进程信息罗列出来<br><code>ps －afxo user,ppid,pid,pgid,command</code>　自定义我们所需要的参数显示</p>
<p><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161213/141249962.png" alt="mark"></p>
<table>
<thead>
<tr>
<th>内容</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>F</td>
<td>进程的标志为4 表示此程序的权限为 root，若为 1 则表示此子程序仅进行复制(fork)而沒有实际执行(exec)</td>
</tr>
<tr>
<td>USER</td>
<td>进程的属主</td>
</tr>
<tr>
<td>PID</td>
<td>进程的ID</td>
</tr>
<tr>
<td>PPID</td>
<td>其父进程的PID</td>
</tr>
<tr>
<td>SID</td>
<td>session的ID</td>
</tr>
<tr>
<td>TPGID</td>
<td>前台进程组的ID</td>
</tr>
<tr>
<td>%CPU</td>
<td>进程占用的CPU百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>占用内存的百分比</td>
</tr>
<tr>
<td>NI</td>
<td>进程的NICE值</td>
</tr>
<tr>
<td>VSZ</td>
<td>进程使用虚拟内存大小</td>
</tr>
<tr>
<td>RSS</td>
<td>驻留内存中页的大小</td>
</tr>
<tr>
<td>TTY</td>
<td>终端ID</td>
</tr>
<tr>
<td>S or STAT</td>
<td>进程状态</td>
</tr>
<tr>
<td>WCHAN</td>
<td>正在等待的进程资源</td>
</tr>
<tr>
<td>START</td>
<td>启动进程的时间</td>
</tr>
<tr>
<td>TIME</td>
<td>进程消耗CPU的时间</td>
</tr>
<tr>
<td>COMMAND</td>
<td>命令的名称和参数　</td>
</tr>
</tbody>
</table>
<p><strong>TPGID</strong>栏写着-1的都是没有控制终端的进程，也就是守护进程<br><strong>STAT</strong>表示进程的状态，而进程的状态有很多，如下表所示</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>R</td>
<td>Running.运行中</td>
</tr>
<tr>
<td>S</td>
<td>Interruptible Sleep.等待调用</td>
</tr>
<tr>
<td>D</td>
<td>Uninterruptible Sleep.不可终端睡眠</td>
</tr>
<tr>
<td>T</td>
<td>Stoped.暂停或者跟踪状态</td>
</tr>
<tr>
<td>X</td>
<td>Dead.即将被撤销</td>
</tr>
<tr>
<td>Z</td>
<td>Zombie.僵尸进程</td>
</tr>
<tr>
<td>W</td>
<td>Paging.内存交换</td>
</tr>
<tr>
<td>N</td>
<td>优先级低的进程</td>
</tr>
<tr>
<td>&lt;</td>
<td>优先级高的进程</td>
</tr>
<tr>
<td>s</td>
<td>进程的领导者</td>
</tr>
<tr>
<td>L</td>
<td>锁定状态</td>
</tr>
<tr>
<td>l</td>
<td>多线程状态</td>
</tr>
<tr>
<td>+</td>
<td>前台进程</td>
</tr>
</tbody>
</table>
<p>其中的 <strong>D</strong> 不可终端睡眠的状态，处在这种状态的进程不接受外来的任何signal，所以无法使用 kill 命令杀掉处于D状态的进程，无论是 kill，kill -9 还是 kill -15，一般处于这种状态可能是进程 IO 的时候出问题了。</p>
<hr>
<p>在使用 ps 命令的时候可以看到大部分的进程都是处于休眠的状态，如果这些进程都被唤醒，那么该谁最先享受 CPU 的服务，后面的进程又该是一个什么样的顺序呢？进程调度的队列又该如何去排列呢？</p>
<p>当然就是靠该进程的优先级值来判定进程调度的优先级，而优先级的值就是 <strong>PR</strong> 与 <strong>nice</strong> 来控制与体现的</p>
<p>而 nice 的值我们是可以通过 <code>nice</code> 命令来修改的，而需要注意的是 nice 值可以调整的范围是 <strong>-20 ~ 19</strong>，其中 root 有着至高无上的权力，既可以调整自己的进程也可以调整其他用户的程序，并且是所有的值都可以用，而普通用户只可以调制属于自己的进程，并且其使用的范围只能是 <strong>0 ~ 19</strong>，因为系统为了避免一般用户抢占系统资源而设置的一个限制。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这个实验在环境中无法做，因为权限不够，可以自己在本地尝试</span></div><div class="line"></div><div class="line"><span class="comment">#打开一个程序放在后台，或者用图形界面打开</span></div><div class="line">nice -n -<span class="number">5</span> vim &amp;</div><div class="line"></div><div class="line">renice -<span class="number">5</span> pid    <span class="comment">#修改已经存在的进程的优先级</span></div><div class="line"></div><div class="line"><span class="comment">#用 ps 查看其优先级</span></div><div class="line">ps -afxo user,ppid,pid,<span class="keyword">stat</span>,pri,ni,<span class="keyword">time</span>,command | <span class="keyword">grep</span> vim</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>pstree</strong><br>通过 pstree 可以很直接的看到相同的进程数量，还可以看到所有进程的之间的相关性。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pstree 或 pstree -up</div><div class="line"></div><div class="line"><span class="meta">#参数选择：</span></div><div class="line"><span class="meta">#-A  ：各程序树之间以 ASCII 字元來連接；</span></div><div class="line"><span class="meta">#-p  ：同时列出每个 process 的 PID；</span></div><div class="line"><span class="meta">#-u  ：同时列出每个 process 的所属账户名称。</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><table>
<thead>
<tr>
<th>信号值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td>重新读取参数运行，类似与restart</td>
</tr>
<tr>
<td>-2</td>
<td>如同 ctrl+c 的操作退出</td>
</tr>
<tr>
<td>-9</td>
<td>强制终止该任务</td>
<td>　　　</td>
</tr>
<tr>
<td>-15</td>
<td>正常的方式终止该任务</td>
</tr>
</tbody>
</table>
<p>完整64个信号：<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161213/114124337.png" alt="mark"></p>
<p>用法一般是：<code>kill [信号值] [PID]</code>　对 pid 对应的进程做操作<br>　　　　　　　<code>kill [信号值] [％jobnumber]</code>　对job对象进行操作</p>
<hr>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>常见的日志一般存放在<strong>/var/log</strong>，一般都有日志系统，默认是<strong>syslog</strong>,但一些新的linux发新版已经采用了功能更强大的<strong>rsyslog</strong></p>
<p><strong>系统日志</strong></p>
<table>
<thead>
<tr>
<th>日志名称</th>
<th>记录信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>alternatives.log</td>
<td>系统的一些更新替代信息记录</td>
</tr>
<tr>
<td>apport.log</td>
<td>应用程序崩溃信息记录</td>
</tr>
<tr>
<td>apt/history.log</td>
<td>使用apt-get安装卸载软件的信息记录</td>
</tr>
<tr>
<td>apt/term.log</td>
<td>使用apt-get时的具体操作，如 package 的下载打开等</td>
</tr>
<tr>
<td>auth.log</td>
<td>登录认证的信息记录</td>
</tr>
<tr>
<td>boot.log</td>
<td>系统启动时的程序服务的日志信息</td>
</tr>
<tr>
<td>btmp</td>
<td>错误登陆的信息记录</td>
</tr>
<tr>
<td>Consolekit/history</td>
<td>控制台的信息记录</td>
</tr>
<tr>
<td>dist-upgrade</td>
<td>dist-upgrade这种更新方式的信息记录</td>
</tr>
<tr>
<td>dmesg</td>
<td>启动时，显示屏幕上内核缓冲信息,与硬件有关的信息</td>
</tr>
<tr>
<td>dpkg.log</td>
<td>dpkg命令管理包的日志。</td>
</tr>
<tr>
<td>faillog</td>
<td>用户登录失败详细信息记录</td>
</tr>
<tr>
<td>fontconfig.log</td>
<td>与字体配置有关的信息记录</td>
</tr>
<tr>
<td>kern.log</td>
<td>内核产生的信息记录，在自己修改内核时有很大帮助</td>
</tr>
<tr>
<td>lastlog</td>
<td>(二进制文件)用户的最近信息记录</td>
</tr>
<tr>
<td>wtmp</td>
<td>(二进制文件)wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等</td>
</tr>
<tr>
<td>syslog</td>
<td>系统信息记录</td>
</tr>
</tbody>
</table>
<p>二进制日志文件<strong>wtmp，lastlog</strong>，不能直接使用 <strong>less、cat、more</strong> 这样的工具来查看， 可以用<strong>last</strong> 与 <strong>lastlog</strong> 工具来提取其中的信息</p>
<p><strong>syslog</strong> 是一个系统日志记录程序，在早期的大部分 Linux 发行版都是内置 syslog，让其作为系统的默认日志收集工具，虽然时代的进步与发展，syslog 已经年老体衰跟不上时代的需求，所以他被<strong> rsyslog </strong>所代替了，较新的Ubuntu、Fedora 等等都是默认使用 rsyslog 作为系统的日志收集工具<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service rsyslog <span class="built_in">start</span></div><div class="line">ps <span class="built_in">aux</span> | grep syslog</div></pre></td></tr></table></figure></p>
<p>既然它是一个服务，那么它便是可以配置，为我们提供一些我们自定义的服务;<strong>rsyslog</strong> 的配置文件有两个<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim <span class="meta-keyword">/etc/</span>rsyslog.conf  <span class="meta">#主要是配置的环境，也就是 rsyslog 的加载什么模块，文件的所属者等。</span></div><div class="line"></div><div class="line">vim <span class="meta-keyword">/etc/</span>rsyslog.d/<span class="number">50</span>-default.conf  <span class="meta">#主要是配置的过滤条件</span></div></pre></td></tr></table></figure></p>
<p>修改配置文件比较复杂，请自行man或搜索。</p>
<hr>
<h2 id="开机启动项"><a href="#开机启动项" class="headerlink" title="开机启动项"></a>开机启动项</h2><p>交互界面的开机启动项：<code>ntsysv</code>(centos)<br><strong>--back</strong>：在互动式界面里，显示Back钮，而非cancel钮。<br>使用空格键选择或者取消选项！</p>
<hr>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="二进制包"><a href="#二进制包" class="headerlink" title="二进制包"></a>二进制包</h3><p>二进制包的安装比较简单，我们需要做的只是将从网络上下载的二进制包解压后放到合适的目录，然后将包含可执行的主程序文件的目录添加进<strong>PATH环境变量</strong>即可。</p>
<h3 id="Debian-Ubuntu-apt"><a href="#Debian-Ubuntu-apt" class="headerlink" title="Debian/Ubuntu(apt)"></a>Debian/Ubuntu(apt)</h3><p>搜索软件包：<code>apt-cache search softname</code></p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>install</td>
<td style="text-align:left">其后加上软件包名，用于安装一个软件包</td>
</tr>
<tr>
<td>update</td>
<td style="text-align:left">从软件源镜像服务器上下载/更新用于更新本地软件源的软件包列表</td>
</tr>
<tr>
<td>upgrade</td>
<td style="text-align:left">升级本地可更新的全部软件包，但存在依赖问题时将不会升级，通常会在更新之前执行一次update</td>
</tr>
<tr>
<td>dist-upgrade</td>
<td style="text-align:left">解决依赖关系并升级(存在一定危险性)</td>
</tr>
<tr>
<td>remove</td>
<td style="text-align:left">移除已安装的软件包，包括与被移除软件包有依赖关系的软件包，但不包含软件包的配置文件</td>
</tr>
<tr>
<td>autoremove</td>
<td style="text-align:left">移除之前被其他软件包依赖，但现在不再被使用的软件包</td>
</tr>
<tr>
<td>purge</td>
<td style="text-align:left">与remove相同，但会完全移除软件包，包含其配置文件</td>
</tr>
<tr>
<td>clean</td>
<td style="text-align:left">移除下载到本地的已经安装的软件包，默认保存在/var/cache/apt/archives/</td>
</tr>
<tr>
<td>autoclean</td>
<td style="text-align:left">移除已安装的软件的旧版本软件包</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-y</td>
<td>自动回应是否安装软件包的选项，在一些自动化安装脚本中使用这个参数将十分有用</td>
</tr>
<tr>
<td>-s</td>
<td>模拟安装</td>
</tr>
<tr>
<td>-q</td>
<td>静默安装方式，指定多个q或者-q=#,#表示数字，用于设定静默级别，这在你不想要在安装软件包时屏幕输出过多时很有用</td>
</tr>
<tr>
<td>-f</td>
<td>修复损坏的(已安装的所有软件包)依赖关系</td>
</tr>
<tr>
<td>-d</td>
<td>只下载不安装</td>
</tr>
<tr>
<td>–reinstall</td>
<td>重新安装已经安装但可能存在问题的软件包</td>
</tr>
<tr>
<td>–install-suggests</td>
<td>同时安装APT给出的建议安装的软件包</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>dpkg常用参数介绍</strong>：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>安装指定deb包</td>
</tr>
<tr>
<td>-R</td>
<td>后面加上目录名，用于安装该目录下的所有deb安装包</td>
</tr>
<tr>
<td>-r</td>
<td>remove，移除某个已安装的软件包</td>
</tr>
<tr>
<td>-I</td>
<td>显示deb包文件的信息</td>
</tr>
<tr>
<td>-s</td>
<td>显示已安装软件的信息</td>
</tr>
<tr>
<td>-S</td>
<td>搜索已安装的软件包</td>
</tr>
<tr>
<td>-L</td>
<td>显示已安装软件包的目录信息</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Centos-Redhat-yum"><a href="#Centos-Redhat-yum" class="headerlink" title="Centos\Redhat(yum)"></a>Centos\Redhat(yum)</h3><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>install</td>
<td>安装rpm软件包；</td>
</tr>
<tr>
<td>update</td>
<td>更新rpm软件包；</td>
</tr>
<tr>
<td>check-update</td>
<td>检查是否有可用的更新rpm软件包；</td>
</tr>
<tr>
<td>remove</td>
<td>删除指定的rpm软件包；</td>
</tr>
<tr>
<td>list</td>
<td>显示软件包的信息；</td>
</tr>
<tr>
<td>search</td>
<td>检查软件包的信息；</td>
</tr>
<tr>
<td>info</td>
<td>显示指定的rpm软件包的描述信息和概要信息；</td>
</tr>
<tr>
<td>clean</td>
<td>清理yum过期的缓存；</td>
</tr>
<tr>
<td>shell</td>
<td>进入yum的shell提示符；</td>
</tr>
<tr>
<td>resolvedep</td>
<td>显示rpm软件包的依赖关系；</td>
</tr>
<tr>
<td>localinstall</td>
<td>安装本地的rpm软件包；</td>
</tr>
<tr>
<td>localupdate</td>
<td>显示本地rpm软件包进行更新；</td>
</tr>
<tr>
<td>deplist</td>
<td>显示rpm软件包的所有依赖关系。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>显示帮助信息；</td>
</tr>
<tr>
<td>-y</td>
<td>对所有的提问都回答“yes”；</td>
</tr>
<tr>
<td>-c</td>
<td>指定配置文件；</td>
</tr>
<tr>
<td>-q</td>
<td>安静模式；</td>
</tr>
<tr>
<td>-v</td>
<td>详细模式；</td>
</tr>
<tr>
<td>-d</td>
<td>设置调试等级（0-10）；</td>
</tr>
<tr>
<td>-e</td>
<td>设置错误等级（0-10）；</td>
</tr>
<tr>
<td>-R</td>
<td>设置yum处理一个命令的最大等待时间；</td>
</tr>
<tr>
<td>-C</td>
<td>完全从缓存中运行，而不去下载或者更新任何头文件。</td>
</tr>
</tbody>
</table>
<p>自动搜索最快镜像插件：<code>yum install yum-fastestmirror</code><br>安装yum图形窗口插件：<code>yum install yumex</code><br>查看可能批量安装的列表：<code>yum grouplist</code></p>
<p><strong>安装 </strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> <span class="comment">#全部安装 </span></div><div class="line">yum <span class="keyword">install</span> package1 <span class="comment">#安装指定的安装包package1 </span></div><div class="line">yum groupinsall group1 <span class="comment">#安装程序组group1</span></div></pre></td></tr></table></figure></p>
<p><strong>更新和升级 </strong><br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum update <span class="comment">#全部更新 </span></div><div class="line">yum update package1 <span class="comment">#更新指定程序包package1 </span></div><div class="line">yum<span class="built_in"> check-update </span><span class="comment">#检查可更新的程序 </span></div><div class="line">yum upgrade package1 <span class="comment">#升级指定程序包package1 </span></div><div class="line">yum groupupdate group1 <span class="comment">#升级程序组group1</span></div></pre></td></tr></table></figure></p>
<p><strong>查找和显示 </strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum info package1 <span class="comment">#显示安装包信息package1 </span></div><div class="line">yum <span class="built_in">list</span> <span class="comment">#显示所有已经安装和可以安装的程序包 </span></div><div class="line">yum <span class="built_in">list</span> package1 <span class="comment">#显示指定程序包安装情况package1 </span></div><div class="line">yum groupinfo group1 <span class="comment">#显示程序组group1信息</span></div><div class="line">yum search <span class="built_in">string</span> 根据关键字<span class="built_in">string</span>查找安装包 删除程序 </div><div class="line">yum remove | erase package1 <span class="comment">#删除程序包package1 </span></div><div class="line">yum groupremove group1 <span class="comment">#删除程序组group1 </span></div><div class="line">yum deplist package1 <span class="comment">#查看程序package1依赖情况</span></div></pre></td></tr></table></figure></p>
<p><strong>清除缓存 </strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yum</span> clean packages <span class="comment">#清除缓存目录下的软件包 </span></div><div class="line">yum clean headers <span class="comment">#清除缓存目录下的 headers </span></div><div class="line">yum clean oldheaders <span class="comment">#清除缓存目录下旧的 headers</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>yum 软件组</strong><br>软件组管理功能实测并不是很好用，经常出现没有包可安装的问题，可能原因有几个，换了yum源，软件组信息已经变更了，等等，平时用处不大，就没有去研究咯，知道怎么解决的朋友欢迎反馈。<br>列出软件组<code>yum grouplist</code> 已安装的软件组<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/165538270.png" alt=""><br>未安装的软件组<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/165623242.png" alt=""><br><strong>软件组信息yum groupinfo “软件组名（英文双引号）”</strong></p>
<p>主要被安装的软件<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/165714876.png" alt=""><br>额外可选的软件<br><img src="http://ofyfogrgx.bkt.clouddn.com/blog/20161212/165747860.png" alt=""><br><strong>安装某个软件组yum groupinstall “软件组名（英文双引号）”</strong></p>
<hr>
<p><strong>RPM常用参数介绍</strong>：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>查询所有套件；</td>
</tr>
<tr>
<td>-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+</td>
<td>设置包装套件的完成阶段，并指定套件档的文件名称；</td>
</tr>
<tr>
<td>-c</td>
<td>只列出组态配置文件，本参数需配合”-l”参数使用；</td>
</tr>
<tr>
<td>-d</td>
<td>只列出文本文件，本参数需配合”-l”参数使用；</td>
</tr>
<tr>
<td>-e&lt;套件档&gt;或–erase&lt;套件档&gt;</td>
<td>删除指定的套件；</td>
</tr>
<tr>
<td>-f&lt;文件&gt;+</td>
<td>查询拥有指定文件的套件；</td>
</tr>
<tr>
<td>-h或–hash</td>
<td>套件安装时列出标记；</td>
</tr>
<tr>
<td>-i</td>
<td>显示套件的相关信息；</td>
</tr>
<tr>
<td>-i&lt;套件档&gt;或–install&lt;套件档&gt;</td>
<td>安装指定的套件档；</td>
</tr>
<tr>
<td>-l</td>
<td>显示套件的文件列表；</td>
</tr>
<tr>
<td>-p&lt;套件档&gt;+</td>
<td>查询指定的RPM套件档；</td>
</tr>
<tr>
<td>-q</td>
<td>使用询问模式，当遇到任何问题时，rpm指令会先询问用户；</td>
</tr>
<tr>
<td>-R</td>
<td>显示套件的关联性信息；</td>
</tr>
<tr>
<td>-s</td>
<td>显示文件状态，本参数需配合”-l”参数使用；</td>
</tr>
<tr>
<td>-U&lt;套件档&gt;或–upgrade&lt;套件档&gt;</td>
<td>升级指定的套件档；</td>
</tr>
<tr>
<td>-v</td>
<td>显示指令执行过程；</td>
</tr>
<tr>
<td>-vv</td>
<td>详细显示指令执行过程，便于排错。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="dd命令"><a href="#dd命令" class="headerlink" title="dd命令"></a>dd命令</h2><p><code>dd --help</code>或是<code>info dd</code></p>
<p>输入或输出<br><code>dd if=[STDIN] of=[STDOUT]</code><br>例：<br><code>dd if=ubuntu-13.10-desktop-amd64.iso of=/dev/sdb2</code><strong>把光盘写进磁盘</strong><br>当然你可以拿这个来方便的拷贝光碟(注意，你的光碟是标准的 iso9660格式才可以这么做！)</p>
<p><code>dd if=/dev/cdrom of=cdrom.iso</code><strong>把光驱内容保存为iso镜像文件</strong></p>
<p>同理，要把一张磁盘的内容拷贝到另一张磁盘上，利用/tmp作为临时存储区。把源盘插入驱动器中，输入下述命令：<br><code>dd if =/dev/xxx of = /tmp/tmpfile</code><br>拷贝完成后，将源盘从驱动器中取出，把目标盘插入，输入命令：<br><code>dd if = /tmp/tmpfile of =/dev/xxx</code><br>软盘拷贝完成后，应该将临时文件删除：<br><code>rm /tmp/tmpfile</code></p>
<p>如果两个设备能同时工作：<code>dd if =/dev/xxx of = /dev/xxx</code></p>
<ul>
<li><strong>/dev/null</strong> 它是空设备，也称为位桶（bit bucket）。任何写入它的输出都会被抛弃。如果不想让消息以标准输出显示或写入文件，那么可以将消息重定向到位桶。</li>
<li><strong>/dev/zero</strong>该设备无穷尽地提供0，可以使用任何你需要的数目——设备提供的要多的多。他可以用于向设备或文件写入字符串0。<br><code>dd if=/dev/zero of=./test.txt bs=1k count=1</code><br><strong>/dev/zero</strong>还可用于擦除磁盘数据</li>
</ul>
<hr>
<h2 id="时区时间"><a href="#时区时间" class="headerlink" title="时区时间"></a>时区时间</h2><p><strong>时区修改</strong><br><code>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code> 提示覆盖的就覆盖掉<br><code>date</code>  看到有CST字样为中国标准时间; <code>date -R</code>  看到+0800  是东八区</p>
<p><strong>修改硬件时钟</strong>（每次开机都是从硬件读取时间的，首先硬件时间要正确）<br><code>hwclock --show</code>   显示当前硬件时间<br><code>hwclock --set --date=&quot;10/28/16 10:04:00&quot;</code>   （月/日/年 时:分:秒）</p>
<ul>
<li><p>1.<strong>硬件时钟</strong>与<strong>系统时钟</strong>同步<br><strong>hc</strong>代表硬件时间，<strong>sys</strong>代表系统时间，即用硬件时钟同步到系统时钟<br><code>hwclock --hctosys</code> 或者<code>clock --hctosys</code><br><code>date</code>    #查看当前系统时间</p>
</li>
<li><p>2.<strong>系统时钟</strong>和<strong>硬件时钟</strong>同步（一般是系统自动同步Internet时间后才把最新时间同步到硬件中）<br><code>hwclock --systohc</code>或者<code>clock --systohc</code>  即用系统时钟同步到硬件时钟</p>
</li>
</ul>
<p>注：<strong>tzselect</strong> 命令也可以交互界面选择修改，但最后还要执行一个提示设置时区的命令，并写入环境变量中，重启才能生效。</p>
<hr>
<hr>
<h1 id="文件、目录类"><a href="#文件、目录类" class="headerlink" title="文件、目录类"></a>文件、目录类</h1><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p><strong>cd</strong> ：进入用户主目录；<br><strong>cd ~</strong> ：进入用户主目录；<br><strong>cd -</strong> ：返回进入此目录之前所在的目录；<br><strong>cd !$</strong> ： 把上个命令的参数作为cd参数使用</p>
<hr>
<h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><h3 id="数字设定法"><a href="#数字设定法" class="headerlink" title="数字设定法"></a>数字设定法</h3><p><strong>0表示没有权限，1表示可执行权限， 2表示可写权限，4表示可读权限</strong>，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（<strong>u</strong>）（<strong>g</strong>）（<strong>o</strong>）。</p>
<p>例如，如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝6（读/写）。<br>数字设定法的一般形式为：<br>语法：<code>chmod [mode] 文件名</code><br>例如：chmod 755 mm.txt</p>
<h3 id="文字设定法"><a href="#文字设定法" class="headerlink" title="文字设定法"></a>文字设定法</h3><p>语法：<code>chmod [who] [+ | - | =] [mode] 文件名</code><br>命令中各选项的含义为：<br>操作对象who可是下述字母中的任一个或者它们的组合：</p>
<ul>
<li>u 表示“用户（user）”，即文件或目录的所有者。</li>
<li>g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。</li>
<li>o 表示“其他（others）用户”。</li>
<li>a 表示“所有（all）用户”。它是系统默认值。<br>操作符号可以是：</li>
<li>+ 添加某个权限。</li>
<li>- 取消某个权限。</li>
<li>= 赋予给定权限并取消其他所有权限（如果有的话）。</li>
</ul>
<p>设置 mode 所表示的权限可用下述字母的任意组合：</p>
<ul>
<li>r 可读。</li>
<li>w 可写。</li>
<li>x 可执行。</li>
<li>X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。</li>
<li>s 在文件执行时把进程的属主或组ID置为该文件的文件属主。</li>
</ul>
<p>方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。</p>
<ul>
<li>t 保存程序的文本到交换设备上。</li>
<li>u 与文件属主拥有一样的权限。</li>
<li>g 与和文件属主同组的用户拥有一样的权限。</li>
<li>o 与其他用户拥有一样的权限。</li>
</ul>
<p><strong>文件名</strong>：以空格分开的要改变权限的文件列表，支持通配符。</p>
<hr>
<h2 id="CUT命令"><a href="#CUT命令" class="headerlink" title="CUT命令"></a>CUT命令</h2><ul>
<li>-b：仅显示行中指定直接范围的内容； </li>
<li>-c：仅显示行中指定范围的字符；</li>
<li>-d：指定字段的分隔符，默认的字段分隔符为“TAB”； </li>
<li>-f：显示指定字段的内容； </li>
<li>-n：与“-b”选项连用，不分割多字节字符； </li>
<li>--complement：补足被选择的字节、字符或字段； </li>
<li>--out-delimiter=&lt;字段分隔符&gt;：指定输出内容是的字段分割符； </li>
<li>--help：显示指令的帮助信息； </li>
<li>--version：显示指令的版本信息。</li>
</ul>
<p>打印/etc/passwd文件中以<strong>:</strong>为分隔符的第1个字段和第6个字段分别表示用户名和其家目录：<code>cut /etc/passwd -d &#39;:&#39; -f 1,6</code><br>前五个（包含第五个）：<code>cut /etc/passwd -c -5</code><br>前五个之后的（包含第五个）：<code>cut /etc/passwd -c 5-</code><br>第五个：<code>cut /etc/passwd -c 5</code><br>2到5之间的（包含第五个）： <code>cut /etc/passwd -c 2-5</code></p>
<hr>
<h2 id="查找近期修改的文件"><a href="#查找近期修改的文件" class="headerlink" title="查找近期修改的文件"></a>查找近期修改的文件</h2><p>比如按名字查找一个文件，可以用<code>find / -name filename</code><br>按时间查找也有参数</p>
<ul>
<li><strong>-atime</strong> 访问时间</li>
<li><strong>-ctime</strong> 改变状态的时间</li>
<li><strong>-mtime</strong>修改的时间。<br>这里的时间是以24小时为单位的。</li>
</ul>
<p><code>find . -name &#39;*.html&#39; -type f -mmin -30</code>：当前目录最近30分钟内修改过的html文件<br><code>find . -name &#39;*.html&#39; -type f -mmin -30 -ls</code>：最近30分钟内修改过的文件，的详细情况<br><code>find ./ -mtime 0</code>：返回最近24小时内修改过的文件。<br><code>find ./ -mtime 1</code> ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。<br><code>find . -type f -mtime +1</code>：最近1天前（2天内）修改过的常规文件<br><code>find . -mtime -2 -type f</code>：48小时以内修改过的文件</p>
<p>那怎么返回10天内修改过的文件？find支持表达式关系运算，所以可以把最近几天的数据一天天的加起来：<br><code>find ./ -mtime 0 -o -mtime 1 -o -mtime 2</code> 虽然比较土，但也算是个方法了。</p>
<p>参考：<a href="http://man.linuxde.net/find" target="_blank" rel="external">http://man.linuxde.net/find</a></p>
<hr>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p><strong>echo “ok” &gt; test.txt</strong> ：用ok字符覆盖掉test.txt内容，<strong>&gt;表示追加并覆盖</strong>的意思。<br><strong>echo “ok” &gt;&gt; test.txt</strong>：向test.txt文件追加OK字符，不覆盖原文件里的内容。<strong>&gt;&gt;表示尾行追加</strong>。</p>
<hr>
<h2 id="计算MD5"><a href="#计算MD5" class="headerlink" title="计算MD5"></a>计算MD5</h2><p>计算MD5：<code>md5sum filename</code></p>
<hr>
<h2 id="文件上下传"><a href="#文件上下传" class="headerlink" title="文件上下传"></a>文件上下传</h2><h3 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp <span class="regexp">/home/</span>git<span class="regexp">/.ssh/</span>id_rsa.pub <span class="string">gitServer:</span><span class="regexp">/home/</span>git</div></pre></td></tr></table></figure>
<h3 id="lrzsz-Windows-Linux"><a href="#lrzsz-Windows-Linux" class="headerlink" title="lrzsz(Windows-Linux)"></a>lrzsz(Windows-Linux)</h3><p>rz  上传文件<br>sz  下载文件</p>
<h3 id="ncftp"><a href="#ncftp" class="headerlink" title="ncftp"></a>ncftp</h3><p>另外有两个常用的ftp工具<strong>ncftpget</strong>和<strong>ncftpput</strong>，可以实现<strong>后台的ftp上传和下载</strong>，这样我就可以利用这些命令在后台上传和下载文件了。</p>
<hr>
<h3 id="man手册转为PDF"><a href="#man手册转为PDF" class="headerlink" title="man手册转为PDF"></a>man手册转为PDF</h3><p>把man的帮助转换成PDF文档：<code>man -t [command] | ps2pdf - filename.pdf</code></p>
<hr>
<h2 id="管道符、awk等高级控制"><a href="#管道符、awk等高级控制" class="headerlink" title="管道符、awk等高级控制"></a>管道符、awk等高级控制</h2><p>“<strong>|</strong>”管道符是左边命令的标准输出(stdout)给右边命令作为标准输入（stdin）;<br>“<strong>&lt;</strong>”是右边文件名指定的文件内容读入为左边命令的标准输入（stdin）；<br>“<strong>&gt;</strong>”是左边命令的输出覆盖写到右边指定的文件中。</p>
<p><code>ps aux |grep XXX |awk &#39;{print $11}&#39; | grep -v &#39;grep&#39; | wc -l</code></p>
<ul>
<li><strong>grep -v ‘grep’</strong>  过滤带grep的部分 取反</li>
<li><strong>wc -l </strong>          统计行数</li>
<li><strong>sort -nr </strong>       排序</li>
</ul>
<hr>
<p><code>grep -rnI &quot;myleolan&quot; ~</code></p>
<ul>
<li>-r 参数表示递归搜索子目录中的文件,</li>
<li>-n表示打印匹配项行号，</li>
<li>-I表示忽略二进制文件。<br>查看环境变量中以”leolan”结尾的字符串：<code>export | grep &quot;.*leolan$&quot;</code><br>其中<code>$</code>就表示一行的末尾。</li>
</ul>
<hr>
<p><strong>wc</strong> 命令用于统计并输出一个文件中行、单词和字节的数目<br>分别只输出行数、单词数、字节数、字符数和输入文本中最长一行的字节数：<br>行数：<code>wc -l /etc/passwd</code><br>单词数：<code>wc -w /etc/passwd</code><br>字节数：<code>wc -c /etc/passwd</code><br>字符数：<code>wc -m /etc/passwd</code><br>最长行字节数：<code>wc -L /etc/passwd</code></p>
<p>注意：对于西文字符来说，一个字符就是一个字节，但对于中文字符一个汉字是大于2个字节的，具体数目是由字符编码决定的</p>
<hr>
<p><strong>sort </strong>排序命令<br>将输入按照一定方式排序，然后再输出,它支持的排序有按字典排序,数字排序，按月份排序，随机排序，反转排序，指定特定字段进行排序等等。<br>默认为字典排序：<code>cat /etc/passswd | sort</code><br>反转排序：<code>cat /etc/passwd | sort -r</code><br>按特定字段排序：<code>cat /etc/passwd | sort -t&#39;:&#39; -k 3 -n</code></p>
<p>上面的<strong>-t</strong>参数用于指定字段的分隔符，这里是以<strong>“:”</strong>作为分隔符；<br><strong>-k</strong> 字段号用于指定对哪一个字段进行排序。这里/etc/passwd文件的第三个字段为数字，默认情况下是一字典序排序的，如果要按照数字排序就要加上<strong>-n</strong>参数</p>
<hr>
<p><strong>uniq</strong> 去重命令<br>uniq命令可以用于过滤或者输出重复行。<br>  ● 过滤重复行<br>我们可以使用<strong>history</strong>命令查看最近执行过的命令（实际为读取<strong>${SHELL}_history</strong>文件），那么你可能就会要想去掉命令后面的参数然后去掉重复的命令：<code>history | cut -c 8- | cut -d &#39; &#39; -f 1 | uniq</code></p>
<p>然后经过层层过滤，你会发现确是只输出了执行的命令那一列，不过去重效果好像不明显，仔细看你会发现它趋势去重了，只是不那么明显，之所以不明显是因为uniq命令只能去连续重复的行，不是全文去重，所以要达到预期效果，我们先排序：<br><code>history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq</code><br>或者<code>history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort -u</code></p>
<p>  ● 输出重复行<br>输出重复过的行（重复的只输出一个）及重复次数：<br><code>history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq -dc</code><br>输出所有重复的行：<br><code>history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq -D</code></p>
<hr>
<p><strong>tr</strong> 命令<br>tr 命令可以用来删除一段文本信息中的某些文字。或者将其进行转换。<br>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>删除和set1匹配的字符，注意不是全词匹配也不是按字符顺序匹配</td>
</tr>
<tr>
<td>-s</td>
<td>去除set1指定的在输入文本中连续并重复的字符</td>
</tr>
</tbody>
</table>
<p>删除 “hello shiyanlou” 中所有的’o’,’l’,’h’：<code>echo &#39;hello shiyanlou&#39; | tr -d &#39;olh&#39;</code><br>将”hello” 中的ll,去重为一个l：<code>echo &#39;hello&#39; | tr -s &#39;l&#39;</code><br>将输入文本，全部转换为大写或小写输出：<code>cat /etc/passwd | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;</code><br>上面的<code>&#39;[:lower:]&#39;</code> <code>&#39;[:upper:]&#39;</code>你也可以简单的写作<code>&#39;[a-z]&#39;</code> <code>&#39;[A-Z]&#39;</code>,当然反过来将大写变小写也是可以的</p>
<hr>
<p><strong>col </strong>命令<br>col 命令可以将Tab换成对等数量的空格建，或反转这个操作。<br>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-x</td>
<td>将Tab转换为空格</td>
</tr>
<tr>
<td>-h</td>
<td>将空格转换为Tab（默认选项）</td>
</tr>
</tbody>
</table>
<p>操作举例：<br>查看 /etc/protocols 中的不可见字符，可以看到很多 ^I ，这其实就是 Tab 转义成可见字符的符号:<br><code>cat -A /etc/protocols</code><br>使用 col -x 将 /etc/protocols 中的 Tab 转换为空格,然后再使用 cat 查看，你发现 ^I 不见了:<br><code>cat /etc/protocols | col -x | cat -A</code></p>
<hr>
<p><strong>join</strong>命令<br>学过数据库的用户对这个应该不会陌生，这个命令就是用于将两个文件中包含相同内容的那一行合并在一起。</p>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-t</td>
<td>指定分隔符，默认为空格</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写的差异</td>
</tr>
<tr>
<td>-1</td>
<td>指明第一个文件要用哪个字段来对比，默认对比第一个字段</td>
</tr>
<tr>
<td>-2</td>
<td>指明第二个文件要用哪个字段来对比，默认对比第一个字段</td>
</tr>
</tbody>
</table>
<p>操作举例：<br>创建两个文件<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'1 hello'</span> &gt; file1</div><div class="line"><span class="built_in">echo</span> <span class="string">'1 shiyanlou'</span> &gt; file2</div><div class="line"><span class="built_in">join</span> file1 file2</div></pre></td></tr></table></figure></p>
<p>将/etc/passwd与/etc/shadow两个文件合并，指定以<strong>‘:’</strong>作为分隔符<br><code>sudo join -t&#39;:&#39; /etc/passwd /etc/shadow</code><br>将/etc/passwd与/etc/group两个文件合并，指定以<strong>‘:’</strong>作为分隔符, 分别比对第4和第3个字段<br><code>sudo join -t&#39;:&#39; -1 4 /etc/passwd -2 3 /etc/group</code></p>
<hr>
<p><strong>paste</strong>命令<br>paste这个命令与join 命令类似，它是在不对比数据的情况下，简单地将多个文件合并一起，以Tab隔开。</p>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>指定合并的分隔符，默认为Tab</td>
</tr>
<tr>
<td>-s</td>
<td>不合并到一行，每个文件为一行</td>
</tr>
</tbody>
</table>
<p>操作举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> hello &gt; file1</div><div class="line"><span class="built_in">echo</span> shiyanlou &gt; file2</div><div class="line"><span class="built_in">echo</span> www.shiyanlou.com &gt; file3</div><div class="line">paste <span class="_">-d</span> <span class="string">':'</span> file1 file2 file3</div><div class="line">paste <span class="_">-s</span> file1 file2 file3</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>xargs </strong>分割参数列表<br>xargs 是一条 UNIX 和类 UNIX 操作系统的常用命令。它的作用是将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。<br>这个命令在有些时候十分有用，特别是当用来处理产生大量输出结果的命令如 find，locate 和 grep 的结果，详细用法请参看 man 文档。<br><code>cut -d: -f1 &lt; /etc/passwd | sort | xargs echo</code><br>上面这个命令用于将/etc/passwd文件按<strong>:</strong>分割取第一个字段排序后，使用echo命令生成一个列表。</p>
<hr>
<p>命令行将<strong>图片转换为 ascii 字符</strong>查看的工具 aview/asciiview(黑白的)<br>彩色的：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install caca-utils</div><div class="line">cacaview <span class="symbol">&lt;pic_file&gt;</span></div><div class="line">cacademo</div><div class="line">cacafire</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>标准错误重定向</strong></p>
<p>重定向标准输出到文件，这是一个很实用的操作，另一个很实用的操作是将标准错误重定向，标准输出和标准错误都被指向伪终端的屏幕显示，所以我们经常看到的一个命令的输出通常是同时包含了标准输出和标准错误的结果的。比如下面的操作：</p>
<p>使用cat 命令同时读取两个文件，其中一个存在，另一个不存在<br><code>cat Documents/test.c hello.c</code><br>你可以看到除了正确输出了前一个文件的内容，还在末尾出现了一条错误信息<br>下面我们将输出重定向到一个文件，根据我们前面的经验，这里将在看不到任何输出了<br><code>cat Documents/test.c hello.c &gt; somefile</code></p>
<p>这里依然出现了那条错误信息，这正是因为如我上面说的那样，标准输出和标准错误虽然都指向终端屏幕，实际它们并不一样。那有的时候我们就是要可以隐藏某些错误或者警告，那又该怎么做呢。这就需要用到我们前面讲的文件描述符了：</p>
<p>将标准错误重定向到标准输出，再将标准输出重定向到文件，注意要将重定向到文件写到前面<br><code>cat Documents/test.c hello.c &gt;somefile  2&gt;&amp;1</code><br>或者只用bash提供的特殊的重定向符号”&amp;”将标准错误和标准输出同时重定向到文件<br><code>cat Documents/test.c hello.c &amp;&gt;somefilehell</code></p>
<p>注意你应该在输出重定向文件<strong>描述符</strong>前加上<strong>&amp;</strong>,否则shell会当做重定向到一个文件名为1的文件中</p>
<hr>
<p><strong>tee命令</strong>同时重定向到多个文件<br>经常你可能还有这样的需求，除了将需要将输出重定向到文件之外也需要将信息打印在终端<strong>(打印终端的同时输出到文件)</strong>，那么你可以使用tee命令来实现：<br><code>echo &#39;hello shiyanlou&#39; | tee hello</code></p>
<hr>
<p><strong>永久重定向</strong></p>
<p>前面的重定向操作都只是临时性的，即只对当前命令有效，那如何做到“永久”有效呢，比如在一个脚本中，你需要某一部分的命令的输出全部进行重定向，难道要让你在每个命令上面加上临时重定向的操作嘛，当然不需要，我们可以使用<strong>exec</strong>命令实现“永久”重定向。<strong>exec</strong>命令的作用是使用指定的命令替换当前的 Shell，及使用一个进程替换当前进程，或者指定新的重定向：</p>
<p>先开启一个子 Shell:<code>zsh</code><br>使用exec替换当前进程的重定向，将标准输出重定向到一个文件:<code>exec 1&gt;somefile</code><br>后面你执行的命令的输出都将被重定向到文件中,直到你退出当前子shell，或取消exec的重定向（后面将告诉你怎么做）<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls</div><div class="line"><span class="keyword">exit</span></div><div class="line">cat somefile</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>创建输出文件描述符</strong><br>默认在 Shell 中可以有9个打开的文件描述符，上面我们使用了也是它默认提供的0,1,2号文件描述符，另外我们还可以使用3-8的文件描述符，只是它们默认没有打开而已，你可以使用下面命令查看当前 Shell 进程中打开的文件描述符：<br><code>cd /dev/fd/;ls -Al</code></p>
<p>同样使用exec命令可以创建新的文件描述符：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zsh</div><div class="line"><span class="built_in">exec</span> 3&gt;somefile</div><div class="line"><span class="comment"># 先进入目录，再查看，否则你可能不能得到正确的结果，然后再回到上一次的目录</span></div><div class="line"><span class="built_in">cd</span> /dev/fd/;ls -Al;<span class="built_in">cd</span> -</div><div class="line"><span class="comment"># 注意下面的命令&gt;与&amp;之间不应该有空格，如果有空格则会出错</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"this is test"</span> &gt;&amp;3</div><div class="line">cat somefile</div><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>关闭文件描述符</strong><br>如上面我们打开的3号文件描述符，可以使用如下操作将它关闭：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exec</span> 3&gt;&amp;-</div><div class="line"><span class="built_in">cd</span> /dev/fd;ls -Al;<span class="built_in">cd</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>完全屏蔽命令的输出</strong><br>在 Linux 中有一个被成为“黑洞”的设备文件,所以导入它的数据都将被“吞噬”。<br>在类 UNIX 系统中，<strong>/dev/null</strong>，或称空设备，是一个特殊的设备文件，它通常被用于丢弃不需要的输出流，或作为用于输入流的空文件，这些操作通常由重定向完成。读取它则会立即得到一个<strong>EOF</strong>。<br>我们可以利用设个/dev/null屏蔽命令的输出：<br><code>cat Documents/test.c nefile 1&gt;/dev/null 2&gt;&amp;1</code><br>上面这样的操作将使你得不到任何输出结果。</p>
<hr>
<hr>
<h1 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h1><h2 id="wget递归下载整个网站"><a href="#wget递归下载整个网站" class="headerlink" title="wget递归下载整个网站"></a>wget递归下载整个网站</h2><p>wget加上参数之后，即可成为相当强大的下载工具。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget -r -p -np -k http://xxx.com/xxx</div><div class="line"></div><div class="line">-<span class="ruby">r,  --recursive（递归）指定使用递归下载</span></div><div class="line">-<span class="ruby">k,  --convert-links（转换链接）将下载的HTML页面中的链接转换为相对链接即本地链接</span></div><div class="line">-<span class="ruby">p,  --page-requisites（页面必需元素）下载所有的图片等页面显示所需的内容</span></div><div class="line">-<span class="ruby">np, --no-parent（不追溯至父级）</span></div><div class="line">-<span class="ruby">nc,   （断点续传）</span></div><div class="line">-<span class="ruby">o,    （日志）</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="axel高速下载"><a href="#axel高速下载" class="headerlink" title="axel高速下载"></a>axel高速下载</h2><p>axel是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。</p>
<p>CentOS安装Axel： 目前yum源上没有Axel，我们可以到<a href="http://pkgs.repoforge.org/axel/下载rpm包安装。" target="_blank" rel="external">http://pkgs.repoforge.org/axel/下载rpm包安装。</a> </p>
<p>32位CentOS执行下面命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -c http:<span class="comment">//pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.i386.rpm </span></div><div class="line">rpm -ivh axel-<span class="number">2.4</span>-<span class="number">1</span><span class="selector-class">.el5</span><span class="selector-class">.rf</span><span class="selector-class">.i386</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure></p>
<p>64位CentOS执行下面命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -c http:<span class="comment">//pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.x86_64.rpm </span></div><div class="line">rpm -ivh axel-<span class="number">2.4</span>-<span class="number">1</span><span class="selector-class">.el5</span><span class="selector-class">.rf</span><span class="selector-class">.x86_64</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure></p>
<p>Debian/Ubuntu安装Axel： <code>apt-get install axel</code></p>
<p>如下载lnmp安装包指定10个线程，保存到/tmp/中：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">axel -n <span class="number">10</span> -o <span class="regexp">/tmp/</span> <span class="string">http:</span><span class="comment">//www.linuxde.net/lnmp.tar.gz</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="监听流量"><a href="#监听流量" class="headerlink" title="监听流量"></a>监听流量</h2><h3 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h3><p>官方网站：<a href="http://www.ex-parrot.com/~pdw/iftop/" target="_blank" rel="external">http://www.ex-parrot.com/~pdw/iftop/</a><br>安装：<br><strong>源码安装</strong>：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">yum install flex byacc  libpcap ncurses ncurses-devel libpcap-devel  #安装依赖</div><div class="line">或</div><div class="line">apt-<span class="built_in">get</span> install flex byacc  libpcap0.<span class="number">8</span> libncurses5   #安装依赖</div><div class="line"></div><div class="line">#编译之前确保已安装好了<span class="keyword">make</span>、gcc、autoconf等。</div><div class="line">wget http://www.<span class="keyword">ex</span>-parrot.<span class="keyword">com</span>/pdw/iftop/download/iftop-<span class="number">0.17</span>.tar.gz</div><div class="line">tar zxvf iftop-<span class="number">0.17</span>.tar.gz</div><div class="line"><span class="keyword">cd</span> iftop-<span class="number">0.17</span></div><div class="line">./configure</div><div class="line"><span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> install</div></pre></td></tr></table></figure></p>
<p><strong>仓库源安装</strong>：<br>Debian/Ubuntu系统：<code>apt-get install iftop</code><br>Centos/Redhat系统：<a href="https://www.vpser.net/manage/centos-rhel-linux-third-party-source-epel.html" target="_blank" rel="external">安装EPEL源</a>，然后<code>yum install iftop</code>安装</p>
<p><strong>使用</strong>：<code>iftop</code>或<code>iftop -i eth0 -n -p</code></p>
<hr>
<h3 id="nethogs"><a href="#nethogs" class="headerlink" title="nethogs"></a>nethogs</h3><p><code>nethogs eth0</code></p>
<hr>
<h2 id="网页命令行阅读器"><a href="#网页命令行阅读器" class="headerlink" title="网页命令行阅读器"></a>网页命令行阅读器</h2><p><code>w3m 【网址】</code>    网页命令行方式阅读，对于没有桌面环境但在需要判断网页服务是否正常时非常有用。</p>
<p>links阅读html文件,只显示链接<br><code>links [选项] [URL]</code><br>例：links www.baidu.com</p>
<hr>
<h2 id="禁ping-（禁用ICMP协议）"><a href="#禁ping-（禁用ICMP协议）" class="headerlink" title="禁ping （禁用ICMP协议）"></a>禁ping （禁用ICMP协议）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">“echo <span class="string">"1"</span> &gt;<span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/icmp_echo_ignore_all”</span></div></pre></td></tr></table></figure>
<p>不能vi编辑，1为禁止ping命令，0为允许ping命令</p>
<hr>
<p><strong>文字接口数据包捕获器</strong>:<br><code>tapdump [-AennqX] [-i 接口] [-w 存储文件名] [-c 次数] \ [-r 文件] [所要摘取的数据包数据格式]</code></p>
<p><strong>图形接口数据包捕获器</strong>：Wireshark<br><code>yum install wireshark wireshark-gnome</code></p>
<hr>
<h2 id="屏幕共享（局域网，公网貌似不行）"><a href="#屏幕共享（局域网，公网貌似不行）" class="headerlink" title="屏幕共享（局域网，公网貌似不行）"></a>屏幕共享（局域网，公网貌似不行）</h2><p>连接的两台电脑（也可多台）命令行显示是实时同步的，两边都可以操作。<br>可能要先安装:<strong>screen</strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">screen -S foo 创建会话</div><div class="line">screen -x foo 加入会话</div><div class="line"><span class="keyword">exit</span>退出</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>即时通讯软件</strong>： pidgin（gaim的延伸）<br><code>yum install pidgin</code></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;系统管理类&quot;&gt;&lt;a href=&quot;#系统管理类&quot; class=&quot;h
    
    </summary>
    
      <category term="系统管理" scheme="https://www.leolan.top/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Linux常用命令" scheme="https://www.leolan.top/tags/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>重装服务器系统基本配置</title>
    <link href="https://www.leolan.top/posts/29609/"/>
    <id>https://www.leolan.top/posts/29609/</id>
    <published>2016-11-25T03:22:28.000Z</published>
    <updated>2017-02-27T08:47:33.060Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="Centos-Mini"><a href="#Centos-Mini" class="headerlink" title="Centos Mini"></a>Centos Mini</h1><p>Centos mini版镜像缺少很多常用工具</p>
<p>更新系统<br><code>yum update</code></p>
<p>开发环境<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install </span>gcc gcc-c++ make automake cmake libtool <span class="keyword">bison </span>flex perl git <span class="keyword">subversion </span>mercurial -y</div></pre></td></tr></table></figure></p>
<p>常用开发库<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install </span>readline-devel <span class="keyword">bzip2-devel </span>zlib-devel libxml2-devel libxslt-devel openssl-devel kernel-devel pcre-devel <span class="keyword">boost-devel </span>python-devel python-setuptools libpcap-devel -y</div></pre></td></tr></table></figure></p>
<p>常用软件<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> wget vim lsof lrzsz tcpdump -y</div></pre></td></tr></table></figure></p>
<p>防火墙打开需要的端口<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">80</span> -j ACCEPT</div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8080</span> -j ACCEPT </div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">3306</span> -j ACCEPT  #激活用ACCEPT ，关闭用DROP</div></pre></td></tr></table></figure></p>
<p>保存配置<br><code>/etc/init.d/iptables save</code><br>重启<br><code>service iptables restart</code></p>
<hr>
<h1 id="centos（6-X及以下版本）"><a href="#centos（6-X及以下版本）" class="headerlink" title="centos（6.X及以下版本）"></a>centos（6.X及以下版本）</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><p><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code> 编辑配置文件,添加修改以下内容<br><strong>双网不要配内网网关</strong><br>例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#联通公网：</div><div class="line">DEVICE=eth0</div><div class="line">BOOTPROTO=static</div><div class="line">ONBOOT=yes</div><div class="line">IPADDR=<span class="number">221.4</span><span class="number">.223</span><span class="number">.114</span></div><div class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.224</span>  </div><div class="line">GATEWAY=<span class="number">221.4</span>.xxx.xxx</div><div class="line">DNS1=<span class="number">221.5</span><span class="number">.88</span><span class="number">.88</span></div><div class="line">DNS2=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></div><div class="line">#内网：</div><div class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth1</div><div class="line">DEVICE=eth1</div><div class="line">BOOTPROTO=static</div><div class="line">ONBOOT=yes</div><div class="line">IPADDR=<span class="number">192.168</span><span class="number">.0</span><span class="number">.114</span></div><div class="line">NETMASK=<span class="number">255.255</span><span class="number">.252</span><span class="number">.0</span>  </div><div class="line">GATEWAY=<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">#DNS1=<span class="number">221.5</span><span class="number">.88</span><span class="number">.88</span></div><div class="line">#DNS2=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>   （公网配了DNS和网关了）</div><div class="line"></div><div class="line">#修改DNS也可以</div><div class="line">vim /etc/resolv.conf</div><div class="line">nameserver <span class="number">221.5</span><span class="number">.88</span><span class="number">.88</span></div><div class="line">nameserver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></div><div class="line">IPV6INIT=no                 #禁止IPV6</div><div class="line"></div><div class="line">service ip6tables stop      #停止IPV6服务</div><div class="line">chkconfig ip6tables off     #禁止IPV6开机启动</div><div class="line">service yum-updatesd stop   #关闭系统自动更新</div><div class="line">chkconfig yum-updatesd off  #禁止开启启动</div><div class="line">service network restart     #重启网络连接</div><div class="line">ifconfig                    #查看IP地址</div></pre></td></tr></table></figure></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">80</span> -j ACCEPT</div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8080</span> -j ACCEPT </div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">3306</span> -j ACCEPT  #激活用ACCEPT ，关闭用DROP</div></pre></td></tr></table></figure>
<p>保存配置<br><code>/etc/init.d/iptables save</code><br>重启<br><code>service iptables restart</code></p>
<h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vi <span class="meta-keyword">/etc/</span>sysconfig/network</div><div class="line">vi <span class="meta-keyword">/etc/</span>hosts</div><div class="line">hostname newname   <span class="meta">#newname就是你要改的主机名</span></div><div class="line"></div><div class="line">service network restart  或  <span class="meta-keyword">/etc/</span>network restart</div><div class="line">yum install wget lrzsz -y</div><div class="line">service sshd start</div><div class="line">chkconfig sshd on</div><div class="line">shutdown -r now <span class="meta">#重启系统</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="Ubuntu（14-04及以上版本）"><a href="#Ubuntu（14-04及以上版本）" class="headerlink" title="Ubuntu（14.04及以上版本）"></a>Ubuntu（14.04及以上版本）</h1><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><p>新安装的Ubuntu如果没有root用户密码，用<code>sudo passwd root</code>设置root密码。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> wget lrzsz openssh-<span class="keyword">server</span> vim -y</div><div class="line">/etc/init.d/ssh <span class="keyword">start</span></div></pre></td></tr></table></figure></p>
<h2 id="允许root登录shell"><a href="#允许root登录shell" class="headerlink" title="允许root登录shell"></a>允许root登录shell</h2><p>Ubuntu超级用户root用户是默认被禁用的，这就是为什么我们登陆时只能以普通用户登陆，而且switch user时没有root选项。<br>必须使用命令启动root。即输入：<code>sudo passwd root</code>。然后输入密码即可启动root。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">vim</span> etc/ssh/sshd_config</div><div class="line">将PermitRootLogin 的值改为<span class="literal">yes</span></div><div class="line">sudo service sshd restart</div></pre></td></tr></table></figure></p>
<h2 id="网卡地址配置"><a href="#网卡地址配置" class="headerlink" title="网卡地址配置"></a>网卡地址配置</h2><p>配置静态IP地址<code>sudo vi /etc/network/interfaces</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#双网不要配内网网关</div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">ifconfig   #可以看到eth0用作公网</div><div class="line">auto eth0   （有的可能是eno0或eno1）</div><div class="line">iface eth0 inet static</div><div class="line">address 221.4.xxx.xxx</div><div class="line">gateway 221.4.xxx.xxx</div><div class="line">netmask 255.255.255.xxx</div><div class="line">dns-nameservers 221.5.88.88</div><div class="line">dns-nameservers 8.8.8.8</div><div class="line">auto eth1</div><div class="line">iface eth1 inet static</div><div class="line">address 192.168.0.254</div><div class="line">netmask 255.255.252.0</div><div class="line">#gateway 192.168.0.1</div></pre></td></tr></table></figure></p>
<p>保存退出,重启服务<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/networking restart</span></div></pre></td></tr></table></figure></p>
<h2 id="以DHCP-方式配置网卡"><a href="#以DHCP-方式配置网卡" class="headerlink" title="以DHCP 方式配置网卡"></a>以DHCP 方式配置网卡</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/network/interfaces</div><div class="line">   <span class="keyword">auto</span> eth0</div><div class="line">   iface eth0 inet dhcp</div></pre></td></tr></table></figure>
<p>用<code>/etc/init.d/networking restart</code>命令使网络设置生效</p>
<h2 id="修改DNS服务器"><a href="#修改DNS服务器" class="headerlink" title="修改DNS服务器"></a>修改DNS服务器</h2><p>法一<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi /etc/network/interfaces</div><div class="line">增加</div><div class="line">dns-nameservers <span class="number">221.5</span><span class="number">.88</span><span class="number">.88</span></div><div class="line">dns-nameservers <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></div></pre></td></tr></table></figure></p>
<p>法二<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi /etc/resolvconf/resolv.conf.d/head</div><div class="line">增加</div><div class="line">dns-nameservers <span class="number">221.5</span><span class="number">.88</span><span class="number">.88</span></div><div class="line">dns-nameservers <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></div></pre></td></tr></table></figure></p>
<p>重启后生效，重启不失效</p>
<h2 id="防火墙-1"><a href="#防火墙-1" class="headerlink" title="防火墙"></a>防火墙</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resolvconf -u</div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp -<span class="selector-tag">i</span> eth0 --dport <span class="number">22</span> -j ACCEPT</div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">80</span> -j ACCEPT</div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8080</span> -j ACCEPT </div><div class="line">iptables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">3306</span> -j ACCEPT  #激活用ACCEPT ，关闭用DROP</div></pre></td></tr></table></figure>
<p>保存配置<br><code>/etc/init.d/iptables save</code><br>重启<br><code>service iptables restart</code></p>
<h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vi <span class="meta-keyword">/etc/</span>hostname</div><div class="line">vi <span class="meta-keyword">/etc/</span>hosts</div><div class="line">hostname newname  <span class="meta">#newname就是你要改的主机名</span></div><div class="line"></div><div class="line"><span class="meta-keyword">/etc/</span>init.d/networking restart</div><div class="line">shutdown -r now   <span class="meta">#重启系统</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="Ubuntu-系统版本升级（如从16-04升到16-10）"><a href="#Ubuntu-系统版本升级（如从16-04升到16-10）" class="headerlink" title="Ubuntu 系统版本升级（如从16.04升到16.10）"></a>Ubuntu 系统版本升级（如从16.04升到16.10）</h1><p><strong>Canonical</strong> 已经提供了一个直接升级的方法，非常快捷容易。适用于：Kubuntu、 Xubuntu、 Lubuntu、 Ubuntu GNOME、 Ubuntu Mate。<br>首先更新一下系统<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> update</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade</div></pre></td></tr></table></figure></p>
<p>接下来，需要安装更新管理器的核心<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> <span class="keyword">update</span>-manager-core  </div><div class="line">sudo <span class="keyword">do</span>-<span class="keyword">release</span>-<span class="keyword">upgrade</span> -d  或  sudo <span class="keyword">update</span>-manager -d</div></pre></td></tr></table></figure></p>
<p>注：<strong>d-release-upgrade</strong> 命令是帮助我们寻找最新的稳定版本，而 -d 参数意思是包括非稳定版本。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Centos-Mini&quot;&gt;&lt;a href=&quot;#Centos-Mi
    
    </summary>
    
      <category term="环境搭建" scheme="https://www.leolan.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="重装服务器系统基本配置" scheme="https://www.leolan.top/tags/%E9%87%8D%E8%A3%85%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>操作系统常用配置设置</title>
    <link href="https://www.leolan.top/posts/3766/"/>
    <id>https://www.leolan.top/posts/3766/</id>
    <published>2016-11-25T02:57:35.000Z</published>
    <updated>2017-02-27T08:47:33.055Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><h2 id="开启root用户登录桌面"><a href="#开启root用户登录桌面" class="headerlink" title="开启root用户登录桌面"></a>开启root用户登录桌面</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo vim /usr/share/lightdm/lightdm<span class="selector-class">.conf</span><span class="selector-class">.d</span>/<span class="number">50</span>-ubuntu<span class="selector-class">.conf</span></div><div class="line">加上下面一句</div><div class="line">greeter-show-manual-login=true</div><div class="line">然后修改密码</div><div class="line">sudo passwd root</div><div class="line">重启系统</div></pre></td></tr></table></figure>
<hr>
<h2 id="允许root用户登录ssh"><a href="#允许root用户登录ssh" class="headerlink" title="允许root用户登录ssh"></a>允许root用户登录ssh</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/etc/ssh/sshd_config</div><div class="line">修改PermitRootLogin</div><div class="line">PermitRootLogin <span class="literal">yes</span></div><div class="line"><span class="comment">#保存退出重启服务</span></div><div class="line">sudo service ssh restart</div></pre></td></tr></table></figure>
<hr>
<h1 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h1><h2 id="Docker-Centos修改密码出错"><a href="#Docker-Centos修改密码出错" class="headerlink" title="Docker Centos修改密码出错"></a>Docker Centos修改密码出错</h2><p>CentOS 修改root密码时报错：<br>/usr/share/cracklib/pw_dict.pwd: No such file or directory PWOpen: No such file or directory </p>
<p>这是因为缺少某些lib库。解决办法：<code>yum reinstall -y cracklib-dicts</code></p>
<hr>
<h2 id="使用yum时报fakesystemd相关错误"><a href="#使用yum时报fakesystemd相关错误" class="headerlink" title="使用yum时报fakesystemd相关错误"></a>使用yum时报fakesystemd相关错误</h2><p>解决：<code>yum swap -- remove fakesystemd -- install systemd systemd-libs</code><br>参考：<a href="http://stackoverflow.com/questions/36630718/docker-as-a-builder-cant-install-systemd-header-files" target="_blank" rel="external">http://stackoverflow.com/questions/36630718/docker-as-a-builder-cant-install-systemd-header-files</a></p>
<hr>
<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><hr>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=
    
    </summary>
    
      <category term="杂项" scheme="https://www.leolan.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="操作系统常用配置设置" scheme="https://www.leolan.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>搭建shadowsocks服务器</title>
    <link href="https://www.leolan.top/posts/13905/"/>
    <id>https://www.leolan.top/posts/13905/</id>
    <published>2016-11-21T08:50:39.000Z</published>
    <updated>2017-02-27T08:47:33.059Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>目前 shadowsocks 服务已经受到了影响，不过部署在 25 端口目前还可用。</p>
<p>shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。<br>因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。</p>
<p>主流的 VPS（虚拟主机）服务器提供商有三家：</p>
<p>linode<br>digital ocean<br>bandwagon（搬瓦工）<br>下面的比上面的便宜。如果只是自用，bandwagon 足够。</p>
<p>一般使用 paypal 绑定一个 visa 或 mastercard 信用卡来付款。注意要用国际 paypal 帐号，国内的是不能用外币付款的。</p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="安装-shadowsocks"><a href="#安装-shadowsocks" class="headerlink" title="安装 shadowsocks"></a>安装 shadowsocks</h2><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu:"></a>Debian/Ubuntu:</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> python-pip</div><div class="line">pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>
<p>如果遇到第一个命令安装 python-pip 时找不到包的情况。pip 官方给出了一个安装脚本，可以自动安装 pip。先下载脚本，然后执行即可：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">wget </span><span class="string">https:</span>//<span class="string">bootstrap.</span><span class="string">pypa.</span><span class="string">io/</span><span class="built_in">get-pip.py</span> <span class="string">python </span><span class="built_in">get-pip.py</span></div></pre></td></tr></table></figure></p>
<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>
<h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/madeye/shadowsocks-libev.git</div></pre></td></tr></table></figure>
<p>进入目录编译安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> shadowsocks-libev</div><div class="line">./configure --prefix=/usr</div><div class="line"><span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> install</div></pre></td></tr></table></figure></p>
<p>配置服务及配置文件<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p <span class="regexp">/etc/</span>shadowsocks-libev</div><div class="line">cp .<span class="regexp">/debian/</span>shadowsocks-libev.init <span class="regexp">/etc/</span>init.d/shadowsocks-libev</div><div class="line">cp .<span class="regexp">/debian/</span>shadowsocks-libev.<span class="keyword">default</span> <span class="regexp">/etc/</span><span class="keyword">default</span>/shadowsocks-libev</div><div class="line">cp .<span class="regexp">/debian/</span>config.json <span class="regexp">/etc/</span>shadowsocks-libev/config.json</div><div class="line">chmod +x <span class="regexp">/etc/</span>init.d/shadowsocks-libev</div></pre></td></tr></table></figure></p>
<p>配置shadowsocks配置文件<br><code>vi /etc/shadowsocks-libev/config.json</code><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">          <span class="string">"server"</span>:<span class="string">"vps的ip"</span>,</div><div class="line">          <span class="string">"server_port"</span>:<span class="number">8388</span>,   <span class="meta">#服务器端口，与SSH端口不一样</span></div><div class="line">          <span class="string">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">          <span class="string">"password"</span>:<span class="string">"barfoo!"</span>, <span class="meta">#认证密码</span></div><div class="line">          <span class="string">"timeout"</span>:<span class="number">60</span>,</div><div class="line">          <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span> <span class="meta">#加密方式，推荐使用aes-256-cfb</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启shadowsocks服务。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/shadowsocks-libev <span class="literal">stop</span></div><div class="line">/etc/init.d/shadowsocks-libev <span class="literal">start</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p>shadowsocks 启动时的参数，如服务器端口，代理端口，登录密码等，可以通过启动时的<strong>命令行参数</strong>来设定，也可以通过<strong> json 格式的配置文件设定</strong>。推荐使用配置文件，方便查看和修改。</p>
<p>用 <strong>vi 新建</strong>一个配置文件：<code>vi /etc/shadowsocks.json</code><br>然后输入如下内容：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">   <span class="string">"server"</span>:<span class="string">"my_server_ip"</span>,       <span class="comment">#服务器ip地址</span></div><div class="line">   <span class="string">"server_port"</span>:<span class="number">25</span>,              <span class="comment">#绑定的端口，端口最好小于1024，注意不要设置已经使用了的端口</span></div><div class="line">   <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,  </div><div class="line">   <span class="string">"local_port"</span>:<span class="number">1080</span>, </div><div class="line">   <span class="string">"password"</span>:<span class="string">"mypassword"</span>,       <span class="comment">#连接密码</span></div><div class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,                <span class="comment">#超时时间（秒）</span></div><div class="line">   <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,        <span class="comment">#加密方法</span></div><div class="line">   <span class="string">"fast_open"</span>: <span class="literal">false</span> &#125;           <span class="comment">#Linux 内核版本大于3.7，设置为true可降低延迟</span></div></pre></td></tr></table></figure></p>
<p>如果需要配置多个SS账号，可以按照如下案例进行配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"server"</span>:<span class="string">"your_server_ip"</span>,</div><div class="line"><span class="attr">"port_password"</span>:&#123;</div><div class="line">     <span class="attr">"8381"</span>:<span class="string">"password1"</span>,</div><div class="line">     <span class="attr">"8382"</span>:<span class="string">"password2"</span>,</div><div class="line">     <span class="attr">"8383"</span>:<span class="string">"password3"</span>,</div><div class="line">     <span class="attr">"8384"</span>:<span class="string">"password4"</span></div><div class="line">     &#125;,</div><div class="line"><span class="attr">"timeout"</span>:<span class="number">300</span>,</div><div class="line"><span class="attr">"method"</span>:<span class="string">"rc4-md5"</span>,</div><div class="line"><span class="attr">"fast_open"</span>:<span class="literal">false</span>,</div><div class="line"><span class="attr">"workers"</span>:<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="启动-shadowsocks"><a href="#启动-shadowsocks" class="headerlink" title="启动 shadowsocks"></a>启动 shadowsocks</h2><p>启动 shadowsocks 服务器的命令如下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json           <span class="comment">#启动服务</span></div><div class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d start  <span class="comment">#后台启动服务</span></div><div class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d stop   <span class="comment">#停止服务</span></div></pre></td></tr></table></figure></p>
<h2 id="shadowsocks-的日志保存在-var-log-shadowsocks-log"><a href="#shadowsocks-的日志保存在-var-log-shadowsocks-log" class="headerlink" title="shadowsocks 的日志保存在: /var/log/shadowsocks.log"></a>shadowsocks 的日志保存在:<strong> /var/log/shadowsocks.log</strong></h2><h1 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h1><p>这里提供一键安装脚本</p>
<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><strong>Ubuntu、Debian</strong><br><a href="http://ofyfogrgx.bkt.clouddn.com/blog/20161121/172019083.sh" target="_blank" rel="external">点我直接下载脚本文件</a></p>
<p>安装中出现的选择界面，请一律选择YES，然后回车。<br>安装过程中脚本会提示输入server_port及password<br>server_port建议取小一些，如443,80等。<br>password自定<br>安装完成后有提示。<br>卸载：<code>name.sh uninstall</code><br>更新：<code>name.sh update</code>更新其实是卸载了重装，配置不会丢失。<br>shadowsocks的配置文件位于：<strong>/etc/shadowsocks-libev/config.json</strong>可以编辑该文件从而修改密码、服务器端口及加密方式，修改之后记得保存重启。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/shadowsocks-libev <span class="literal">stop</span></div><div class="line">/etc/init.d/shadowsocks-libev <span class="literal">start</span></div></pre></td></tr></table></figure></p>
<p>脚本已加入开机自启。</p>
<hr>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>项目地址：<a href="https://github.com/shadowsocksr/shadowsocksr" target="_blank" rel="external">https://github.com/shadowsocksr/shadowsocksr</a><br>脚本下载：<a href="http://ofyfogrgx.bkt.clouddn.com/blog/20170105/095845797.sh" target="_blank" rel="external">http://ofyfogrgx.bkt.clouddn.com/blog/20170105/095845797.sh</a></p>
<hr>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>基于Python的SS服务器,原文：<a href="https://blog.linuxeye.com/423.html" target="_blank" rel="external">https://blog.linuxeye.com/423.html</a></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">wget <span class="keyword">http</span>://ofyfogrgx.bkt.clouddn.com/blog/<span class="number">20170105</span>/<span class="number">100514414.</span>zip</div><div class="line">unzip <span class="number">100514414.</span>zip</div><div class="line">cd oneinstack</div><div class="line">./shadowsocks.sh install</div><div class="line"></div><div class="line"><span class="comment">#Shadowsocks添加用户</span></div><div class="line">./shadowsocks.sh adduser</div><div class="line"></div><div class="line"><span class="comment">#Shadowsocks卸载</span></div><div class="line">./shadowsocks.sh uninstall</div><div class="line"></div><div class="line"><span class="comment">#Shadowsocks服务管理</span></div><div class="line">service shadowsocks <span class="built_in">start</span>      <span class="comment">#启动</span></div><div class="line">service shadowsocks <span class="built_in">stop</span>      <span class="comment">#关闭</span></div><div class="line">service shadowsocks restart   <span class="comment">#重启</span></div><div class="line">service shadowsocks status    <span class="comment">#状态</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="安装并启动-shadowsocks-客户端"><a href="#安装并启动-shadowsocks-客户端" class="headerlink" title="安装并启动 shadowsocks 客户端"></a>安装并启动 shadowsocks 客户端</h2><p>shadowsocks 支持 windows、Mac OS X、Linux、Android、iOS 等多个平台。不过 iOS 由于系统对应用后台运行的限制，推荐使用客户端内嵌的浏览器科学上网，给其他应用代理时需要每过几分钟重新启动一下 app。</p>
<p>shadowsocks 项目 Github 主页在<a href="https://github.com/shadowsocks" target="_blank" rel="external">这里</a>。</p>
<p>里面可以找到客户端下载地址。</p>
<p>下载安装客户端以后，只需按服务器的配置填写 IP 地址、服务器端口、本地端口（如果没有本地端口选项，就是默认的 1080）、密码、加密方式等参数，启动就可以了。</p>
<p>客户端支持全局代理和 PAC 代理两种方式，后者会使用一个脚本来自动检查一个网站是否在需要代理的网站列表中，自动选择直接连接或代理连接。</p>
<p>PAC 列表可以在线更新，但是难免有收录不全的情况。这时可以选择关闭 shadowsocks 代理（实际上是取消对系统代理的配置，shadowsocks 客户端仍然保持工作），然后使用支持自定义规则的代理管理插件来实现自动切换代理，比如 switchyOmega。</p>
<h2 id="使用-switchyOmega-实现自动切换代理"><a href="#使用-switchyOmega-实现自动切换代理" class="headerlink" title="使用 switchyOmega 实现自动切换代理"></a>使用 switchyOmega 实现自动切换代理</h2><p>switchyOmega 是 chrome 浏览器上一个很好用的代理管理插件。它的前身 switchySharp 更有名。</p>
<p>chrome 应用商店本身需要翻墙才能访问，因此需要先在 shadowsocks 启动代理模式下下载安装，再关闭 shadowsocks 代理。</p>
<p>安装完毕后，右击 switchyOmega 图标，选择选项，进入 switchOmega 配置界面。</p>
<p>创建 shadowsocks 情景模式</p>
<p>新建一个情景模式，比如叫 SS，代理协议选择 socks5，代理地址为 127.0.0.1，端口 1080。</p>
<p>现在切换到 SS 情景模式就可以通过 shadowsocks 科学上网了。后面获取自动切换规则列表</p>
<p>设置自动切换模式</p>
<p>在设置界面选择自动切换模式，在 “切换规则” 中勾选“规则列表规则”，对应的情景模式选择刚刚新建的 SS。</p>
<p>然后在下面的规则列表地址中填写</p>
<p><a href="https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt" target="_blank" rel="external">https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</a></p>
<p>规则列表格式选择 AutoProxy。</p>
<p>然后点击立即更新情景模式， 更新完成后会有提示。</p>
<p>点击左侧的 “应用选项”。然后单击 switchyOmega 图标，选择自动切换，就可以在访问“不存在的网站” 时自动切换到 shadowsocks 代理了。</p>
<h2 id="添加自定义规则"><a href="#添加自定义规则" class="headerlink" title="添加自定义规则"></a>添加自定义规则</h2><p>如果遇到某个国外网站无法直接连接或速度太慢时，可以单击 switchyOmega 图标，选择 “添加条件”，情景模式选择 SS，就可以了。</p>
<p>这时打开 switchyOmega 选项，在自动切换模式的切换规则中就可以看到刚刚添加的规则。可以在这里管理自定义的规则。</p>
<p>导入和导出 switchyOmega 设置</p>
<p>如果换了一台电脑，重新设置一遍 switchyOmega 就太麻烦了。可以在设置好的 switchyOmega 中导出设置文件，在另一个 chrome 浏览器中导入，就可以直接复制原来的设置了。</p>
<p>在 switchyOmega 选项的左侧点击 “导入 / 导出”，点击“生成备份文件” 即可生成 switchyOmega 设置备份。点击 “从备份文件恢复” 可以导入备份</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;目前 shadowsocks 服务已经受到了影响，不过部署在 25 端口目
    
    </summary>
    
      <category term="环境搭建" scheme="https://www.leolan.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="搭建shadowsocks服务器" scheme="https://www.leolan.top/tags/%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="搭梯子" scheme="https://www.leolan.top/tags/%E6%90%AD%E6%A2%AF%E5%AD%90/"/>
    
  </entry>
  
</feed>
